Analyzing APK: ai.viz.notifier.apk
*** Base package: ai.viz.notifier
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkk: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.ji: void b(com.flurry.sdk.ji)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_301[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_442[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkk: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_288[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["Viz key start"]
[UnitContainer{unit=$r2 = "Viz key start", method='<ai.viz.notifier.cache.VizImageSeriesCacheManager: byte[] generateIV()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://"]
[UnitContainer{unit=specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://"), method='<com.flurry.sdk.ly: java.lang.String a(java.lang.String)>'}]
=======================================
Analyzing APK: be.familyware.incasa.apk.apk
*** Base package: ai.viz.notifier
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkk: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.ji: void b(com.flurry.sdk.ji)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_301[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_442[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkk: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_288[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["Viz key start"]
[UnitContainer{unit=$r2 = "Viz key start", method='<ai.viz.notifier.cache.VizImageSeriesCacheManager: byte[] generateIV()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://"]
[UnitContainer{unit=specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://"), method='<com.flurry.sdk.ly: java.lang.String a(java.lang.String)>'}]
=======================================
Analyzing APK: be.remedus.remecoachnew.apk
*** Base package: be.remedus.remecoachnew
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["OldPBEWithSHAAnd3-KeyTripleDES-CBC", "PBEWithSHAAnd3-KeyTripleDES-CBC", "BrokenPBEWithSHAAnd3-KeyTripleDES-CBC", "PBEWithSHAAnd3-KeyTripleDES-CBC", "PBEWithSHAAnd3-KeyTripleDES-CBC"]
[UnitContainer{unit=$fakeLocal_265[0] = "OldPBEWithSHAAnd3-KeyTripleDES-CBC", method='<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject(char[])>'}, UnitContainer{unit=$fakeLocal_225[0] = "PBEWithSHAAnd3-KeyTripleDES-CBC", method='<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject(char[])>'}, UnitContainer{unit=$fakeLocal_244[0] = "BrokenPBEWithSHAAnd3-KeyTripleDES-CBC", method='<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject(char[])>'}, UnitContainer{unit=$fakeLocal_147[0] = "PBEWithSHAAnd3-KeyTripleDES-CBC", method='<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>'}, UnitContainer{unit=$fakeLocal_284[0] = "PBEWithSHAAnd3-KeyTripleDES-CBC", method='<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject(char[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <cordova.plugins.Diagnostic: java.lang.String generateRandom()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.onesignal.GenerateNotification: void createSummaryNotification(com.onesignal.NotificationGenerationJob,com.onesignal.GenerateNotification$OneSignalNotificationBuilder)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzl: void zzk(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement sqrt()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.onesignal.GenerateNotification: void showNotification(com.onesignal.NotificationGenerationJob)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.onesignal.GcmBroadcastReceiver: void startGCMService(android.content.Context,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.onesignal.NotificationGenerationJob: java.lang.Integer getAndroidId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.onesignal.OneSignalChromeTab: void setup(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <de.appplant.cordova.plugin.notification.Builder: void <init>(de.appplant.cordova.plugin.notification.Options)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECCurve$F2m: org.bouncycastle.math.ec.ECFieldElement solveQuadradicEquation(org.bouncycastle.math.ec.ECFieldElement)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA1", "SHA1"]
[UnitContainer{unit=$fakeLocal_87[1] = "MD5", method='<com.onesignal.OneSignalStateSynchronizer: void syncHashedEmail(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_88[1] = "SHA-1", method='<com.onesignal.OneSignalStateSynchronizer: void syncHashedEmail(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_41[0] = "SHA1", method='<org.bouncycastle.ocsp.RespID: void <init>(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$r3, $r1, @this: org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameters$PKCS12PBE, $r0.<org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameters$PBKDF2: org.bouncycastle.asn1.pkcs.PBKDF2Params params>, @parameter1: java.security.Key, $r0.<org.bouncycastle.asn1.pkcs.MacData: java.math.BigInteger iterationCount>, i2 << 8, $i1 & 32, $r12, @parameter1: java.security.Key, @parameter4: int, @parameter2: int, $r3, $r10, specialinvoke $r10.<org.bouncycastle.asn1.BEROctetStringParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), new java.io.BufferedInputStream, $i0, (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r14, $i0, null, (org.bouncycastle.asn1.pkcs.Pfx) $r1, i3 << 0, null, $i0, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.SafeBag: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), $r0, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), null, $r2, $r0.<org.bouncycastle.asn1.pkcs.ContentInfo: org.bouncycastle.asn1.ASN1Encodable content>, virtualinvoke $r16.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r4, "", 2), $r4, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @this: org.bouncycastle.jce.provider.JDKAlgorithmParameters$PBKDF2, staticinvoke <org.bouncycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r0, $i1), $r3, interfaceinvoke $r5.<org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r0), $r0.<org.bouncycastle.asn1.ASN1InputStream: int limit>, r1, $r2, $i0, $r3, specialinvoke $r3.<org.bouncycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.bouncycastle.asn1.ASN1OctetString: byte[] string>, r1, staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r7, $r10), $r3, new org.bouncycastle.asn1.pkcs.Pfx, $r0, $i0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)>($r7, $r10), @this: org.bouncycastle.asn1.pkcs.AuthenticatedSafe, (org.bouncycastle.asn1.ASN1Encodable) $r2, $r5, $r0.<org.bouncycastle.asn1.pkcs.Pfx: org.bouncycastle.asn1.pkcs.ContentInfo contentInfo>, @parameter0: java.lang.Object, $i1, $r3, null, $r0, $r3, $r9, specialinvoke $r9.<org.bouncycastle.asn1.DERExternalParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), null, (org.bouncycastle.asn1.ASN1Primitive) $r15, $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), $r2, new org.bouncycastle.asn1.ASN1InputStream, @parameter0: byte[], new org.bouncycastle.asn1.x509.AlgorithmIdentifier, @this: org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, $r2, $i0, r0.<java.io.DataInputStream: java.io.InputStream in>, $i0, (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1, $r2, new java.io.DataInputStream, $r0.<org.bouncycastle.asn1.pkcs.PBKDF2Params: org.bouncycastle.asn1.ASN1Integer iterationCount>, $i0, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1OctetString: byte[] getOctets()>(), $i0, virtualinvoke $r8.<org.bouncycastle.asn1.BERSequenceParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), r1, (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1, virtualinvoke $r1.<java.io.InputStream: int read()>(), virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $r0.<org.bouncycastle.asn1.pkcs.AuthenticatedSafe: org.bouncycastle.asn1.pkcs.ContentInfo[] info>, null, r1, @parameter1: java.security.Key, @this: org.bouncycastle.asn1.pkcs.PBKDF2Params, new org.bouncycastle.asn1.BEROctetStringParser, r1, (org.bouncycastle.asn1.ASN1OctetString) $r15, $r2, @this: org.bouncycastle.asn1.pkcs.MacData, @this: org.bouncycastle.jce.provider.JDKKeyStore, $i0, $i0, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: int read()>(), new org.bouncycastle.asn1.DERExternalParser, r0.<java.io.DataInputStream: java.io.InputStream in>, @this: org.bouncycastle.asn1.x509.DigestInfo, $i2, $r3, $r4, specialinvoke $r4.<org.bouncycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.bouncycastle.asn1.ASN1StreamParser)>($i2, $r3), $r2, new org.bouncycastle.asn1.BERSetParser, $r0.<org.bouncycastle.asn1.ASN1Set: java.util.Vector set>, null, $r12, new org.bouncycastle.asn1.ASN1StreamParser, new org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, (org.bouncycastle.asn1.pkcs.AuthenticatedSafe) $r1, r1, interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3), $s5, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @parameter0: java.lang.Object, $r3.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random>, $r2, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $i0, $r0, r1, -1, $r0.<org.bouncycastle.asn1.pkcs.SafeBag: org.bouncycastle.asn1.ASN1Encodable bagValue>, @parameter0: java.lang.Object, (org.bouncycastle.asn1.pkcs.PKCS12PBEParams) $r1, virtualinvoke $r6.<org.bouncycastle.asn1.BERTaggedObjectParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), r52, @parameter0: org.bouncycastle.jce.provider.JDKKeyStore, $i12 + $i11, @parameter0: byte[], @this: org.bouncycastle.jce.provider.JDKAlgorithmParameters$PKCS12PBE, $i10 + $i9, @this: org.bouncycastle.asn1.x509.AlgorithmIdentifier, <org.bouncycastle.jce.provider.JDKPKCS12KeyStore: java.security.Provider bcProvider>, $r1, $r0.<org.bouncycastle.asn1.pkcs.MacData: org.bouncycastle.asn1.x509.DigestInfo digInfo>, @parameter0: java.lang.Object, null, $r0.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, @parameter0: org.bouncycastle.asn1.x509.AlgorithmIdentifier, $r18, virtualinvoke $r9.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>(), (org.bouncycastle.asn1.ASN1Set) $r15, $r3, r1, (org.bouncycastle.asn1.ASN1Sequence) $r6, $r3, (org.bouncycastle.asn1.pkcs.EncryptedData) $r1, $r0.<org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec pbeKeySpec>, @parameter1: java.security.Key, virtualinvoke $r7.<org.bouncycastle.asn1.BERSetParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), @parameter1: java.security.Key, $r3, $r8, specialinvoke $r8.<org.bouncycastle.asn1.BERSequenceParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), @parameter2: int, $i0, lengthof $r6, @this: org.bouncycastle.asn1.ASN1OctetString, $i0 & 1023, @this: org.bouncycastle.asn1.pkcs.Pfx, @parameter4: byte[], new org.bouncycastle.asn1.BERSequenceParser, staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r7, $r10), new org.bouncycastle.asn1.pkcs.EncryptedData, $r0.<org.bouncycastle.asn1.pkcs.SafeBag: org.bouncycastle.asn1.ASN1Set bagAttributes>, @this: org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), r1, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i1, $i2, $i0), @this: org.bouncycastle.asn1.pkcs.MacData, @parameter0: int, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: int readLength()>(), r1, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @parameter2: int, virtualinvoke $r9.<org.bouncycastle.asn1.DERExternalParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), $r3, (org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) $r4, $i0, $r0.<org.bouncycastle.asn1.x509.DigestInfo: byte[] digest>, virtualinvoke $r2.<java.io.InputStream: int read()>(), virtualinvoke $r10.<org.bouncycastle.asn1.BEROctetStringParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), r53, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @this: org.bouncycastle.asn1.pkcs.SafeBag, $i0, @this: org.bouncycastle.asn1.pkcs.PKCS12PBEParams, $r0.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int type>, @this: org.bouncycastle.asn1.pkcs.ContentInfo, $b4 & 255, virtualinvoke $r9.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>(), r0.<java.io.DataInputStream: java.io.InputStream in>, $i1, $r29[$i0], @parameter0: byte[], $r12, r1, virtualinvoke r0.<java.util.Random: int next(int)>(32), $r0.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: org.bouncycastle.asn1.ASN1Integer iterations>, new org.bouncycastle.asn1.pkcs.PKCS12PBEParams, r1, $i0, 1, $i2, $r3, $r6, specialinvoke $r6.<org.bouncycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.bouncycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), <org.bouncycastle.jce.provider.BouncyCastleProvider: java.util.Map keyInfoConverters>, new org.bouncycastle.asn1.BERApplicationSpecificParser, specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), new org.bouncycastle.asn1.pkcs.PKCS12PBEParams, $i0, virtualinvoke $r4.<org.bouncycastle.asn1.BERApplicationSpecificParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), null, @parameter1: java.security.Key, $i0, $i0, (org.bouncycastle.asn1.ASN1Encodable) $r2, i0, $r3, $r2, $r3, specialinvoke $r3.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r2), $i0 + 1024, i1 << 16, @this: org.bouncycastle.asn1.ASN1Set, virtualinvoke $r3.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive readObject()>(), i0 << 24, $i1, new org.bouncycastle.asn1.pkcs.SafeBag, $i0, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), null, new org.bouncycastle.asn1.IndefiniteLengthInputStream, $r0.<org.bouncycastle.asn1.pkcs.Pfx: org.bouncycastle.asn1.pkcs.MacData macData>, @this: org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry, $i0, @parameter1: char[], new org.bouncycastle.asn1.BERTaggedObjectParser, $i13, @parameter1: java.security.Key, staticinvoke <org.bouncycastle.asn1.pkcs.PKCS12PBEParams: org.bouncycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r8), $i0, @this: org.bouncycastle.asn1.ASN1Sequence, (org.bouncycastle.asn1.ASN1OctetString) $r6, $r0.<org.bouncycastle.jce.provider.JDKAlgorithmParameters$PKCS12PBE: org.bouncycastle.asn1.pkcs.PKCS12PBEParams params>, (org.bouncycastle.asn1.ASN1Sequence) $r15, new org.bouncycastle.asn1.pkcs.AuthenticatedSafe, $i0, (org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r32, $r0.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.bouncycastle.asn1.ASN1OctetString data>, $r0.<org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameters$PKCS12PBE: org.bouncycastle.asn1.pkcs.PKCS12PBEParams params>, virtualinvoke $r3.<java.io.InputStream: int read()>(), null, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), @parameter1: java.security.Key, (org.bouncycastle.asn1.ASN1Sequence) $r36, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.EncryptedData: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), $r12, @parameter1: java.security.Key, @this: org.bouncycastle.asn1.ASN1InputStream, @parameter0: java.lang.Object, $r2, new org.bouncycastle.asn1.ASN1InputStream, 20000, @this: org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, staticinvoke <org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.bouncycastle.jce.provider.JDKAlgorithmParameters$PBKDF2: org.bouncycastle.asn1.pkcs.PBKDF2Params params>, @this: org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameters$PBKDF2, r1, $r0.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1Encodable parameters>, @parameter1: java.security.Key, $r1, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), $r0.<org.bouncycastle.asn1.x509.DigestInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, $i1, @this: org.bouncycastle.jce.provider.JDKPKCS12KeyStore, $r2, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.bouncycastle.asn1.pkcs.SafeBag) $r1, (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1, $r6, $r1, virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), @this: org.bouncycastle.asn1.pkcs.Pfx, (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1, @parameter2: int, 1024, @parameter1: org.bouncycastle.asn1.x509.AlgorithmIdentifier, @parameter1: java.security.Key, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.bouncycastle.asn1.ASN1Set: java.util.Vector set>, $i0, (org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, @parameter2: org.bouncycastle.asn1.pkcs.PKCS12PBEParams, @parameter0: java.lang.Object, @parameter1: java.security.Key, staticinvoke <org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r2), $r3, $r7, specialinvoke $r7.<org.bouncycastle.asn1.BERSetParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), 20000, $r2, @this: org.bouncycastle.asn1.ASN1Set, @this: org.bouncycastle.asn1.x509.DigestInfo, $i0, virtualinvoke $r11.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r2), $r1[$i2], staticinvoke <org.bouncycastle.asn1.ASN1OctetString: org.bouncycastle.asn1.ASN1OctetString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), @parameter0: char[], @this: org.bouncycastle.asn1.pkcs.SafeBag, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.Pfx: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), (java.security.PrivateKey) $r17, $r0.<org.bouncycastle.asn1.ASN1Sequence: java.util.Vector seq>, $r1, r0.<java.io.DataInputStream: java.io.InputStream in>, $r1, virtualinvoke $r16.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1)]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.spongycastle.org"]
[UnitContainer{unit=$r7 = "www.spongycastle.org", method='<org.bouncycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: [100, 108, 101, 119, 104, 114, 108, 111, 111, 108, 32]
[UnitContainer{unit=$r0[10] = 100, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 108, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 101, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 119, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 104, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 114, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 108, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 111, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 111, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 108, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 32, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}]
=======================================
Analyzing APK: be.tdf_it.cancerrisk.apk
*** Base package: be.tdf_it.cancerrisk
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcn: java.util.Random zzz()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zztj: void onAdClosed()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzjj: void <init>()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzhf: java.security.MessageDigest zzcW()>'}, UnitContainer{unit=$fakeLocal_257[0] = "MD5", method='<name.ratson.cordova.admob.AdMob: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzaiy: java.lang.String zzaR(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzbx: void run()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzagz: java.lang.String zzhP()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["1489418796403"]
[UnitContainer{unit=$fakeLocal_-1[1] = "1489418796403", method='<com.google.android.gms.internal.zzdb: com.google.android.gms.internal.zzdb zza(android.content.Context,java.lang.String,java.lang.String,boolean)>'}]
=======================================
Analyzing APK: be.xelink.comunicare.apk
*** Base package: be.xelink.comunicare
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dsi.ant.plugins.antplus.pcc.AntPlusWeightScalePcc$UserProfile: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <shaded.org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <shaded.org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <de.appplant.cordova.plugin.notification.Builder: void <init>(de.appplant.cordova.plugin.notification.Options)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD2", "MD5", "MD5", "SHA1", "SHA-1", "MD2"]
[UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<shaded.org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}, UnitContainer{unit=$r0[2] = "SHA-1", method='<shaded.org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$r0[0] = "MD2", method='<shaded.org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$r0[1] = "MD5", method='<shaded.org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_189[0] = "MD5", method='<shaded.org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD2", method='<shaded.org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["generateSecureIV", "hY0wTq6xwc6ni01G", "generateSecureKey", "encrypt", "decrypt", "hY0wTq6xwc6ni01G"]
[UnitContainer{unit=$r2 = "generateSecureIV", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "hY0wTq6xwc6ni01G", method='<com.ideas2it.aes256.AES256: java.lang.String encrypt(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r2 = "generateSecureKey", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r2 = "encrypt", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r2 = "decrypt", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "hY0wTq6xwc6ni01G", method='<com.ideas2it.aes256.AES256: java.lang.String decrypt(java.lang.String,java.lang.String,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["hY0wTq6xwc6ni01G", "encrypt", "decrypt", "hY0wTq6xwc6ni01G"]
[UnitContainer{unit=$r1 = "hY0wTq6xwc6ni01G", method='<com.ideas2it.aes256.AES256: java.lang.String encrypt(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r2 = "encrypt", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r2 = "decrypt", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "hY0wTq6xwc6ni01G", method='<com.ideas2it.aes256.AES256: java.lang.String decrypt(java.lang.String,java.lang.String,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [@parameter2: int, 1001, 1001, 1001, $i0, 1001]
=======================================
Analyzing APK: cloud.biobeat.HOME_CARE.apk
*** Base package: cloud.biobeat.HOME_CARE
=======================================
***Violated Rule 5: Used export grade public Key 
***Cause: Used default key size in method: <com.amazonaws.mobileconnectors.iot.AWSIotKeystoreHelper: java.security.KeyPair generatePrivateAndPublicKeys()>[72]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <cloud.biobeat.HOME_CARE.Device_SM_Flow: void generate_temp_spo2()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <cloud.biobeat.HOME_CARE.DeviceCallback: void gnerate_temp_spo2()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketFrame: byte[] generateMaskingKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <cloud.biobeat.HOME_CARE.Device_SM_Flow_old: void generate_temp_spo2()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_196[0] = "SHA1", method='<org.eclipse.paho.client.mqttv3.internal.websocket.WebSocketHandshake: byte[] sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["awsiotkeystorepassword", class "Lcloud/biobeat/HOME_CARE/Cloud_Manager;", "prod", "MrAohTi838c8", "02:00:00:00:00:00"]
[UnitContainer{unit=$r1 = "awsiotkeystorepassword", method='<com.amazonaws.mobileconnectors.iot.AWSIotKeystoreHelper: java.security.KeyStore getTempKeystore(java.security.KeyStore,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = class "Lcloud/biobeat/HOME_CARE/Cloud_Manager;", method='<cloud.biobeat.HOME_CARE.Cloud_Manager: void <clinit>()>'}, UnitContainer{unit=$r0.<cloud.biobeat.HOME_CARE.Cloud_Manager: java.lang.String certificateId> = "prod", method='<cloud.biobeat.HOME_CARE.Cloud_Manager: void <init>(java.io.File,cloud.biobeat.HOME_CARE.BluetoothLeService)>'}, UnitContainer{unit=$r0.<cloud.biobeat.HOME_CARE.Cloud_Manager: java.lang.String keystorePassword> = "MrAohTi838c8", method='<cloud.biobeat.HOME_CARE.Cloud_Manager: void <init>(java.io.File,cloud.biobeat.HOME_CARE.BluetoothLeService)>'}, UnitContainer{unit=return "02:00:00:00:00:00", method='<cloud.biobeat.HOME_CARE.Cloud_Manager: java.lang.String getMacAddr()>'}]
=======================================
Analyzing APK: co.ingaged.androidapp.paramedicsplus.apk
*** Base package: co.ingaged.androidapp.paramedicsplus
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.markdownj.CharacterProtector: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.markdownj.MarkdownProcessor: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfx: long zzmj()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amulyakhare.textdrawable.util.ColorGenerator: void <init>(java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "MD5", "MD2", "SHA1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD2", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$r0[2] = "SHA-1", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD2", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_189[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$r0[1] = "MD5", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfx: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$r0[0] = "MD2", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.Brighter.ActisteR.apk
Couldn't load manifest file.
*** Base package: null
Exception in thread "main" java.io.EOFException: Unexpected end of ZLIB input stream
	at java.util.zip.InflaterInputStream.fill(InflaterInputStream.java:240)
	at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:158)
	at java.util.zip.ZipInputStream.read(ZipInputStream.java:194)
	at java.util.zip.ZipInputStream.closeEntry(ZipInputStream.java:140)
	at java.util.zip.ZipInputStream.getNextEntry(ZipInputStream.java:118)
	at main.util.Utils.getXmlFileNamesFromJarArchive(Utils.java:278)
	at main.util.Utils.getXmlFiles(Utils.java:265)
	at main.rule.base.BaseRuleChecker.checkRule(BaseRuleChecker.java:44)
	at main.rule.InsecureAssymCryptoFinder.checkAssym(InsecureAssymCryptoFinder.java:52)
	at main.rule.InsecureAssymCryptoFinder.checkRule(InsecureAssymCryptoFinder.java:34)
	at main.rule.engine.RuleEngine.main(RuleEngine.java:61)
Analyzing APK: com.activ8rlives.activ8rlives4.apk
*** Base package: com.activ8rlives.activ8rlives4
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: com.activ8rlives.asthma_me.apk
*** Base package: com.activ8rlives.asthma_me
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: com.agamatrix.nimbus.apk
*** Base package: com.agamatrix.nimbus
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.a.a.b.u: void a(android.content.res.Resources,java.lang.String,int,android.util.AttributeSet)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.c.a.b.m$b: void <clinit>()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_238[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: b.f sha1(b.f)>'}, UnitContainer{unit=$fakeLocal_1036[0] = "MD5", method='<b.c: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_227[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_258[0] = "MD5", method='<b.f: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_80[0] = "MD5", method='<com.localytics.android.Utils: java.lang.String getMD5CheckSum(java.io.File)>'}, UnitContainer{unit=$fakeLocal_216[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}]
=======================================
Analyzing APK: com.airstrip.one.apk
*** Base package: com.airstrip.one
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.atomicfu.LockFreedomTestEnvironment$TestThread: void <init>(kotlinx.atomicfu.LockFreedomTestEnvironment,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <lecho.lib.hellocharts.util.ChartUtils: int pickColor()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.airstrip.one.training.TrainingDataService: com.airstrip.one.model.patient.PatientResponse getPatient(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.airstrip.one.training.TrainingDataVentEngine: com.airstrip.one.model.vent.VentilatorDiscreteDataResponse getVentilatorLiveDiscreteData(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.airstrip.one.ui.patient.PatientListFragment: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.airstrip.one.training.TrainingDataService: com.airstrip.one.model.user.DeviceInfoResponse getDeviceInfo(long,java.lang.String)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.airstrip.one.core.TLSSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.airstrip.one.core.TLSSocketFactory$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_258[0] = "MD5", method='<okio.ByteString: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzaf: java.lang.String zza(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_32[0] = "SHA-1", method='<com.airstrip.one.util.HashUtil: java.lang.String toSHA1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_227[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1036[0] = "MD5", method='<okio.Buffer: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_238[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_216[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["Sh4r3d_K3y_F0r_t3st1ing_0nly_32B"]
[UnitContainer{unit=$r3 = "Sh4r3d_K3y_F0r_t3st1ing_0nly_32B", method='<com.airstrip.one.training.TrainingDataC3P0Engine: java.security.Key getSharedKey()>'}]
=======================================
Analyzing APK: com.airstriptech.ob.apk
*** Base package: com.airstriptech.ob
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES"]
[UnitContainer{unit=$fakeLocal_33[0] = "AES", method='<com.airstrip.ob.util.Crypto: byte[] encode(com.airstrip.ob.AirStripOB,java.io.ByteArrayOutputStream)>'}, UnitContainer{unit=$fakeLocal_58[0] = "AES", method='<com.airstrip.ob.util.Crypto: byte[] decode(com.airstrip.ob.AirStripOB,java.io.InputStream)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.airstrip.ob.connect.ASTHttpsURLConnection$LocalSSLTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.airstrip.ob.connect.ASTHttpsURLConnection$LocalSSLTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.airstrip.ob.connect.ASTHttpsURLConnection$1
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
Analyzing APK: com.alivecor.aliveecg.apk
*** Base package: com.alivecor.aliveecg
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["PBEWithMD5AndDES", "PBEWithMD5AndDES"]
[UnitContainer{unit=$fakeLocal_17[0] = "PBEWithMD5AndDES", method='<com.alivecor.sync.K: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_8[0] = "PBEWithMD5AndDES", method='<com.alivecor.sync.K: java.lang.String b(java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.h.a.a.b.e: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.a.a.a.a.b.jb: java.util.Random i()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.measurement.zzaw,java.lang.String,com.google.android.gms.internal.measurement.zzcn)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfk: long zzmc()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.h.a.a.b.b: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.a.a.a.a.a.oa: int get()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzei: com.google.android.gms.internal.measurement.zzp zze(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzfb: void zzf(java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.h.a.a.b.d: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.paypal.android.sdk.onetouch.core.f.b: void a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.a.a.a.a.a.yb: int get()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.h.a.a.b.e: java.lang.String e()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.paypal.android.sdk.onetouch.core.f.c: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.s: void <init>(d.a.a.a.a.c.a.a,double)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of d.a.a.a.a.e.k
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA1", "SHA1", "SHA1", "SHA-1", "SHA1", "SHA1", "SHA-1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_3[0] = "MD5", method='<com.alivecor.data.models.BpDatabaseItem: java.lang.String a(long,float,float)>'}, UnitContainer{unit=$fakeLocal_4[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_30[0] = "MD5", method='<com.alivecor.util.z: java.lang.String c(java.io.File)>'}, UnitContainer{unit=$r7 = "MD5", method='<com.google.android.gms.tagmanager.zzbv: com.google.android.gms.internal.measurement.zzp zze(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<d.a.a.a.a.b.l: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfk: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA1", method='<c.h.a.a.b.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<c.h.a.b.e: void <init>(android.content.Context,java.lang.String,c.h.a.b.g)>'}, UnitContainer{unit=$fakeLocal_18[0] = "SHA-1", method='<d.a.a.a.a.b.l: java.lang.String a(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<d.a.a.a.a.e.k: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.p: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<okio.ByteString: okio.ByteString d()>'}, UnitContainer{unit=$fakeLocal_20[0] = "MD5", method='<c.h.a.a.b.e: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_413[0] = "MD5", method='<c.i.a.b.c.l: byte[] a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzak: java.lang.String zzo(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [36, 0, 20, 73, 0, 213, 20, 23, 99, 21, 21, 212, 64]
[UnitContainer{unit=$r0[6] = 36, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 20, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 73, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 213, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 20, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 23, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 99, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 21, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 21, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 212, method='<com.alivecor.sync.ea: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 64, method='<com.alivecor.sync.ea: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [20, 20]
[UnitContainer{unit=$fakeLocal_19[1] = 20, method='<com.alivecor.sync.K: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_10[1] = 20, method='<com.alivecor.sync.K: java.lang.String b(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.measurement.zzcg: com.google.android.gms.internal.measurement.zzcg zza(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.measurement.zzcf: void <clinit>()>'}]
=======================================
Analyzing APK: com.analyticamedical.pericoach.apk
*** Base package: com.analyticamedical.pericoach
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.analyticamedical.pericoach.Notifications.NotificationHelper: java.lang.String chooseMessage(android.content.Context,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.analyticamedical.pericoach.Notifications.NotificationHelper: android.app.Notification getNotification(android.content.Context,java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.analyticamedical.pericoach.DataAccess.Entities.ExerciseProgramLevel: void <init>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.acra.util.NaiveTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.acra.util.NaiveTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(byte[])>'}, UnitContainer{unit=$fakeLocal_292[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(byte[])>'}, UnitContainer{unit=$fakeLocal_301[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_288[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_280[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(java.lang.String)>'}]
=======================================
Analyzing APK: com.andaman7.android.apk
*** Base package: com.andaman7.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding", "RC4", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "DES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_78[0] = "AES/ECB/NoPadding", method='<com.helger.commons.system.CryptoPolicy: boolean _isUnlimitedStrengthAvailable()>'}, UnitContainer{unit=$fakeLocal_536[0] = "RC4", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_507[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_589[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_510[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_679[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ca.uhn.fhir.util.TestUtil: void randomizeLocale()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(double[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(boolean[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(char[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(java.lang.Object[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: int nextInt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: double nextDouble()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.wafflecopter.multicontactpicker.ColorUtils: int getRandomMaterialColor()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: float nextFloat()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(long[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(short[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(float[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.helger.commons.random.RandomHelper: java.util.Random getRandom()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: boolean nextBoolean()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ca.uhn.fhir.util.PortUtil: int getNextFreePort()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.wootric.androidsdk.utils.SHAUtil: java.lang.String randomString()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkm: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(byte[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: long nextLong(long)>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(org.apache.http.HttpHost)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.helger.commons.ws.TrustManagerTrustAll
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.helger.commons.ws.TrustManagerTrustAll
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.helger.commons.ws.HostnameVerifierVerifyAll
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in org.apache.http.conn.ssl.NoopHostnameVerifier
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD2", "SHA-1", "MD5", "MD2", "SHA1", "MD5", "MD5", "MD5", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_175[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$r10 = "MD5", method='<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_196[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_189[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkm: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$r0[2] = "SHA-1", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$r9 = "MD5", method='<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD2", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$r0[1] = "MD5", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$r0[0] = "MD2", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_1566[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_555[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.zendesk.util.DigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://saxon.sf.net/ns/configuration", "http://localhost/", "http://saxon.sf.net/", "http://localhost/", "http://www.w3.org/1999/XSL/Transform", "http://build.fhir.org/template-comparison-set.html.template", "http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$r4 = "http://saxon.sf.net/ns/configuration", method='<net.sf.saxon.trans.ConfigurationReader: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=specialinvoke $r15.<net.sf.saxon.value.QNameValue: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "http://saxon.sf.net/", "configuration"), method='<net.sf.saxon.functions.TransformFn: net.sf.saxon.om.Sequence call(net.sf.saxon.expr.XPathContext,net.sf.saxon.om.Sequence[])>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=specialinvoke $r15.<net.sf.saxon.value.QNameValue: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "http://www.w3.org/1999/XSL/Transform", "initial-template"), method='<net.sf.saxon.functions.TransformFn: net.sf.saxon.om.Sequence call(net.sf.saxon.expr.XPathContext,net.sf.saxon.om.Sequence[])>'}, UnitContainer{unit=$fakeLocal_1252[1] = "http://build.fhir.org/template-comparison-set.html.template", method='<org.hl7.fhir.r4.conformance.ProfileComparer: java.lang.String summaryTemplate()>'}, UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}]
=======================================
Analyzing APK: com.ascensia.contour.be.apk
*** Base package: com.ascensia.contour.be
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES", method='<com.ascensia.contour.MainActivity: java.lang.String a(int,java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.b.f: void <init>(com.microsoft.appcenter.b.b,android.os.Handler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.e.h: void a(java.lang.SecurityException)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ascensia.contour.e.l
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA", "SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA", method='<com.ascensia.contour.c: int b(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.ascensia.contour.e.l: boolean a(java.security.cert.X509Certificate)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm", "32TTtyhF8gZ2L5xm"]
[UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.c.c: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void f(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.a$b: com.ascensia.contour.e.a$c a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j$15: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j$2: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j$7: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void d(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(java.lang.String,int)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void b(int,java.lang.String,int,int,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void c(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j$3: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void b(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void e(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j$21: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void b(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j$17: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void c(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j$4: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j$22: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "32TTtyhF8gZ2L5xm", method='<com.ascensia.contour.e.j: void a(int,java.lang.String,int,int,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt", "b4iMivyt"]
[UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j$17: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void c(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j$22: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void f(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(java.lang.String,int)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(int,java.lang.String,int,int,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void b(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j$2: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void e(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j$3: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void c(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void b(int,java.lang.String,int,int,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j$15: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j$7: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.a$b: com.ascensia.contour.e.a$c a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j$4: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j$21: void a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.c.c: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void d(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void a(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "b4iMivyt", method='<com.ascensia.contour.e.j: void b(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["123456"]
[UnitContainer{unit=$r6 = "123456", method='<com.ascensia.contour.e.m: java.security.KeyStore b(android.content.Context)>'}]
=======================================
Analyzing APK: com.asthmapolis.mobile.apk
*** Base package: com.asthmapolis.mobile
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.propellerhealth.android.ui.common.MapViewHelper: void <init>(android.app.Application)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkm: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA1", "SHA1", "MD5", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<okio.ByteString: okio.ByteString i()>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkm: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String a(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<okio.ByteString: okio.ByteString h()>'}]
=======================================
Analyzing APK: com.bluesparktechnologies.temptraq.apk
*** Base package: com.bluesparktechnologies.temptraq
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/PKCS7Padding"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/PKCS7Padding", method='<io.fabric.sdk.android.services.common.CommonUtils: javax.crypto.Cipher createCipher(int,java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinvey.java.core.MediaHttpDownloader: int getRandom(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinvey.java.core.MediaHttpUploader: int getRandom(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzf: void zzkp(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.internal.client.zzn: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzc: void zzkp(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzao: java.util.Random zzav()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.api.client.util.ExponentialBackOff: long nextBackOffMillis()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.google.api.client.util.SslUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.google.api.client.util.SslUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.google.api.client.util.SslUtils$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcv: java.security.MessageDigest zzir()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzkr: java.lang.String zzui()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzal: long zzy(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzn: void zzym()>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.kinvey.android.cache.ClassHash: java.lang.String getClassHash(java.lang.Class)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzam$zza: void run()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.ads.internal.util.client.zza: java.lang.String zzdc(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.localytics.android.Utils: java.lang.String getMD5CheckSum(java.io.File)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzt: java.lang.String zzmm(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["1468357373244"]
[UnitContainer{unit=return "1468357373244", method='<com.google.android.gms.internal.zzax: java.lang.String zzax()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://google.com/", "http://static.realm.io/update/java?3.2.1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "http://google.com/", method='<com.google.api.client.testing.http.HttpTesting: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://static.realm.io/update/java?3.2.1", method='<io.realm.processor.RealmVersionChecker: java.lang.String checkLatestVersion()>'}]
=======================================
Analyzing APK: com.butterflynetinc.helios.apk
*** Base package: com.butterflynetinc.helios
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.launchdarkly.android.Throttler: void <init>(java.lang.Runnable,long,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.i.a.b.h.a.m9: long s()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.i.a.a.e1.w.r: void <init>(java.io.File,a.i.a.a.e1.w.e,a.i.a.a.s0.a)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <w.d.b.c: void d()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.e.a.q.n.f.g: void b()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.i.a.b.g.e.sb: long c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a0.c0: a0.n0 a(a0.f0,a0.o0)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(w.a.a.a.q.c.n.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.k.a.g: void <init>(a.k.a.g$b)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int,com.amazonaws.retry.PredefinedRetryPolicies$1)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.i.a.a.e1.w.l$b: void <init>(java.io.File,byte[],boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of w.a.a.a.q.e.d
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_19[0] = "SHA-1", method='<w.a.a.a.q.b.j: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<a.i.a.b.h.a.m9: java.security.MessageDigest x()>'}, UnitContainer{unit=$fakeLocal_207[0] = "MD5", method='<t.u.v: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA-1", method='<a.n.a.c: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_4[0] = "MD5", method='<b0.h: b0.h d()>'}, UnitContainer{unit=$fakeLocal_26[0] = "SHA1", method='<w.a.a.a.q.e.d: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_4[0] = "SHA-1", method='<a.i.a.b.d.b0: java.lang.String a(java.lang.String,a.i.a.b.d.t,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_4[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String l()>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<b0.h: b0.h e()>'}, UnitContainer{unit=$fakeLocal_6[1] = "SHA-1", method='<com.crashlytics.android.core.CLSUUID: void <init>(w.a.a.a.q.b.t)>'}, UnitContainer{unit=$fakeLocal_34[1] = "SHA-1", method='<w.a.a.a.q.b.j: java.lang.String a(java.lang.String[])>'}]
=======================================
Analyzing APK: com.calgaryscientific.resmdmobile.usa.apk
*** Base package: com.calgaryscientific.resmdmobile.usa
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_147[0] = "SHA-1", method='<com.calgaryscientific.resmd.ExamGroupingUtil: java.lang.String calculateIdentifierKey(com.calgaryscientific.resmd.model.NonDicomData)>'}, UnitContainer{unit=$fakeLocal_117[0] = "SHA-1", method='<com.calgaryscientific.resmd.ExamGroupingUtil: java.lang.String calculateIdentifierKey(com.calgaryscientific.resmd.model.Study)>'}]
=======================================
Analyzing APK: com.cankado.apk
*** Base package: com.cankado
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerServiceGcm: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfk: long zzmc()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotification: void <init>(com.facebook.react.bridge.ReactApplicationContext)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.RNFetchBlob.RNFetchBlobUtils$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5", "SHA-1", "MD5", "md5", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "sha1", "SHA-1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_435[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfk: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.RNFetchBlob.RNFetchBlobUtils: java.lang.String getMD5(java.lang.String)>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: com.cardiacdesigns.ecgcheck_gen2.apk
*** Base package: com.cardiacdesigns.ecgcheck_gen2
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.zzamu,java.lang.String,com.google.android.gms.internal.zzaol)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzej: com.google.android.gms.internal.zzbp zzp(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcfw: long zzazx()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzbq: void zza(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzbj)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "SHA1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzami: java.lang.String zzdk(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcfw: long zzah(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcch: java.lang.String zzji(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcay: long zza(com.google.android.gms.internal.zzcgk)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.tagmanager.zzbw: com.google.android.gms.internal.zzbp zzp(java.util.Map)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.zzaoe: com.google.android.gms.internal.zzaoe zzc(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.zzaod: void <clinit>()>'}]
=======================================
Analyzing APK: com.cardiocomm.hcpen.apk
*** Base package: com.cardiocomm.hcpen
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurosky.blecommunication.PelicanDevice: java.lang.String k()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurosky.blecommunication.PelicanDevice: java.lang.String deviceIdentify()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurosky.blecommunication.SeagullDevice: java.lang.String deviceIdentify()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.plugin.datepicker.DatePickerPlugin$1: void run()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurosky.blecommunication.SeagullDevice: java.lang.String J()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <de.greenrobot.dao.test.DbTest: void <init>(java.lang.Class,boolean)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5"]
[UnitContainer{unit=$fakeLocal_321[0] = "MD5", method='<com.contec.healthy50k.DeviceCommand: byte[] GetCode(byte[])>'}]
=======================================
Analyzing APK: com.cardiosyndo.android.apk
*** Base package: com.cardiosyndo.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/PKCS5Padding", "AES", "AES/ECB/PKCS5Padding"]
[UnitContainer{unit=$fakeLocal_99[0] = "AES/ECB/PKCS5Padding", method='<com.batch.android.c.g: byte[] c(byte[])>'}, UnitContainer{unit=$fakeLocal_51[0] = "AES", method='<com.instabug.library.internal.storage.Encryptor: byte[] a(int,java.lang.String,java.io.File,java.io.File)>'}, UnitContainer{unit=$fakeLocal_113[0] = "AES/ECB/PKCS5Padding", method='<com.batch.android.c.g: byte[] d(byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.batch.android.c.aj: java.lang.String a(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.garmin.device.multilink.g: com.google.common.util.concurrent.ListenableFuture a(java.util.UUID[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.cardiosyndo.android.MeasuresNotificationReceiver: void fireNotification(android.content.Context,android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.cardiosyndo.android.TreatmentNotificationReceiver: void onReceive(android.content.Context,android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.garmin.health.bi: void <init>(com.garmin.health.cf)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.batch.android.c.m: int a(android.content.Context,android.app.job.JobScheduler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzaa: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.garmin.health.bd: void <init>(com.garmin.health.cf,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.core.app.a: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzgd: long zzgk()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.betterise.android.basemodule.common.util.Utils: int getRandomNumber(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.batch.android.e: void a(android.content.Context,android.os.Bundle,com.batch.android.BatchPushPayload,com.batch.android.BatchNotificationInterceptor)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "SHA-1", "md5", "SHA1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_64[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_269[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_273[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_33[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_153[0] = "SHA1", method='<com.batch.android.c.b: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_133[0] = "MD5", method='<com.batch.android.c.b: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_64[0] = "md5", method='<com.batch.android.c.j: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_187[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_60[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_25[0] = "MD5", method='<com.instabug.library.util.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzgd: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_748[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_277[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_280[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_41[0] = "MD5", method='<com.batch.android.c.j: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_123[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.zendesk.util.DigestUtils: java.lang.String md5(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["UTF-8"]
[UnitContainer{unit=specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "UTF-8"), method='<com.batch.android.c.b: java.lang.String a(byte[])>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.carrot.pivot.apk
*** Base package: com.carrot.pivot
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES"]
[UnitContainer{unit=$fakeLocal_5[0] = "AES", method='<com.instabug.library.internal.storage.Encryptor: byte[] a(int,java.lang.String,java.io.File,java.io.File)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.managers.PhotoManager: java.lang.String getPresignedUrlFromKey(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.MoodPickerView: void <init>(android.content.Context,android.util.AttributeSet,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.f.e: java.lang.String e()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.b.v: void c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.f.b: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.managers.SecureManager: void a(java.util.List,com.onehilltech.promises.c$o)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.PollingResultView: void <init>(android.content.Context,android.util.AttributeSet,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.badlogic.gdx.math.f: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.activities.fragments.BoostBagFragment: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.PollingResultView: void <init>(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.b.v: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.f.d: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.MoodPickerView: void <init>(android.content.Context,android.util.AttributeSet)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.toxins.StartPlayingScreen: void <init>(com.carrot.toxins.PopTheToxinsGame)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.toxins.GameScreen: void <init>(com.carrot.toxins.PopTheToxinsGame)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.lc: long c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.PollingResultView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.activities.fragments.BaseDoYouSmokeFragment: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.managers.PopupManager: void generateDaysToShowNpsPopups()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.activities.fragments.GoalForTheDayFragment: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.MoodPickerView: void <init>(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.t2.a: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.core.app.p: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.o.g.g: com.bumptech.glide.load.f j()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.toxins.GameScreen: void removeToxin(java.util.Iterator,com.carrot.toxins.models.Toxin)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.d9: long s()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.toxins.managers.ChemicalManager: com.carrot.toxins.models.Oxygen spawnOxygen(java.lang.Float,java.lang.Float,boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.SliderAnimationView: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.n.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.dto.GoalForTheDayContent: void <init>(int[],int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.sendbird.android.a0.a.v: com.sendbird.android.a0.a.e0 a(com.sendbird.android.a0.a.y,com.sendbird.android.a0.a.f0)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.networking.OkHttpAuthenticator: okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.toxins.managers.ChemicalManager: com.carrot.toxins.models.Toxin spawnToxinFrom(java.util.ArrayList,int,java.lang.Float,java.lang.Float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.PollingResultView: void <init>(android.content.Context,android.util.AttributeSet)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.f.e: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.managers.CrushACravingManager: com.carrot.pivot.models.CrushACravingItem pullFromCravingSet()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.github.jinatonic.confetti.a: void <init>(com.github.jinatonic.confetti.d,com.github.jinatonic.confetti.b,android.view.ViewGroup,com.github.jinatonic.confetti.c)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.activities.fragments.JournalEntryFragment: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.utilities.PrepToQuitUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.managers.CrushACravingManager: java.lang.String populateScratchText()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.carrot.pivot.views.MoodPickerView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.g
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA1", "SHA1", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_5[0] = "SHA-1", method='<com.google.android.gms.common.x: java.lang.String a(java.lang.String,com.google.android.gms.common.p,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.sendbird.android.a0.b.f: com.sendbird.android.a0.b.f d()>'}, UnitContainer{unit=$fakeLocal_19[0] = "MD5", method='<com.mixpanel.android.a.f.e: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<io.fabric.sdk.android.m.b.i: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.internal.d9: java.security.MessageDigest w()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<i.f: i.f e()>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA1", method='<org.conscrypt.NativeCrypto: int X509_NAME_hash(javax.security.auth.x500.X500Principal)>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.g: java.lang.String a(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_50[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object a(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest e()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<io.fabric.sdk.android.services.network.g: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_3[0] = "MD5", method='<com.instabug.library.util.d: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<i.f: i.f f()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.fabric.sdk.android.m.b.i: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<org.conscrypt.NativeCrypto: int X509_NAME_hash_old(javax.security.auth.x500.X500Principal)>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA1", method='<com.mixpanel.android.a.f.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.facebook.common.util.b: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] a(java.io.InputStream)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [1, ":", -1]
[UnitContainer{unit=$b7 = 1, method='<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>'}, UnitContainer{unit=$r2 = ":", method='<com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper: byte[] a(java.lang.String,java.lang.String,java.math.BigInteger,java.math.BigInteger)>'}, UnitContainer{unit=$b7 = -1, method='<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[UnitContainer{unit=$r0[2] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.sendbird.android.a: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.sendbird.android.a: void <clinit>()>'}]
=======================================
Analyzing APK: com.clarifymobile.apk
*** Base package: com.clarifymobile
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.socketio.SocketIOConnection: long nextReconnectDelay(long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotification: void <init>(com.facebook.react.bridge.ReactApplicationContext)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.RNFetchBlob.RNFetchBlobUtils$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_110[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$r1 = "MD5", method='<com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()>'}, UnitContainer{unit=$fakeLocal_50[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_216[0] = "SHA-1", method='<okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_1525[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_48[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_45[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.RNFetchBlob.RNFetchBlobUtils: java.lang.String getMD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_65[0] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_194[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1530[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_43[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_205[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_260[0] = "MD5", method='<com.koushikdutta.async.http.spdy.ByteString: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/%s", "http://%s/onchange", "http://%s/status", "http://%s/launch-js-devtools"]
[UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r3 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}]
=======================================
Analyzing APK: com.clinicloud.app.apk
*** Base package: com.clinicloud.app
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.c.a.a: void a(c.c.a.a.c.a.a$a,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.nexus.NexusSocket: long calculateReconnectTimerInMS(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.w: java.lang.String a(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.h.p2: java.lang.String b()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.h.s2: void <init>(c.c.a.a.h.i2,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.h.cf: long B()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.k: void a(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.h.s1: void <init>(java.util.concurrent.ScheduledExecutorService,c.c.a.a.h.z1,long,long,double,double)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<io.intercom.com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.internal.w: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.facebook.internal.w: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<d.a.b.f: d.a.b.f c()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<io.intercom.com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.h0.c: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<io.intercom.com.squareup.okhttp.internal.Util: d.a.b.f sha1(d.a.b.f)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<c.c.a.a.h.ob: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<c.c.a.a.h.fa: long a(c.c.a.a.h.qf)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<c.c.a.a.h.cf: long a(android.content.Context,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<c.d.a.a.a.e: boolean e()>'}]
=======================================
Analyzing APK: com.cochlear.clientremote.apk
*** Base package: com.cochlear.clientremote
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.hockeyapp.android.s.l: void <init>(java.io.File)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <j.z: j.i0 a(j.c0,j.j0)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.cochlear.clientremote.e.g2: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.b.g.a1.c.g: void <init>(long,java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.g.a.e.f.e: java.lang.String e()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.b.g.a1.c.k: void <init>(int,java.lang.String,e.b.g.c1.w2,i.k0.c.c,e.b.g.a1.c.q$a)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.g.a.e.f.e: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.g.a.f.y: void c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.z2.a: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.g.a.f.y: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.a.b.c.a.l.a$b: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.g.a.e.f.d: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.g.a.e.f.b: void <init>()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "MD5", "SHA1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<e.g.a.e.f.e: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<net.hockeyapp.android.LoginActivity: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest o()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<e.b.g.a0: java.lang.String h()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<e.g.a.e.f.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<e.a.b.c.a.d.f: java.util.UUID a(java.util.UUID,byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<e.g.a.g.d: void <init>(android.content.Context,java.lang.String,e.g.a.g.i)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object a(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<e.c.a.a: e.c.a.f.a a(java.util.UUID,java.security.MessageDigest)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<k.f: k.f e()>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["umwxnikwxx"]
[UnitContainer{unit=$r4 = "umwxnikwxx", method='<com.couchbase.lite.internal.replicator.AbstractCBLWebSocket: javax.net.ssl.X509TrustManager trustManagerForCertificates(java.io.InputStream)>'}]
=======================================
Analyzing APK: com.coherohealth.breathesmart.apk
*** Base package: com.coherohealth.breathesmart
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzbq: void zza(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzbm)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.d.e.g: com.bumptech.glide.load.g o()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.zzaqc,java.lang.String,com.google.android.gms.internal.zzart)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzej: com.google.android.gms.internal.zzbs zzv(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.b$a: java.util.Random a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$r7 = "MD5", method='<com.google.android.gms.tagmanager.zzbw: com.google.android.gms.internal.zzbs zzv(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_45[0] = "MD5", method='<com.coherohealth.breathesmart.utils.UUIDUtils: java.lang.String generateUniqueID(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest e()>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzu: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_1434[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object a(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString d()>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzapq: java.lang.String zzds(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_82[0] = "MD5", method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.zendesk.util.DigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString c()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["0123456789"]
[UnitContainer{unit=return "0123456789", method='<com.coherohealth.breathesmart.utils.UUIDUtils: java.lang.String generateUniqueID(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[UnitContainer{unit=$r1[5] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[14] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[12] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[15] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[13] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.zzarm: com.google.android.gms.internal.zzarm zzc(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.zzarl: void <clinit>()>'}]
=======================================
Analyzing APK: com.colorimetrix.pearl.apk
*** Base package: com.colorimetrix.pearl
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkm: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.perf.internal.zzt: com.google.firebase.perf.internal.zzt zzau()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.remoteconfig.RemoteConfigComponent: void <clinit>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_65[0] = "SHA-1", method='<com.google.firebase.perf.internal.zzv: long zzh(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkm: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["AES/$Mode/$PearlPadding", "AES21/$Mode/$PearlPadding"]
[UnitContainer{unit=$r2 = "AES/$Mode/$PearlPadding", method='<com.colorimetrix.security.SecureKeyStorage23: void <clinit>()>'}, UnitContainer{unit=$r2 = "AES21/$Mode/$PearlPadding", method='<com.colorimetrix.security.SecureKeyStorage18: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_91[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.companionmedical.inpen.apk
*** Base package: com.companionmedical.inpen
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES"]
[UnitContainer{unit=$fakeLocal_252[0] = "AES", method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.v: java.lang.String a(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.tubesock.h: void <init>(com.google.firebase.database.tubesock.c,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.c.a.a: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.firebase.database.e.c,long,long,double,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.internal.ExponentialBackoffPolicy: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.storage.a.c: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.okhttp.OkHttpClientTransport: void <init>(java.lang.String,java.util.concurrent.Executor,io.grpc.okhttp.internal.framed.FrameReader,io.grpc.okhttp.internal.framed.FrameWriter,int,java.net.Socket,com.google.common.base.q,java.lang.Runnable,com.google.common.util.concurrent.n,int,java.lang.Runnable,io.grpc.internal.TransportTracer)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.jb: long g()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.firestore.g.m: long d()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.ly: long c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.a.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.perf.internal.s: boolean a(boolean,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.util.RoundRobinLoadBalancerFactory$RoundRobinLoadBalancer: void <init>(io.grpc.LoadBalancer$Helper)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.companionmedical.d: float d()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.internal.DnsNameResolver: void <init>(java.lang.String,java.lang.String,io.grpc.Attributes,io.grpc.internal.SharedResourceHolder$Resource,io.grpc.internal.ProxyDetector)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.FacebookException: void <init>(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.firestore.g.t: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.remoteconfig.d: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.tubesock.e: int a(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.internal.RetriableStream: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.okhttp.OkHttpClientTransport: void <init>(java.net.InetSocketAddress,java.lang.String,java.lang.String,java.util.concurrent.Executor,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,io.grpc.okhttp.internal.ConnectionSpec,int,io.grpc.internal.ProxyParameters,java.lang.Runnable,io.grpc.internal.TransportTracer)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.g
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_282[0] = "SHA-1", method='<com.facebook.internal.v: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.b.i: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1555[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_59[0] = "SHA-1", method='<com.google.firebase.perf.internal.u: long a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.j: okio.ByteString a(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.b.i: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.p: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.a: byte[] a(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.jb: java.security.MessageDigest i()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.w: java.lang.String a(java.lang.String,com.google.android.gms.common.o,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1550[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_117[0] = "SHA-1", method='<com.google.firebase.perf.internal.RemoteConfigManager: java.lang.String zzi(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.g: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_89[0] = "SHA1", method='<com.google.firebase.inappmessaging.a.a.b.ad: java.lang.String a(android.content.pm.Signature)>'}, UnitContainer{unit=$fakeLocal_205[0] = "SHA-1", method='<io.grpc.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_815[0] = "SHA-1", method='<com.facebook.h: java.lang.String d(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_179[0] = "MD5", method='<io.grpc.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.j: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_108[0] = "SHA-1", method='<com.google.firebase.database.d.c.l: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_192[0] = "SHA-1", method='<io.grpc.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_316[0] = "MD5", method='<com.facebook.a.c: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_274[0] = "MD5", method='<com.facebook.internal.v: java.lang.String b(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [-27, -18, 0, 108, 106, 0, -124, 34, -112, 0, 123, 17, 47, 0, -25, -90]
[UnitContainer{unit=$r1[5] = -27, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[1] = -18, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[11] = 0, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[4] = 108, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[12] = 106, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[13] = 0, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[2] = -124, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[3] = 34, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[8] = -112, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[15] = 0, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[9] = 123, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[6] = 17, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[0] = 47, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[14] = 0, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[7] = -25, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}, UnitContainer{unit=$r1[10] = -90, method='<com.companionmedical.penble_mediator_service.a.f: byte[] a(float)>'}]
=======================================
Analyzing APK: com.crfhealth.trialmaxapp.apk
*** Base package: com.crfhealth.trialmaxapp
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_140[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1528[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_49[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_194[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1533[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_135[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_216[0] = "SHA-1", method='<okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_205[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_54[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}]
=======================================
Analyzing APK: com.current.app.apk
*** Base package: com.current.app
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.util.HashMap.newNode(HashMap.java:1750)
	at java.util.HashMap.putVal(HashMap.java:631)
	at java.util.HashMap.putMapEntries(HashMap.java:515)
	at java.util.HashMap.<init>(HashMap.java:490)
	at soot.jimple.toolkits.typing.fast.Typing.<init>(Typing.java:50)
	at soot.jimple.toolkits.typing.fast.TypeResolver.applyAssignmentConstraints(TypeResolver.java:524)
	at soot.jimple.toolkits.typing.fast.TypeResolver.inferTypes(TypeResolver.java:144)
	at soot.jimple.toolkits.typing.TypeAssigner.internalTransform(TypeAssigner.java:121)
	at soot.BodyTransformer.transform(BodyTransformer.java:55)
	at soot.BodyTransformer.transform(BodyTransformer.java:59)
	at soot.dexpler.DexBody.jimplify(DexBody.java:660)
	at soot.dexpler.DexMethod$1.getBody(DexMethod.java:119)
	at soot.SootMethod.retrieveActiveBody(SootMethod.java:402)
	at main.util.NamedMethodMap.buildCallerCalleeRelation(NamedMethodMap.java:93)
	at main.analyzer.BaseAnalyzer.analyzeSliceInternal(BaseAnalyzer.java:60)
	at main.analyzer.ApkAnalyzer.analyzeSlices(ApkAnalyzer.java:64)
	at main.rule.base.BaseRuleChecker.checkRule(BaseRuleChecker.java:55)
	at main.rule.InsecureAssymCryptoFinder.checkAssym(InsecureAssymCryptoFinder.java:52)
	at main.rule.InsecureAssymCryptoFinder.checkRule(InsecureAssymCryptoFinder.java:34)
	at main.rule.engine.RuleEngine.main(RuleEngine.java:61)
Analyzing APK: com.dexcom.cgm.apk
*** Base package: com.dexcom.cgm
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_2024[0] = "AES/ECB/NoPadding", method='<com.dexcom.cgm.tx.mediator.e: byte[] a(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.sqlcipher.database.SQLiteDatabase: void <init>(java.lang.String,net.sqlcipher.database.SQLiteDatabase$CursorFactory,int,net.sqlcipher.DatabaseErrorHandler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.c.n: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dexcom.cgm.activities.alertdialogs.DialogDemoActivity: float randomFloat(float,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.dh: java.lang.String r()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.ak: void <init>(a.a.a.a.a.c.a.c,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dexcom.cgm.activities.alertdialogs.DialogDemoActivity: int randomInt(int,int)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of a.a.a.a.a.e.x
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<a.a.a.a.a.b.l: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_143[0] = "SHA-1", method='<com.flurry.sdk.ik: byte[] f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<a.a.a.a.a.b.l: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<a.a.a.a.a.e.x: boolean a(java.security.cert.X509Certificate)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [18, -43, 54, 26, 33, 77, 53, 42, "b6d39eb41f824d229d9f5cbf55b36891"]
[UnitContainer{unit=$r0[5] = 18, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[7] = -43, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 54, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 26, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 33, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 77, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 53, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 42, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r2 = "b6d39eb41f824d229d9f5cbf55b36891", method='<com.dexcom.b.c: void <init>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [18, -43, 54, 26, 33, 77, 53, 42]
[UnitContainer{unit=$r0[5] = 18, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[7] = -43, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 54, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 26, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 33, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 77, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 53, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 42, method='<com.dexcom.b.c: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: [18, -43, 54, 26, 33, 77, 53, 42]
[UnitContainer{unit=$r0[5] = 18, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[7] = -43, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 54, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 26, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 33, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 77, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 53, method='<com.dexcom.b.c: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 42, method='<com.dexcom.b.c: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [6338]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://", "http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://"), method='<com.flurry.sdk.ik: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.w: boolean c()>'}]
=======================================
Analyzing APK: com.dexcom.g6.apk
*** Base package: com.dexcom.g6
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_1025[0] = "AES/ECB/NoPadding", method='<com.dexcom.cgm.tx.mediator.b: byte[] encrypt(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dexcom.cgm.share.webservice.ShareWebserviceComponent$2: java.lang.Void call()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.sqlcipher.database.SQLiteDatabase: void <init>(java.lang.String,net.sqlcipher.database.SQLiteDatabase$CursorFactory,int,net.sqlcipher.DatabaseErrorHandler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.c.n: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dexcom.cgm.activities.alertdialogs.DialogDemoActivity: float randomFloat(float,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.aj: void <init>(io.a.a.a.a.c.a.c,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.d: java.lang.String r()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.av: b.bo newWebSocket$68c30bed(b.bb,com.hookedonplay.decoviewlib.a.b)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dexcom.cgm.activities.alertdialogs.DialogDemoActivity: int randomInt(int,int)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.a.a.a.a.e.x
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.a.a.a.a.b.j: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1550[0] = "MD5", method='<c.f: c.k md5()>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.b.a.a.t: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.a.a.a.a.b.j: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_187[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.b.a.a.t: c.k sha1(c.k)>'}, UnitContainer{unit=$fakeLocal_143[0] = "SHA-1", method='<com.flurry.sdk.bv: byte[] f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1555[0] = "SHA-1", method='<c.f: c.k sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.a.a.a.a.e.x: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<c.k: c.k md5()>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.b.a.a.t: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_629[0] = "SHA-1", method='<com.google.dexmaker.dx.dex.file.DexFile: void calcSignature(byte[])>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<c.k: c.k sha1()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.ae: boolean c()>'}]
=======================================
Analyzing APK: com.dobcomed.AndroidAuthenticator.apk
*** Base package: com.dobcomed.AndroidAuthenticator
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.socketio.SocketIOConnection: long nextReconnectDelay(long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of websockets.DroidBridge.BridgeController$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of websockets.DroidBridge.BridgeController$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in websockets.DroidBridge.BridgeController$3
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=<com.koushikdutta.async.util.FileCache: java.lang.String hashAlgorithm> = "MD5", method='<com.koushikdutta.async.util.FileCache: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_<com.koushikdutta.async.util.FileCache: java.lang.String hashAlgorithm> = "MD5", method='<com.koushikdutta.async.util.FileCache: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_260[0] = "MD5", method='<com.koushikdutta.async.http.spdy.ByteString: java.lang.String toString()>'}]
=======================================
Analyzing APK: com.dynosense.dynolife.apk
*** Base package: com.dynosense.dynolife
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES/ECB/NoPadding", "x-amz-matdesc", "x-amz-matdesc"]
[UnitContainer{unit=$fakeLocal_106[0] = "DES/ECB/NoPadding", method='<com.sun.mail.auth.Ntlm: void init0()>'}, UnitContainer{unit=$r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[])>'}, UnitContainer{unit=$r4 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromInstructionFile0(java.util.Map,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.a.e: boolean j()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.greenrobot.greendao.test.DbTest: void <init>(boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.lsjwzh.widget.recyclerviewpager.FragmentStatePagerAdapter$1: void <init>(com.lsjwzh.widget.recyclerviewpager.FragmentStatePagerAdapter)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: boolean nextBoolean()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.docx4j.openpackaging.parts.PresentationML.JaxbPmlPart: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.docx4j.wml.SdtPr: java.math.BigInteger setId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <u.aly.bj: int a(int,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.c.e: byte[] a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: int nextInt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: double nextDouble()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.analytics.social.c: java.lang.String a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.analytics.social.c: java.lang.String a(java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.b.b.c: void g(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.f.i: java.lang.String a(int,boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: float nextFloat()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dynosense.android.dynohome.dyno.statistics.HealthStatisticsDetailFragment: com.github.mikephil.charting.data.LineData getData(int,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.b.b.c: void b(java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: long nextLong(long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.RandomStringUtils: void <clinit>()>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.sun.mail.util.SocketFetcher: java.net.Socket startTLS(java.net.Socket,java.lang.String,java.util.Properties,java.lang.String)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_202[0] = "SHA1", method='<u.aly.bj: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1555[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_812[0] = "MD5", method='<u.aly.bl: java.lang.String u(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_80[0] = "MD5", method='<com.danikula.videocache.ProxyCacheUtils: java.lang.String computeMD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_105[0] = "MD5", method='<u.aly.bm: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1550[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.baidu.location.b.a.d: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.baidu.location.h.a: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_168[0] = "MD5", method='<com.dynosense.android.dynohome.model.network.amazons3.AppUpgradeService$1: void handleMessage(android.os.Message)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1401[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_41[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: void <init>(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_45[0] = "MD5", method='<com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: byte[] getMD5(byte[])>'}, UnitContainer{unit=$fakeLocal_75[0] = "MD5", method='<u.aly.bj: byte[] b(byte[])>'}, UnitContainer{unit=$fakeLocal_89[0] = "MD5", method='<com.sun.mail.smtp.DigestMD5: byte[] authClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.baidu.location.h.i: java.lang.String a(java.io.File)>'}, UnitContainer{unit=$fakeLocal_138[0] = "MD5", method='<u.aly.bm: java.lang.String a(java.io.File)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_46[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.baidu.location.b.a.c: java.lang.String a(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_311[0] = "MD5", method='<com.sun.mail.pop3.Protocol: java.lang.String getDigest(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_80[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_168[0] = "MD5", method='<com.dynosense.android.dynohome.model.network.amazons3.XuanwuAppUpgradeService$1: void handleMessage(android.os.Message)>'}, UnitContainer{unit=$fakeLocal_79[0] = "MD5", method='<u.aly.bm: java.lang.String a(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["30212102dicudiab", "30212102dicudiab", "30212102dicudiab", "30212102dicudiab", "30212102dicudiab"]
[UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: com.baidu.location.b.b.c$b e()>'}, UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: java.lang.String f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: com.baidu.location.b.b.c$b d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: void b(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: java.lang.String e(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [9, 13, 5, 7, 15, 10, 12, 8, 6, 1, 23, "30212102dicudiab", 11, "30212102dicudiab", 4, 91, 1, "30212102dicudiab", "30212102dicudiab", "30212102dicudiab", 3]
[UnitContainer{unit=$r0[7] = 9, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 13, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 5, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 7, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 15, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 10, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 12, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 8, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 6, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 1, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 23, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$r0[2] = 11, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: void b(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r0[4] = 4, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 91, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 1, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: com.baidu.location.b.b.c$b d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: com.baidu.location.b.b.c$b e()>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: java.lang.String f(java.lang.String)>'}, UnitContainer{unit=$r0[9] = 3, method='<u.aly.bj: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.andykhan.com/jexcelapi/index.html", "http://alog.umengcloud.com/app_logs", "http://localhost/", "http://alog.umeng.com/app_logs", "http://", "http://itsdata.map.baidu.com/long-conn-gps/sdk.php", "http://localhost/", "http://www.andykhan.com/jexcelapi/index.html", "http://", "http://localhost/", "http://www.amazon.co.uk/exec/obidos/ASIN/0571058086/qid=1099836249/sr=1-3/ref=sr_1_11_3/202-6017285-1620664", "http://", "http://www.amazon.com/gp/mas/dl/android?p=", "http://www.andykhan.com/jexcelapi/index.html", "http://alog.umeng.com/app_logs", "http://www.andykhan.com/jexcelapi", "http://"]
[UnitContainer{unit=$fakeLocal_232[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<jxl.read.biff.HyperlinkRecord: void <init>(jxl.read.biff.Record,jxl.Sheet,jxl.WorkbookSettings)>'}, UnitContainer{unit=$r1[1] = "http://alog.umengcloud.com/app_logs", method='<com.umeng.analytics.a: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_31[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_<com.umeng.analytics.a: java.lang.String g> = "http://alog.umeng.com/app_logs", method='<com.umeng.analytics.a: void <clinit>()>'}, UnitContainer{unit=$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://"), method='<com.baidu.location.a.g: void j()>'}, UnitContainer{unit=$fakeLocal_-1[2] = "http://itsdata.map.baidu.com/long-conn-gps/sdk.php", method='<com.baidu.location.c.e$2: void run()>'}, UnitContainer{unit=$fakeLocal_71[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_211[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<jxl.read.biff.HyperlinkRecord: void <init>(jxl.read.biff.Record,jxl.Sheet,jxl.WorkbookSettings)>'}, UnitContainer{unit=$r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://"), method='<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()>'}, UnitContainer{unit=$fakeLocal_46[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_1083[0] = "http://www.amazon.co.uk/exec/obidos/ASIN/0571058086/qid=1099836249/sr=1-3/ref=sr_1_11_3/202-6017285-1620664", method='<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>'}, UnitContainer{unit=$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://"), method='<com.baidu.location.a.g: boolean i()>'}, UnitContainer{unit=$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://www.amazon.com/gp/mas/dl/android?p="), method='<com.github.javiersantos.appupdater.UtilsLibrary: java.net.URL getUpdateURL(android.content.Context,com.github.javiersantos.appupdater.enums.UpdateFrom,com.github.javiersantos.appupdater.objects.GitHub)>'}, UnitContainer{unit=$fakeLocal_272[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>'}, UnitContainer{unit=<com.umeng.analytics.a: java.lang.String g> = "http://alog.umeng.com/app_logs", method='<com.umeng.analytics.a: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1055[0] = "http://www.andykhan.com/jexcelapi", method='<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>'}, UnitContainer{unit=$r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://"), method='<org.apache.log4j.helpers.SyslogWriter: void <init>(java.lang.String)>'}]
=======================================
Analyzing APK: com.ectosense.nightowl.apk
*** Base package: com.ectosense.nightowl
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.sentry.connection.RandomEventSampler: void <init>(double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkm: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.remoteconfig.RemoteConfigComponent: void <clinit>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.RNFetchBlob.RNFetchBlobUtils$2
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in io.sentry.connection.HttpConnection$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "md5", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "sha1", "SHA-1", "md5", "MD5", "SHA-1", "SHA-1", "MD5", "sha1", "SHA-1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.RNFetchBlob.RNFetchBlobUtils: java.lang.String getMD5(java.lang.String)>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkm: java.security.MessageDigest zzi()>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["ISO-8859-1", "ISO-8859-1"]
[UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESDecrypter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: com.ekodevices.android.apk
*** Base package: com.ekodevices.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "x-amz-matdesc", "AES"]
[UnitContainer{unit=$fakeLocal_86[0] = "AES", method='<com.ekodevices.android.data.crypt.legacy.LegacyCrypto: byte[] encrypt(byte[],byte[])>'}, UnitContainer{unit=$r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromObjectMetadata0(com.amazonaws.services.s3.model.ObjectMetadata,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[],com.amazonaws.services.s3.model.ExtraMaterialsDescription,boolean,com.amazonaws.services.kms.AWSKMSClient)>'}, UnitContainer{unit=$fakeLocal_94[0] = "AES", method='<com.ekodevices.android.data.crypt.legacy.LegacyCrypto: byte[] decrypt(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ekodevices.android.utils.Utils: java.lang.String generateRecordingFileName(com.ekodevices.android.application.EkoAndroid,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void initSession()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.ekodevices.android.utils.LivestreamControl: void initialize()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA1", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_57[0] = "MD5", method='<org.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest newMD5()>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_180[0] = "SHA1", method='<org.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_1641[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["5Q4GHR58pNpxS1R6zhh2FVXLmRWKe5zBDTT4Wmz2sNzhxwdQ9LvcPHFgcl5T7efR6xNro68ZXoIbI34ztFSISlnE8xRbK5DxL8QwXtgw1COTmm405tSmG68hWH3VBOJUoeFylZQgSli6dF91MAvFEPg4M03yPusl6bsAjvZRdI9gt8pcZD6gQvhm1t8faAvy5HkE9qmZ", "5Q4GHR58pNpxS1R6zhh2FVXLmRWKe5zBDTT4Wmz2sNzhxwdQ9LvcPHFgcl5T7efR6xNro68ZXoIbI34ztFSISlnE8xRbK5DxL8QwXtgw1COTmm405tSmG68hWH3VBOJUoeFylZQgSli6dF91MAvFEPg4M03yPusl6bsAjvZRdI9gt8pcZD6gQvhm1t8faAvy5HkE9qmZ", "0123456789ABCDEF"]
[UnitContainer{unit=$fakeLocal_63[1] = "5Q4GHR58pNpxS1R6zhh2FVXLmRWKe5zBDTT4Wmz2sNzhxwdQ9LvcPHFgcl5T7efR6xNro68ZXoIbI34ztFSISlnE8xRbK5DxL8QwXtgw1COTmm405tSmG68hWH3VBOJUoeFylZQgSli6dF91MAvFEPg4M03yPusl6bsAjvZRdI9gt8pcZD6gQvhm1t8faAvy5HkE9qmZ", method='<com.ekodevices.android.data.crypt.Crypto: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "5Q4GHR58pNpxS1R6zhh2FVXLmRWKe5zBDTT4Wmz2sNzhxwdQ9LvcPHFgcl5T7efR6xNro68ZXoIbI34ztFSISlnE8xRbK5DxL8QwXtgw1COTmm405tSmG68hWH3VBOJUoeFylZQgSli6dF91MAvFEPg4M03yPusl6bsAjvZRdI9gt8pcZD6gQvhm1t8faAvy5HkE9qmZ", method='<com.ekodevices.android.data.crypt.Crypto: java.lang.String encrypt(java.lang.String)>'}, UnitContainer{unit=return "0123456789ABCDEF", method='<com.ekodevices.android.data.crypt.legacy.LegacyCrypto: java.lang.String getKey()>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [<com.ekodevices.android.data.crypt.Crypto: int ITERATION_COUNT>, $i1, 1000]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["0123456789ABCDEF"]
[UnitContainer{unit=return "0123456789ABCDEF", method='<com.ekodevices.android.data.crypt.legacy.LegacyCrypto: java.lang.String getKey()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_91[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.empatica.embrace.mate.apk
*** Base package: com.empatica.embrace.mate
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <u7: void a(byte[],int,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fd1: fd1 f()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <rm1: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <go1: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <gc2: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <or0: long c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pm1: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(rv1,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <sm1: java.lang.String e()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <mk: void <init>(long,android.view.animation.Interpolator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <q21: long s()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <sm1: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ve1: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <go1: void c()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of lw1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "SHA1", "md5", "SHA1", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<q21: java.security.MessageDigest x()>'}, UnitContainer{unit=$fakeLocal_5[0] = "SHA-1", method='<uv: java.lang.String a(java.lang.String,mv,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<ou1: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_19[0] = "MD5", method='<sm1: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.google.firebase.perf.internal.RemoteConfigManager: java.lang.String zzh(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA1", method='<ku: byte[] a(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<com.zendesk.util.DigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA1", method='<pm1: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_16[0] = "md5", method='<ik: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<lw1: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<pl2: pl2 s()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<ou1: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_26[0] = "SHA-1", method='<hd1: long a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_5[0] = "MD5", method='<com.amazonaws.services.sqs.MessageMD5ChecksumHandler: java.lang.String calculateMessageAttributesMd5(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_12[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_31[0] = "SHA1", method='<da1: java.lang.String a(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<pl2: pl2 t()>'}]
=======================================
Analyzing APK: com.epihunter.companion.apk
*** Base package: com.epihunter.companion
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["x-amz-matdesc"]
[UnitContainer{unit=$r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromObjectMetadata0(com.amazonaws.services.s3.model.ObjectMetadata,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[],com.amazonaws.services.s3.model.ExtraMaterialsDescription,boolean,com.amazonaws.services.kms.AWSKMSClient)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzaa: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.upstream.cache.CachedContentIndex: void writeFile()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[],long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzgd: long zzgk()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int,long)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1434[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest newMD5()>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzgd: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_91[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.eyeque.eyeque.apk
*** Base package: com.eyeque.eyeque
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzkd: long zzln()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.google.android.gms.common.net.zza
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.google.android.gms.common.net.zza
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "SHA1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzkd: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_276[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_272[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzal: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.zzi: java.lang.String getErrorMessage()>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_280[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_767[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_280[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_244[0] = "MD5", method='<com.amazonaws.services.sqs.MessageMD5ChecksumHandler: java.lang.String calculateMessageAttributesMd5(java.util.Map)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://54.191.245.62:8080/eyecloud/api/subjects?access_token=e46cghc52pqd8kvgqmv8ovsi1ufcfetg"]
[UnitContainer{unit=$fakeLocal_77[0] = "http://54.191.245.62:8080/eyecloud/api/subjects?access_token=e46cghc52pqd8kvgqmv8ovsi1ufcfetg", method='<com.eyeque.eyeque.StartActivity$RetrieveSubjectTask: java.lang.String doInBackground(java.lang.Void[])>'}]
=======================================
Analyzing APK: com.freestylelibre.app.nl.apk
*** Base package: com.freestylelibre.app.nl
=======================================
***Violated Rule 5: Used export grade public Key 
***Cause: Used default key size in method: <io.jsonwebtoken.impl.crypto.RsaProvider: java.security.KeyPair generateKeyPair(java.lang.String,int,java.security.SecureRandom)>[151]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzka: long zzlb()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzfr: java.lang.String zzbp(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzae: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzei: long zza(com.google.android.gms.internal.measurement.zzkq)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzka: long zzd(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_287[0] = "SHA-1", method='<org.jf.dexlib2.writer.DexWriter: void updateSignature(org.jf.dexlib2.writer.io.DexDataStore)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [-29, 117, -47, 101, -12, 72, 0, 32, 16, -14, 74, 65, 70, 74, -80, 71]
[UnitContainer{unit=$r0[11] = -29, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 117, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[6] = -47, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 101, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -12, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 72, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 32, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 16, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[9] = -14, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 74, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 65, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 70, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 74, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -80, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 71, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1024]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.getqardio.android.apk
*** Base package: com.getqardio.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/PKCS5PADDING", "AES/ECB/PKCS5Padding"]
[UnitContainer{unit=$fakeLocal_104[0] = "AES/ECB/PKCS5PADDING", method='<com.getqardio.android.utils.CipherManager: java.lang.String decrypt(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_81[0] = "AES/ECB/PKCS5Padding", method='<com.getqardio.android.utils.CipherManager: java.lang.String encrypt(android.content.Context,java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.io.network.request.FlickrRequestHandler: java.util.List generateRandomIndexes(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.utils.RandomImageGenerator: void <init>(android.app.Activity,boolean,boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.googlefit.ActivityGoalsJobService: java.lang.Boolean lambda$onConnected$0(java.lang.Integer,java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzl: void zzk(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.baseble.commands.UniqueIdCommand: java.lang.String csRandomAlphaNumericString(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.googlefit.ActivityGoalsJobServiceCompat: java.lang.Boolean lambda$onConnected$0(java.lang.Integer,java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.utils.engagement.EngagementScreenItemsHelper: com.getqardio.android.utils.engagement.EngagementScreenItem getRandomItem()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amulyakhare.textdrawable.util.ColorGenerator: void <init>(java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzclq: long zzbay()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "SHA1", "SHA1", "MD5", "SHA-1", "MD5", "SHA1", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_41[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzchx: java.lang.String zzjn(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzu: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_135[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_288[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.getqardio.android.utils.CipherManager: byte[] md5(byte[])>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_140[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzclq: long zzaf(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_301[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcgo: long zza(com.google.android.gms.internal.zzcme)>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=$r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}]
=======================================
Analyzing APK: com.glooko.logbook.apk
*** Base package: com.glooko.logbook
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES/ECB/NoPadding", "AES", "DES", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "AES", "DES/ECB/NoPadding", "RC4"]
[UnitContainer{unit=$fakeLocal_518[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_85[0] = "AES", method='<com.glooko.library.gkmodels.GKProvider: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_524[0] = "DES", method='<com.glooko.library.metersync.medtronic.MedtronicDeviceCommunication: void decryptFile(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_521[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_706[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_64[0] = "AES", method='<com.glooko.library.gkmodels.GKProvider: java.lang.String encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_613[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_547[0] = "RC4", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzfb: void zzg(java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.logbook.datasource.C4cArticleDataSource: com.glooko.library.models.learn.C4cArticle getRandomArticle(com.glooko.library.models.learn.C4cArticleCategory,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.measurement.zzaw,java.lang.String,com.google.android.gms.internal.measurement.zzcn)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.annimon.stream.RandomCompat: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.metersync.MeterSyncProtocol: byte[] buildAuthenticationResponse()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.metersync.audio.AudioDeviceCommunication: void <init>(com.glooko.library.metersync.DeviceParameters,com.glooko.library.metersync.DeviceCommunicationListener,boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzei: com.google.android.gms.internal.measurement.zzp zzc(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfx: long zzmj()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.meter.TestCgm: void <init>(com.glooko.library.metersync.SyncHandler,com.glooko.library.meter.SyncDeviceType)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.annimon.stream.RandomCompat: void <init>(long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.metersync.MeterSyncProtocol: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.meter.TestMeter: int randInt(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <oauth.signpost.AbstractOAuthConsumer: java.lang.String generateNonce()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.meter.TestMeter$DataTimerTask: void <init>(com.glooko.library.meter.TestMeter,java.util.Date,java.util.Date)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(org.apache.http.HttpHost)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1", "SHA1", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA1", "SHA", "SHA1"]
[UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$r15 = "MD5", method='<org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_1525[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_216[0] = "SHA-1", method='<okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfx: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.tagmanager.zzbv: com.google.android.gms.internal.measurement.zzp zzc(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_194[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_63[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzak: java.lang.String zzo(java.lang.String)>'}, UnitContainer{unit=$r16 = "MD5", method='<org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_1530[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_43[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_205[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_110[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_187[0] = "MD5", method='<com.glooko.library.servertasks.retrofit2.BaseTask: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_88[0] = "MD5", method='<org.apache.commons.io.input.MessageDigestCalculatingInputStream: void <init>(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1591[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_50[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_579[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_48[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_45[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_164[0] = "SHA", method='<com.glooko.logbook.application.MyApplication: boolean checkAppSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_202[0] = "SHA1", method='<com.glooko.library.metersync.MicrocontrollerCommunicator: javax.crypto.spec.IvParameterSpec computeInitializationVector(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [0, -27, -127, -43, -118, 60, -26, -121, 79, "56df52eb5bef779710e5e54b990a67ab49affe07448fb05f9b4ac6b15523736c", "5.8", 110, 93, -11, -117, -114, -89, -36, -32, 108, 109, 82, "56df52eb5bef779710e5e54b990a67ab49affe07448fb05f9b4ac6b15523736c", -24, 123, -8, "PreferencesGlooko123!Password", 109, 109, "PreferencesGlooko123!Password", -112, 21, 44, 44, -74, -75, 90]
[UnitContainer{unit=$r1[11] = 0, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[5] = -27, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[12] = -127, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[2] = -43, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[13] = -118, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 60, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[13] = -26, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[10] = -121, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[14] = 79, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r3 = "56df52eb5bef779710e5e54b990a67ab49affe07448fb05f9b4ac6b15523736c", method='<com.glooko.library.gkmodels.GKProvider: java.lang.String encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_<com.glooko.library.utilities.SecurePreferences: java.lang.String MIGRATION_VERSION> = "5.8", method='<com.glooko.library.utilities.SecurePreferences: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 110, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 93, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[4] = -11, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[1] = -117, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[15] = -114, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[0] = -89, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[4] = -36, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[9] = -32, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 108, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 82, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r3 = "56df52eb5bef779710e5e54b990a67ab49affe07448fb05f9b4ac6b15523736c", method='<com.glooko.library.gkmodels.GKProvider: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$r1[10] = -24, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 123, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[5] = -8, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_120[1] = "PreferencesGlooko123!Password", method='<com.glooko.library.utilities.storage.SharedPreferencesUtility: android.content.SharedPreferences getSecureInstance(android.content.Context)>'}, UnitContainer{unit=$r1[1] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_120[0, 1] = "PreferencesGlooko123!Password", method='<com.glooko.library.utilities.storage.SharedPreferencesUtility: android.content.SharedPreferences getSecureInstance(android.content.Context)>'}, UnitContainer{unit=$r1[14] = -112, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 21, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[15] = 44, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 44, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[6] = -74, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[3] = -75, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[12] = 90, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, -27, -127, -43, -118, 0, 0, 60, -26, -121, 79, 0, 0, 0, 110, 93, -117, -11, -114, -89, -36, -32, 109, 108, 82, 0, -24, 123, 0, -8, 109, 109, 0, 0, 21, -112, 44, 0, 44, 0, -74, 90, -75]
[UnitContainer{unit=$r0[9] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 0, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[5] = -27, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[12] = -127, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[2] = -43, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[13] = -118, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 60, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[13] = -26, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[10] = -121, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[14] = 79, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 110, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 93, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[1] = -117, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[4] = -11, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[15] = -114, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[0] = -89, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[4] = -36, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[9] = -32, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 108, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 82, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[10] = -24, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 123, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[5] = -8, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 21, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[14] = -112, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[15] = 44, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 44, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[6] = -74, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[12] = 90, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[3] = -75, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["PreferencesGlooko123!Password"]
[UnitContainer{unit=$fakeLocal_120[1] = "PreferencesGlooko123!Password", method='<com.glooko.library.utilities.storage.SharedPreferencesUtility: android.content.SharedPreferences getSecureInstance(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [10000, $i0, @parameter2: int, 10000, $i0, @parameter2: int]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["changeit"]
[UnitContainer{unit=return "changeit", method='<ch.qos.logback.core.net.ssl.KeyStoreFactoryBean: java.lang.String getPassword()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://www.novo-pi.com/", "http://localhost/", "http://www.google-analytics.com"]
[UnitContainer{unit=$fakeLocal_71[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_31[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_46[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_160[0] = "http://www.novo-pi.com/", method='<com.glooko.logbook.ui.dialog.IsiPiDialogFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_117[0] = "http://localhost/", method='<com.glooko.library.mock.MockCall: retrofit2.Response execute()>'}, UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.measurement.zzcg: com.google.android.gms.internal.measurement.zzcg zza(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.measurement.zzcf: void <clinit>()>'}]
=======================================
Analyzing APK: com.glucome.android.glucomeandroidapp6.apk
*** Base package: com.glucome.android.glucomeandroidapp6
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.tubesock.WebSocketWriter: void <init>(com.google.firebase.database.tubesock.WebSocket,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.tubesock.WebSocketHandshake: int rand(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjy: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.storage.internal.ExponentialBackoffSender: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.core.utilities.PushIdGenerator: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <de.greenrobot.dao.test.DbTest: void <init>(boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.connection.util.RetryHelper: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.firebase.database.logging.LogWrapper,long,long,double,double)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_442[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjy: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_108[0] = "SHA-1", method='<com.google.firebase.database.core.utilities.Utilities: java.lang.String sha1HexDigest(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
Analyzing APK: com.h2sync.android.h2syncapp.apk
*** Base package: com.h2sync.android.h2syncapp
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding", "AES/ECB/NoPadding", "AES/ECB/NoPadding", "DES"]
[UnitContainer{unit=$fakeLocal_182[0] = "AES/ECB/NoPadding", method='<com.h2sync.h2synclib.ble.b.a: byte[] d(byte[])>'}, UnitContainer{unit=$fakeLocal_680[0] = "AES/ECB/NoPadding", method='<com.h2sync.h2synclib.a.a.b: byte[] b(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_614[0] = "AES/ECB/NoPadding", method='<com.h2sync.h2synclib.a.a.b: void b(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "DES", method='<com.tencent.mm.sdk.platformtools.d: void a(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.b: long c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.h2sync.h2synclib.ble.a.bj: byte[] d()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.d.e.j: com.bumptech.glide.load.g o()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.greenrobot.greendao.test.DbTest: void <init>(boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.cp: java.lang.String a(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.fi: long g()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.ae: void <init>(io.a.a.a.a.c.a.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.mozilla.javascript.NativeMath: java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.stripe.net.MultipartProcessor: java.lang.String getBoundary()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.a.b.dd: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.sun.mail.util.SocketFetcher: java.net.Socket startTLS(java.net.Socket,java.lang.String,java.util.Properties,java.lang.String)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.a.a.a.a.e.p
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of c.a.a.a.a.b.e
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of c.a.a.a.a.b.e
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in c.a.a.a.a.b.f
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_37[0] = "MD5", method='<com.cogini.h2.i.m: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.fi: java.security.MessageDigest i()>'}, UnitContainer{unit=$fakeLocal_272[0] = "MD5", method='<com.facebook.internal.cp: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.a.a.a.a.e.p: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_782[0] = "SHA-1", method='<com.facebook.ac: java.lang.String d(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<e.k: e.k d()>'}, UnitContainer{unit=$fakeLocal_63[0] = "MD5", method='<com.appsflyer.p: java.lang.String ॱ(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<e.k: e.k c()>'}, UnitContainer{unit=$fakeLocal_49[0] = "SHA-1", method='<com.appsflyer.p: java.lang.String ˊ(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.x: java.lang.String a(java.lang.String,com.google.android.gms.common.q,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.r: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_123[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_623[0] = "MD5", method='<org.mozilla.javascript.tools.shell.Main: byte[] getDigest(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.a.a.a.a.b.m: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.a.a.a.a.b.m: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_281[0] = "MD5", method='<com.facebook.a.f: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_280[0] = "SHA-1", method='<com.facebook.internal.cp: java.lang.String a(byte[])>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://", "http://127.0.0.1", "http:"]
[UnitContainer{unit=virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://"), method='<org.mozilla.javascript.tools.debugger.Dim: java.lang.String loadSource(java.lang.String)>'}, UnitContainer{unit=virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://127.0.0.1"), method='<org.mozilla.javascript.tools.debugger.Dim: java.lang.String loadSource(java.lang.String)>'}, UnitContainer{unit=virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http:"), method='<org.mozilla.javascript.tools.debugger.Dim: java.lang.String loadSource(java.lang.String)>'}]
=======================================
Analyzing APK: com.healcerion.hermionedroid_ce.apk
java.lang.ArrayIndexOutOfBoundsException: 643
	at android.content.res.StringBlock.getShort(StringBlock.java:231)
	at android.content.res.StringBlock.getString(StringBlock.java:91)
	at android.content.res.AXmlResourceParser.getName(AXmlResourceParser.java:140)
	at main.util.manifest.ProcessManifest.loadClassesFromBinaryManifest(ProcessManifest.java:115)
	at main.util.manifest.ProcessManifest$1.handleManifest(ProcessManifest.java:97)
	at main.util.manifest.ProcessManifest.handleAndroidManifestFile(ProcessManifest.java:74)
	at main.util.manifest.ProcessManifest.loadManifestFile(ProcessManifest.java:93)
	at main.util.Utils.getBasePackageNameFromApk(Utils.java:71)
	at main.rule.engine.RuleEngine.main(RuleEngine.java:57)
*** Base package: 
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES"]
[UnitContainer{unit=$fakeLocal_61[0] = "AES", method='<com.healcerion.winzipaes.impl.AESUtilsJCA: void <init>(java.lang.String,int,byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <it.sauronsoftware.ftp4j.FTPDataTransferServer: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.bouncycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement sqrt()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.asn1.ua.DSTU4145PointEncoder: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.raw.Mod: int[] random(int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.healcerion.android.hermione.utils.TimeCheck2: int randomRange(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.healcerion.android.hermione.utils.TimeCheck1: int randomRange(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECCurve$AbstractF2m: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECFieldElement)>
=============================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [0, 0, "Healcerion_2012_&u@75t-2}s4fxlN4", "HealcerionHIT HermioneUltraSound", -1L, "HealcerionHIT HermioneUltraSound", "HealcerionHIT HermioneUltraSound", 0, 0, 4096L, -1L, 0, 0, 0, 1L, "ISO-8859-1", 1048576L, 0, 0L, "ISO-8859-1", 0, 0, 0, 0L, 0, "HealcerionHIT HermioneUltraSound", 0L, 0L, 0L, 0, 1048576L, 0, 0L, 0, 0, 1L, 1048576L]
[UnitContainer{unit=$r0[4] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r5 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.FullSettingActivity$84: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_1324[1] = "HealcerionHIT HermioneUltraSound", method='<com.healcerion.android.hermione.common.RecordExtractor: java.lang.String ExtractHeader(android.content.Context,java.io.RandomAccessFile)>'}, UnitContainer{unit=return -1L, method='<com.healcerion.android.hermione.utils.Utils: long getFreeExternalMemorySize()>'}, UnitContainer{unit=$fakeLocal_1836[1] = "HealcerionHIT HermioneUltraSound", method='<com.healcerion.android.hermione.common.RecordExtractor: java.lang.String ExtractRecordFile(android.content.Context,java.io.RandomAccessFile,float,float,int,boolean)>'}, UnitContainer{unit=$fakeLocal_352[1] = "HealcerionHIT HermioneUltraSound", method='<com.healcerion.android.hermione.utils.SnapshotUtils: int ImportProcessV6(android.content.Context,java.io.File,int,int,android.os.Handler,int,int)>'}, UnitContainer{unit=$r0[2] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_<com.healcerion.android.hermione.common.GlobalVars: long recordSize> = 4096L, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=return -1L, method='<com.healcerion.android.hermione.utils.Utils: long getTotalExternalMemorySize()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$l11 = 1L << $s3, method='<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream init()>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESDecrypter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=$l2 = $l0 / 1048576L, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$r0[11] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$l0 = 0L, method='<com.healcerion.android.hermione.utils.Utils: long folderMemoryCheck(java.lang.String)>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=$r0[8] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_<com.healcerion.android.hermione.common.GlobalVars: long usedSize> = 0L, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_2150[1] = "HealcerionHIT HermioneUltraSound", method='<com.healcerion.android.hermione.common.RecordExtractor: java.lang.String ExtractRecordFile(android.content.Context,java.io.RandomAccessFile,float,float,int,boolean)>'}, UnitContainer{unit=$l10 = 0L, method='<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream init()>'}, UnitContainer{unit=$fakeLocal_<com.healcerion.android.hermione.common.GlobalVars: long totalSize> = 0L, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=return 0L, method='<com.healcerion.android.hermione.utils.Utils: long folderMemoryCheck(java.lang.String)>'}, UnitContainer{unit=$r0[7] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$l0 = $l2 / 1048576L, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$r0[15] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_<com.healcerion.android.hermione.common.GlobalVars: long freeSize> = 0L, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$l10 = $l10 + 1L, method='<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream init()>'}, UnitContainer{unit=$l0 = $l0 / 1048576L, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[UnitContainer{unit=$r0[9] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: [0, 0, "Healcerion_2012_&u@75t-2}s4fxlN4", "Healcerion_2012_&u@75t-2}s4fxlN4", -1L, 0L, 0, 0, 0L, 1048576L, 0, 4096L, -1L, 0L, "Healcerion_2012_&u@75t-2}s4fxlN4", "Healcerion_2012_&u@75t-2}s4fxlN4", 1, 0, 1048576L, 0L, "Healcerion_2012_&u@75t-2}s4fxlN4", 1048576L, "Healcerion_2012_&u@75t-2}s4fxlN4", 0L]
[UnitContainer{unit=$r25[1] = 0, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$r4[3] = 0, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=$r5 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.FullSettingActivity$84: void onClick(android.view.View)>'}, UnitContainer{unit=$r4 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.LoginActivity$24: void onClick(android.view.View)>'}, UnitContainer{unit=return -1L, method='<com.healcerion.android.hermione.utils.Utils: long getFreeExternalMemorySize()>'}, UnitContainer{unit=$fakeLocal_<com.healcerion.android.hermione.common.GlobalVars: long totalSize> = 0L, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=$r4[2] = 0, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=$r4[1] = 0, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=return 0L, method='<com.healcerion.android.hermione.utils.Utils: long folderMemoryCheck(java.lang.String)>'}, UnitContainer{unit=$l0 = $l2 / 1048576L, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$r25[0] = 0, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_<com.healcerion.android.hermione.common.GlobalVars: long recordSize> = 4096L, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=return -1L, method='<com.healcerion.android.hermione.utils.Utils: long getTotalExternalMemorySize()>'}, UnitContainer{unit=$fakeLocal_<com.healcerion.android.hermione.common.GlobalVars: long freeSize> = 0L, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=$r2 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.hermionedroid_ce.FirstActivity: void save()>'}, UnitContainer{unit=$r12 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$r4[0] = 1, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=$r4[0] = 0, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}, UnitContainer{unit=$l2 = $l0 / 1048576L, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$l0 = 0L, method='<com.healcerion.android.hermione.utils.Utils: long folderMemoryCheck(java.lang.String)>'}, UnitContainer{unit=$r2 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.hermionedroid_ko.FirstActivity: void save()>'}, UnitContainer{unit=$l0 = $l0 / 1048576L, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$r7 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.LoginActivity$6: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_<com.healcerion.android.hermione.common.GlobalVars: long usedSize> = 0L, method='<com.healcerion.android.hermione.common.GlobalVars: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [100, 100]
[UnitContainer{unit=$fakeLocal_2676[2] = 100, method='<com.healcerion.android.hermione.common.GlobalVars: javax.crypto.SecretKey generateKey(char[],byte[])>'}, UnitContainer{unit=$fakeLocal_2684[2] = 100, method='<com.healcerion.android.hermione.common.GlobalVars: javax.crypto.SecretKey generateKey(char[],byte[])>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r1 = "www.bouncycastle.org", method='<org.bouncycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
Analyzing APK: com.healthup.apk
*** Base package: com.healthup
Analyzing APK: com.heraeus.heraeuscare.apk
*** Base package: com.heraeus.heraeuscare
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.openudid.OpenUDID_manager: void <init>(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.sentry.connection.RandomEventSampler: void <init>(double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in io.sentry.connection.HttpConnection$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzaf: java.lang.String zza(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_272[0] = "SHA-1", method='<ly.count.android.sdk.ConnectionProcessor: java.lang.String sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_20[0] = "MD5", method='<com.buddyhealthcare.buddycare.utils.undefined.UniqueInteger: int getUniqueIntegerFromUuid(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_91[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.hmi.equilibrium.apk
*** Base package: com.hmi.equilibrium
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.unity3d.player.UnityWebRequest$1
=======================================
Analyzing APK: com.hygieia.dnavapp.apk
*** Base package: com.hygieia.dnavapp
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: com.ideallife.healthtablet.apk
*** Base package: com.ideallife.healthtablet
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.g: void b(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ideallife.models.util.RandomString: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ideallife.healthtablet.util.l: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.A: void <init>(d.a.a.a.a.c.a.a,double)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ideallife.android.gatewaylib.service.d$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ideallife.android.gatewaylib.service.d$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of d.a.a.a.a.e.k
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA1", "SHA1"]
[UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<d.a.a.a.a.b.l: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_194[0] = "MD5", method='<com.ideallife.models.util.Strings: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<d.a.a.a.a.b.l: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<d.a.a.a.a.e.k: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.a: java.lang.String a(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google.com"]
[UnitContainer{unit=$fakeLocal_88[0] = "http://www.google.com", method='<b.b.a.a.c.a: boolean a()>'}]
=======================================
Analyzing APK: com.imagewareinc.pillphoneprod.apk
*** Base package: com.imagewareinc.pillphoneprod
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECCurve$F2m: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nONBField: org.spongycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facetec.zoom.sdk.V$5: java.lang.String ˎ(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzgd: long zzgk()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.raw.Mod: int[] random(int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntityBuilder: java.lang.String generateBoundary()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facetec.zoom.sdk.V$5: java.lang.String ˏ(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzaa: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement sqrt()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.spongycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(org.apache.http.HttpHost)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.imagewareinc.pillphone.network.NetConnector$MySSLSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.imagewareinc.pillphone.network.NetConnector$MySSLSocketFactory$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA1", "MD5", "SHA-1", "MD5", "MD2", "SHA-1"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<com.facetec.zoom.sdk.libs.eg: com.facetec.zoom.sdk.libs.eg ˋ()>'}, UnitContainer{unit=$fakeLocal_15[0] = "SHA-1", method='<com.imagewareinc.pillphone.util.ShaUtils: java.lang.String getSha1Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_98[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzam: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_187[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzgd: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_85[0] = "MD2", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_112[0] = "SHA-1", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [0]
[UnitContainer{unit=$c4 = 0, method='<com.facetec.zoom.sdk.o: java.lang.String ˊ(java.lang.String,boolean,int[])>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), null, $i0, $r0.<org.spongycastle.asn1.x509.DigestInfo: byte[] digest>, @this: org.spongycastle.asn1.pkcs.PBES2Parameters, i2 << 8, new org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, $i1 & 32, @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.ASN1Integer iterations>, specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>($b0, $r3, $r2), virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), (org.spongycastle.asn1.pkcs.Pfx) $r1, (org.spongycastle.asn1.ASN1Encodable) $r2, <org.spongycastle.jce.provider.BouncyCastleProvider: java.util.Map keyInfoConverters>, (org.spongycastle.asn1.ASN1Encodable) $r0, new org.spongycastle.asn1.ASN1InputStream, new org.spongycastle.asn1.ASN1StreamParser, $r0.<org.spongycastle.asn1.pkcs.PBKDF2Params: org.spongycastle.asn1.ASN1Integer iterationCount>, $r3, i3 << 0, $r3, $r9, specialinvoke $r9.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $r0.<org.spongycastle.asn1.ASN1InputStream: int limit>, null, interfaceinvoke $r9.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r10), virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), @this: org.spongycastle.asn1.pkcs.PBKDF2Params, null, $i0, staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), $r2, virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.SafeBag: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $i0, $i0, $i0, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.ContentInfo contentInfo>, $r3.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom random>, (org.spongycastle.asn1.pkcs.PBES2Parameters) $r1, (org.spongycastle.asn1.ASN1Encodable) $r0, $r12, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, virtualinvoke $r11.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r8), r1, $i1, (org.spongycastle.asn1.pkcs.PKCS12PBEParams) $r1, new javax.crypto.spec.PBEParameterSpec, $r2, $r0.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1Encodable content>, $r29[$i0], @this: org.spongycastle.asn1.x509.DigestInfo, @this: org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, $r1, virtualinvoke $r17.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), new org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>, (org.spongycastle.asn1.ASN1OctetString) $r6, $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), new org.spongycastle.asn1.pkcs.PBKDF2Params, $r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Vector seq>, null, $r1, $r2, $i0, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>(), @parameter0: java.lang.Object, 1, $i2, $r3, $r6, specialinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), r0.<java.io.DataInputStream: java.io.InputStream in>, virtualinvoke $r2.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>(), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBKDF2Params: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), (java.security.PrivateKey) $r18, virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>(), $r2, @parameter0: java.lang.Object, $i0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), virtualinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i1, $i2, $i0), new org.spongycastle.asn1.pkcs.AuthenticatedSafe, $i0 & 1023, $r2, @this: org.spongycastle.asn1.pkcs.KeyDerivationFunc, @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>(), virtualinvoke $r1.<java.io.InputStream: int read()>(), (org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, @this: org.spongycastle.asn1.pkcs.SafeBag, interfaceinvoke $r9.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String)>($r10), @this: org.spongycastle.asn1.pkcs.AuthenticatedSafe, @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r3, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $i1, $i0, $r2, new org.spongycastle.asn1.IndefiniteLengthInputStream, r0.<java.io.DataInputStream: java.io.InputStream in>, $r3, (org.spongycastle.asn1.pkcs.EncryptedData) $r1, staticinvoke <org.spongycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r0, $i1), @parameter1: char[], virtualinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec pbeKeySpec>, @parameter0: java.lang.Object, lengthof $r6, $s5, new org.spongycastle.asn1.pkcs.EncryptedData, @parameter2: int, (org.spongycastle.asn1.ASN1Sequence) $r6, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>(), @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, staticinvoke <org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r2), @this: org.spongycastle.asn1.ASN1InputStream, @this: org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>, @parameter0: byte[], -1, @parameter0: byte[], (org.spongycastle.asn1.ASN1Sequence) $r0, null, $r12, $i12 + $i11, r1, $i10 + $i9, $r2, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, (org.spongycastle.asn1.ASN1Sequence) $r36, @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, $r0.<org.spongycastle.asn1.ASN1OctetString: byte[] string>, r1, @this: org.spongycastle.asn1.ASN1Set, @parameter2: int, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams params>, $r12, (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1, $i0, @this: org.spongycastle.asn1.ASN1Sequence, $r2, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r2), $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector set>, null, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int read()>(), $i0, @this: org.spongycastle.asn1.pkcs.Pfx, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedData: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), (org.spongycastle.asn1.ASN1Set) $r0, virtualinvoke $r17.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), $r0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), null, $r3, staticinvoke <org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r6), $r0.<org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.KeyDerivationFunc func>, (org.spongycastle.asn1.ASN1Set) $r15, $i0, @parameter4: byte[], r1, r53, @this: org.spongycastle.asn1.pkcs.ContentInfo, @parameter4: int, virtualinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r2, $r12, $r6, @parameter0: java.lang.Object, $r0.<org.spongycastle.asn1.x509.DigestInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, r1, $i0, $i0, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.MacData macData>, (org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) $r4, (org.spongycastle.asn1.ASN1Primitive) $r15, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r2), @this: org.spongycastle.asn1.pkcs.MacData, virtualinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), @parameter0: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, $r0.<org.spongycastle.asn1.pkcs.MacData: org.spongycastle.asn1.x509.DigestInfo digInfo>, $r19, 1024, @parameter2: org.spongycastle.asn1.pkcs.PKCS12PBEParams, virtualinvoke $r2.<java.io.InputStream: int read()>(), interfaceinvoke $r9.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r10), $r1, @parameter0: char[], staticinvoke <org.spongycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0), virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int readLength()>(), @parameter0: java.lang.Object, (org.spongycastle.asn1.ASN1Sequence) $r2, $r3, @this: org.spongycastle.asn1.pkcs.SafeBag, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $b4 & 255, specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), r0.<java.io.DataInputStream: java.io.InputStream in>, r1, @parameter2: int, $r4, $i1, virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>(), null, $i0 + 1024, new java.io.BufferedInputStream, (org.spongycastle.asn1.ASN1Encodable) $r2, @parameter1: java.security.Key, virtualinvoke r0.<java.util.Random: int next(int)>(32), @this: org.spongycastle.asn1.ASN1OctetString, $r1, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $i0, new org.spongycastle.asn1.BERApplicationSpecificParser, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.spongycastle.asn1.pkcs.AuthenticatedSafe) $r1, r1, new org.spongycastle.asn1.pkcs.Pfx, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector set>, (org.spongycastle.asn1.pkcs.PBKDF2Params) $r1, specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), $r1, $r2, virtualinvoke $r4.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>(), @parameter1: java.security.Key, virtualinvoke $r7.<org.spongycastle.asn1.BERSetParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), r1, i0, null, interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBES2Parameters: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @parameter0: java.lang.Object, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, virtualinvoke $r3.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>(), $r1, i1 << 16, $r0, $i0, $r2, specialinvoke $r2.<org.spongycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), $r3, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.Pfx: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), i0 << 24, $i2, $r3, $r4, specialinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.spongycastle.asn1.ASN1StreamParser)>($i2, $r3), @this: org.spongycastle.asn1.x509.AlgorithmIdentifier, @parameter0: java.lang.Object, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, $i0, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), @parameter0: java.lang.Object, @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r1, null, @this: org.spongycastle.asn1.pkcs.Pfx, $r3, $r8, specialinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r15, null, @parameter0: java.lang.Object, r1, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, null, r1, @this: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, $i13, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.spongycastle.asn1.pkcs.KeyDerivationFunc: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.spongycastle.asn1.pkcs.PBKDF2Params params>, @parameter1: java.security.Key, $r0.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: org.spongycastle.asn1.pkcs.ContentInfo[] info>, $r2, (org.spongycastle.asn1.ASN1OctetString) $r15, new org.spongycastle.asn1.BERSetParser, r1, (org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r32, new org.spongycastle.asn1.BEROctetStringParser, @parameter0: byte[], @this: org.spongycastle.asn1.ASN1Set, virtualinvoke $r3.<java.io.InputStream: int read()>(), r1, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.ASN1OctetString data>, new org.spongycastle.asn1.DERExternalParser, new org.spongycastle.asn1.pkcs.PBES2Parameters, staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set getInstance(java.lang.Object)>($r2), r52, $r0, r1, virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>(), interfaceinvoke $r5.<org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r0), $r5, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Encodable bagValue>, $r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int type>, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Set bagAttributes>, r1, $r0, new org.spongycastle.asn1.BERSequenceParser, null, new java.io.DataInputStream, $i1, @this: org.spongycastle.asn1.pkcs.MacData, new org.spongycastle.asn1.BERTaggedObjectParser, @this: org.spongycastle.asn1.x509.DigestInfo, $i0, $i0, new org.spongycastle.asn1.pkcs.SafeBag, $i0, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, (org.spongycastle.asn1.ASN1Set) $r2, $r3, new org.spongycastle.asn1.ASN1InputStream, $r2, @parameter0: java.lang.Object, virtualinvoke $r9.<org.spongycastle.asn1.DERExternalParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r1[$i2], $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable parameters>, $r3, $r7, specialinvoke $r7.<org.spongycastle.asn1.BERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), (org.spongycastle.asn1.pkcs.SafeBag) $r1, $r1, $r0.<org.spongycastle.asn1.pkcs.MacData: java.math.BigInteger iterationCount>, $r3, $r10, specialinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $i0, r0.<java.io.DataInputStream: java.io.InputStream in>]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r7 = "www.bouncycastle.org", method='<org.spongycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
Analyzing APK: com.infobionic.MoMe.apk
*** Base package: com.infobionic.MoMe
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.apache.cordova.filetransfer.FileTransfer$3
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.apache.cordova.filetransfer.FileTransfer$3
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in org.apache.cordova.filetransfer.FileTransfer$2
=======================================
Analyzing APK: com.inuihealth.paragon.apk
*** Base package: com.inuihealth.paragon
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.inuihealth.paragon.activity.DebugResultsGeneratorActivity: org.json.JSONObject e()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<b.f: b.f c()>'}]
=======================================
Analyzing APK: com.isage.apk
*** Base package: com.isage
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<com.lifescan.devicesync.a.a.a.a: byte[] c(byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void initSession()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA1", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_208[0] = "SHA1", method='<com.isage.util.Crypto: byte[] generateSHA1Hash(int,byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_122[0] = "SHA-1", method='<com.isage.datacontainer.UserModel: void createKey()>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["12345", -62, -53, -45, -43, -33, -116, 99, 109, 0, 69, 72, -26, -108, 4, 22, 59]
[UnitContainer{unit=$r1 = "12345", method='<com.isage.datacontainer.UserModel: void createKey()>'}, UnitContainer{unit=$r0[3] = -62, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[4] = -53, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[2] = -45, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[12] = -43, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[5] = -33, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[15] = -116, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 99, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 109, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 69, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 72, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[11] = -26, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -108, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 4, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 22, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 59, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["12345"]
[UnitContainer{unit=$r1 = "12345", method='<com.isage.datacontainer.UserModel: void createKey()>'}]
=======================================
Analyzing APK: com.ith.patient.apk
*** Base package: com.ith.patient
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.u: void <init>(io.a.a.a.a.c.a.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.sentry.d.n: void <init>(double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.b.a.a: long a()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.a.a.a.a.e.h
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in io.sentry.d.h$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.a.a.a.a.b.i: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.a.a.a.a.e.h: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.a.a.a.a.b.i: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<b.f: b.f c()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<b.f: b.f d()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_93[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.kaiahealth.app.apk
*** Base package: com.kaiahealth.app
=======================================
***Violated Rule 5: Used export grade public Key 
***Cause: Used default key size in method: <com.kaiahealth.app.utils.AppKeyStore: void a(android.content.Context,java.security.KeyStore)>[15]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.d)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kaiahealth.app.view.trainings.CompletedTrainingActivity: void a(com.kaiahealth.app.model.CardType)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.yb: long c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.q9: long t()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <nl.dionsegijn.konfetti.b: void <init>(nl.dionsegijn.konfetti.models.d,int,nl.dionsegijn.konfetti.models.c,nl.dionsegijn.konfetti.models.Shape,long,boolean,nl.dionsegijn.konfetti.models.d,nl.dionsegijn.konfetti.models.d)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.adjust.sdk.t0: double a(double,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.apptimize.o: java.lang.String e()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <nl.dionsegijn.konfetti.emitters.RenderSystem: void <init>(nl.dionsegijn.konfetti.models.b,nl.dionsegijn.konfetti.e.a,nl.dionsegijn.konfetti.models.c[],nl.dionsegijn.konfetti.models.Shape[],int[],nl.dionsegijn.konfetti.models.a,nl.dionsegijn.konfetti.emitters.a)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.LeanplumNotificationHelper: int verifyJobId(java.util.List,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.paypal.android.sdk.onetouch.core.fpti.b: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.l.g.g: com.bumptech.glide.load.c j()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.LeanplumPushService: void showNotification(android.content.Context,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.b$a: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <nl.dionsegijn.konfetti.c: void <init>(nl.dionsegijn.konfetti.KonfettiView)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <bo.app.x2: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.i.a.d: void <init>(android.view.ViewGroup,int,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.sentry.connection.l: void <init>(double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kaiahealth.app.view.trainings.physTrainingStates.StateExerciseExecuting: void o()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.internal.WebSocketClient: java.lang.String createSecret()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.internal.HybiParser: byte[] frame(java.lang.Object,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.apptimize.td: byte[] a(java.lang.Object,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kaiahealth.app.view.trainings.physTrainingStates.StateTrainingFinishing: void q()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.paypal.android.sdk.onetouch.core.fpti.a: void a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.gtm.m,java.lang.String,com.google.android.gms.internal.gtm.a1)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.appboy.p.f: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.f
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in lib.android.paypal.com.magnessdk.j.f$a
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in lib.android.paypal.com.magnessdk.j.e$a
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in io.sentry.connection.g$a
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.appboy.p.j: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<io.fabric.sdk.android.services.network.f: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_5[0] = "SHA-1", method='<com.google.android.gms.common.v: java.lang.String a(java.lang.String,com.google.android.gms.common.o,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.leanplum.internal.FileManager: com.leanplum.internal.FileManager$HashResults fileMD5HashCreateWithPath(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<com.adjust.sdk.t0: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_3[1] = "SHA-1", method='<com.adjust.sdk.t0: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.leanplum.internal.Util: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.internal.gtm.d: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_8[0] = "MD5", method='<com.kaiahealth.kcc.utils.u: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.p: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<com.zendesk.util.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.internal.q9: java.security.MessageDigest y()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["L3@nP1Vm", "AES", "UTF-8"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}, UnitContainer{unit=specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "AES"), method='<com.nimbusds.jose.crypto.impl.n: javax.crypto.SecretKey a(javax.crypto.SecretKey,com.nimbusds.jose.EncryptionMethod,byte[],byte[])>'}, UnitContainer{unit=specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "UTF-8"), method='<lib.android.paypal.com.magnessdk.f: java.lang.String a(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["L3@nP1Vm", "__l3anplum__iv__"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}, UnitContainer{unit=$r10 = "__l3anplum__iv__", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["L3@nP1Vm"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.gtm.t0: com.google.android.gms.internal.gtm.t0 a(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.gtm.s0: void <clinit>()>'}]
=======================================
Analyzing APK: com.kinsa.apk
*** Base package: com.kinsa
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsa.features.thermometer.stick.calibration.circle_progress_bar.CircleProgressBar$Bubbles: void resetBubble(com.kinsa.features.thermometer.stick.calibration.circle_progress_bar.Bubble,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsa.features.conversation_model.model.ConversationMessage: java.lang.CharSequence get(java.lang.CharSequence)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsa.features.custom_themes.ThemeManager: int getRandomIndex(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsa.features.thermometer.stick.reading.bubbles_game.ParticleSystem: void emittParticle(com.kinsa.features.thermometer.stick.reading.bubbles_game.Particle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.LeanplumNotificationHelper: int verifyJobId(java.util.List,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsa.features.thermometer.stick.reading.bubbles_game.Camera: void updated(float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsa.features.readout.ReadoutFragment: void shuffleBubble(android.view.View)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.LeanplumPushService: void showNotification(android.content.Context,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsa.features.thermometer.stick.reading.bubbles_game.Particle: void <init>(android.content.Context,int,com.kinsa.features.thermometer.stick.reading.bubbles_game.Particle$Type,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsa.features.onboarding_conversation.model.ConversationMessage: java.lang.CharSequence get(java.lang.CharSequence)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.internal.WebSocketClient: java.lang.String createSecret()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.internal.HybiParser: byte[] frame(java.lang.Object,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void initSession()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinsahealth.ble_sdk.manager.connection_session.ConnectionSession: void sleep(long,long)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.google.android.gms.common.net.zza
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.google.android.gms.common.net.zza
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_280[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.zzi: java.lang.String getErrorMessage()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(byte[])>'}, UnitContainer{unit=$fakeLocal_301[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_202[0] = "MD5", method='<com.kinsa.utils.KinsaUtil: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_292[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(byte[])>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_138[0] = "MD5", method='<com.leanplum.internal.FileManager: com.leanplum.internal.FileManager$HashResults fileMD5HashCreateWithPath(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_288[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_126[0] = "MD5", method='<com.leanplum.internal.Util: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_380[0] = "MD5", method='<io.branch.indexing.ContentDiscoverer$HashHelper: void <init>(io.branch.indexing.ContentDiscoverer)>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.zendesk.util.DigestUtils: java.lang.String md5(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["L3@nP1Vm"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["L3@nP1Vm", "__l3anplum__iv__"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}, UnitContainer{unit=$r10 = "__l3anplum__iv__", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["L3@nP1Vm"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_71[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_31[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_46[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}]
=======================================
Analyzing APK: com.labstyle.darioandroid.apk
*** Base package: com.labstyle.darioandroid
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["x-amz-matdesc", "x-amz-matdesc", "AES", "AES", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "RC4", "DES/ECB/NoPadding"]
[UnitContainer{unit=$r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[])>'}, UnitContainer{unit=$r4 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromInstructionFile0(java.util.Map,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[])>'}, UnitContainer{unit=$fakeLocal_89[0] = "AES", method='<com.labstyle.darioandroid.crypto.Crypto: java.lang.String AESDecrypt(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_75[0] = "AES", method='<com.labstyle.darioandroid.crypto.Crypto: java.lang.String AESEncrypt(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_485[0] = "DES/ECB/NoPadding", method='<com.amazonaws.org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_661[0] = "DES/ECB/NoPadding", method='<com.amazonaws.org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_583[0] = "DES/ECB/NoPadding", method='<com.amazonaws.org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_511[0] = "RC4", method='<com.amazonaws.org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_482[0] = "DES/ECB/NoPadding", method='<com.amazonaws.org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.slidingpane.notifications.utils.generator.InboxItemGenerator: void createDocument(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.abtesting.ABTestingManager: void generateUniqueId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.slidingpane.notifications.utils.generator.InboxItemGenerator: char rndChar()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.jl: void b(com.flurry.sdk.jl)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.slidingpane.notifications.utils.generator.InboxItemGenerator: java.lang.Object createActions(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.utils.DarioUtils: int getRandomColor()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.hockeyapp.android.utils.SimpleMultipartEntity: void <init>(java.io.File)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.core.utilities.PushIdGenerator: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzaa: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.connection.util.RetryHelper: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.firebase.database.logging.LogWrapper,long,long,double,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.appsflyer.k: java.lang.String generateId(java.lang.ref.WeakReference)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.tubesock.WebSocketWriter: void <init>(com.google.firebase.database.tubesock.WebSocket,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.tubesock.WebSocketHandshake: int rand(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.pedometer.data.PedoRandomDataLoadTask: java.util.List doInBackground(java.lang.Void[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.communication.sync.pedo.PedoSynchronizer: void createRandomEvents()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.appboy.support.IntentUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.slidingpane.notifications.utils.generator.InboxItemGenerator: java.lang.String generateRandomString()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzgd: long zzgk()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.storage.internal.ExponentialBackoffSender: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.FacebookException: void <init>(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.pedometer.graph.PedoGraphHelper: int getRandomColor()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.labstyle.darioandroid.inapp.popup.tool.InAppUtils: java.util.Map simulateInAppParams()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <bo.app.dl: void <init>(int,int)>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.amazonaws.http.HttpClientFactory$TrustingSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,com.amazonaws.org.apache.http.params.HttpParams)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.amazonaws.http.HttpClientFactory$TrustingX509TrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.amazonaws.http.HttpClientFactory$TrustingX509TrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.labstyle.darioandroid.dagger2.modules.NetModule$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.labstyle.darioandroid.dagger2.modules.NetModule$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.labstyle.darioandroid.communication.DarioHttpApi$DarioSSLSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.labstyle.darioandroid.communication.DarioHttpApi$DarioSSLSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.labstyle.darioandroid.rest.RestApi$3
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.labstyle.darioandroid.rest.RestApi$3
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.couchbase.lite.support.CouchbaseLiteHttpClientFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.couchbase.lite.support.CouchbaseLiteHttpClientFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.labstyle.darioandroid.communication.DarioHttpApi$DefaultTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.labstyle.darioandroid.communication.DarioHttpApi$DefaultTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.labstyle.darioandroid.dagger2.modules.NetModule$2
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed ["mobile-glucometer.com"] used in com.labstyle.darioandroid.communication.DarioHttpApi$13
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA", "MD5", "SHA-1", "SHA", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_278[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_38[0] = "SHA-1", method='<com.couchbase.lite.Misc: java.lang.String HexSHA1Digest(byte[])>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1529[0] = "MD5", method='<com.amazonaws.org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_14[0] = "MD5", method='<org.vudroid.core.utils.MD5StringUtil: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_59[0] = "MD5", method='<com.appsflyer.j: java.lang.String toMD5(java.lang.String)>'}, UnitContainer{unit=$r10 = "MD5", method='<com.amazonaws.org.apache.http.impl.auth.DigestScheme: com.amazonaws.org.apache.http.Header createDigestHeader(com.amazonaws.org.apache.http.auth.Credentials,com.amazonaws.org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_282[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_54[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_76[0] = "MD5", method='<com.couchbase.lite.BlobStoreWriter: void <init>(com.couchbase.lite.BlobStore)>'}, UnitContainer{unit=$fakeLocal_108[0] = "SHA-1", method='<com.google.firebase.database.core.utilities.Utilities: java.lang.String sha1HexDigest(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_137[0] = "SHA-1", method='<com.flurry.sdk.ly: byte[] e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_344[0] = "SHA-1", method='<com.couchbase.lite.BlobStore: com.couchbase.lite.BlobKey keyForBlobFromFile(java.io.File)>'}, UnitContainer{unit=$fakeLocal_193[0] = "MD5", method='<com.couchbase.lite.support.RevisionUtils: java.lang.String generateRevID(byte[],boolean,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_45[0] = "SHA-1", method='<com.appsflyer.j: java.lang.String toSHA1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: void <init>(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_74[0] = "SHA-1", method='<com.couchbase.lite.BlobStoreWriter: void <init>(com.couchbase.lite.BlobStore)>'}, UnitContainer{unit=$fakeLocal_316[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$r12 = "MD5", method='<com.amazonaws.org.apache.http.impl.auth.DigestScheme: com.amazonaws.org.apache.http.Header createDigestHeader(com.amazonaws.org.apache.http.auth.Credentials,com.amazonaws.org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_181[1] = "MD5", method='<net.hockeyapp.android.LoginActivity: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_550[0] = "MD5", method='<com.amazonaws.org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzgd: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_546[0] = "SHA", method='<com.labstyle.darioandroid.utils.DarioUtils: void printHashKey(com.labstyle.darioandroid.DarioLocalizedActivity)>'}, UnitContainer{unit=$fakeLocal_274[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_64[0] = "SHA", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getShaDigest()>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_329[0] = "SHA-1", method='<com.couchbase.lite.BlobStore: com.couchbase.lite.BlobKey keyForBlob(byte[])>'}, UnitContainer{unit=$fakeLocal_815[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_213[0] = "MD5", method='<com.appboy.support.StringUtils: java.lang.String getMd5Hash(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["ISO-8859-1", "ISO-8859-1"]
[UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESDecrypter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://", "http://", "http:", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://"), method='<com.flurry.sdk.ly: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$r2 = "http://", method='<com.labstyle.darioandroid.rest.RestApi: java.lang.String getBaseUrl()>'}, UnitContainer{unit=$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("https:", "http:"), method='<com.appsflyer.AppsFlyerLib: void sendRequestToServer(java.lang.String,java.lang.String,java.lang.String,java.lang.ref.WeakReference,java.lang.String,boolean)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.livongo.lvmobility.apk
*** Base package: com.livongo.lvmobility
=======================================
***Violated Rule 5: Used export grade public Key ***Constants: [1024]
[UnitContainer{unit=$fakeLocal_110[2] = 1024, method='<a.c.d.d.a.c: void <init>(java.lang.String,java.util.Date,java.util.Date)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.livongo.lvmobility.utils.MathUtils: int hourlyBasedRNG(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.b.a.ad: void <init>(java.lang.String,java.lang.String,a.b.a,a.b.a.cg$b,a.b.a.bq)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.apptentive.android.sdk.util.StringUtils: java.lang.String randomAndroidID()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.b.a.by: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.greenrobot.greendao.test.DbTest: void <init>(boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.a.ee: long g()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.livongo.lvmobility.l.i$q: void a(java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.u: void <init>(a.a.a.a.a.c.a.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.c.f.c.aa: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.apptentive.android.sdk.module.engagement.notification.NoteInteractionNotificationAdapter: void actionDisplayNotification(android.content.Context,java.lang.String,com.apptentive.android.sdk.module.engagement.interaction.model.TextModalInteraction)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.d.e.g: com.bumptech.glide.load.g o()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.b.f.a$d: void <init>(a.b.ak$b)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.b.a.af: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.a.a.a.b.v: com.a.a.a.b.ae a(com.a.a.a.b.y,com.a.a.a.b.af)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.livongo.lvmobility.homescreen.ao: android.app.Dialog onCreateDialog(android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <a.b.c.g: void <init>(java.net.InetSocketAddress,java.lang.String,java.lang.String,java.util.concurrent.Executor,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,a.b.c.a.b,int,a.b.a.bs,java.lang.Runnable,a.b.a.cn)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.hockeyapp.android.e.h: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.livongo.lvmobility.hypertension.g: void a(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.apptentive.android.sdk.network.HttpRequestRetryPolicyDefault: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void initSession()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.a.a: void <init>(int,int,long,java.lang.String)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of a.a.a.a.a.e.h
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<a.a.a.a.a.e.h: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<a.a.a.a.a.b.i: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<a.a.a.a.a.b.i: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<c.f: c.f d()>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.q: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_565[0] = "MD5", method='<com.apptentive.android.sdk.util.Util: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<net.hockeyapp.android.a: void d(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<c.f: c.f c()>'}, UnitContainer{unit=$fakeLocal_191[0] = "MD5", method='<net.hockeyapp.android.LoginActivity: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<com.a.a.a.c.f: com.a.a.a.c.f c()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.z: java.lang.String a(java.lang.String,com.google.android.gms.common.q,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_435[0] = "MD5", method='<com.google.android.gms.measurement.a.ee: java.security.MessageDigest i()>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [10000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}]
=======================================
Analyzing APK: com.masimo.merlin.consumer.apk
*** Base package: com.masimo.merlin.consumer
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5"]
[UnitContainer{unit=$fakeLocal_14[0] = "MD5", method='<org.vudroid.core.utils.MD5StringUtil: void <clinit>()>'}]
=======================================
Analyzing APK: com.medtronic.diabetes.guardianconnect.apk
*** Base package: com.medtronic.diabetes.guardianconnect
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.fs: long x()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.u: void <init>(io.fabric.sdk.android.services.concurrency.a.a,double)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.f
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.h: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<okhttp3.internal.l: okio.ByteString a(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.fs: long a(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.bj: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.aa: long a(com.google.android.gms.internal.measurement.gi)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<io.fabric.sdk.android.services.network.f: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.w: java.lang.String b()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.medtronic.guardian.storage.a.m: java.lang.String d()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://", "http://www."]
[UnitContainer{unit=$r0[2] = "http://", method='<com.neovisionaries.bluetooth.ble.advertising.EddystoneURL: void <clinit>()>'}, UnitContainer{unit=$r0[0] = "http://www.", method='<com.neovisionaries.bluetooth.ble.advertising.EddystoneURL: void <clinit>()>'}]
=======================================
Analyzing APK: com.mysugr.android.companion.apk
*** Base package: com.mysugr.android.companion
=======================================
***Violated Rule 5: Used export grade public Key 
***Cause: Used default key size in method: <com.mysugr.android.crypto.rsa.LollipopKeyPairGenImpl: void generateKeyPair(com.mysugr.core.crypto.KeyPairGenConfig)>[17]
=======================================
=======================================
***Violated Rule 5: Used export grade public Key 
***Cause: Used default key size in method: <com.mysugr.android.crypto.rsa.KeyPairGenImpl: void generateKeyPair(com.mysugr.core.crypto.KeyPairGenConfig)>[19]
=======================================
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NOPADDING", "AES/ECB/NOPADDING"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.zzayi: void <init>(byte[],int)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.zzayi: byte[] zzc(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.zztu: void onAdClosed()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.adjust.sdk.Util: double randomInRange(double,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jp.co.cyberagent.android.gpuimage.OpenGlUtils: float rnd(float,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzaa: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mysugr.android.track.experiments.Experiment: com.mysugr.android.track.experiments.Variant getRandomVariant()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.openudid.OpenUDID_manager: void <init>(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.zzcc: java.util.Random zzy()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzgd: long zzgk()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mysugr.logbook.tilefamily.monster.MonsterAnimationGroups: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mysugr.logbook.tilefamily.monster.MonsterAnimationFactory: com.mysugr.logbook.tilefamily.monster.MonsterAnimationModel getRandomItem(java.util.List)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.adjust.sdk.AdjustFactory$1$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.adjust.sdk.AdjustFactory$1$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1, "verify hostname ", 0] used in com.adjust.sdk.AdjustFactory$1$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.zzgq: java.security.MessageDigest zzhg()>'}, UnitContainer{unit=$fakeLocal_15[0] = "MD5", method='<com.mysugr.android.util.Md5Util: java.lang.String calculateMD5Hash(java.lang.String,int)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzam: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_218[0] = "SHA-1", method='<okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_272[0] = "SHA1", method='<com.adjust.sdk.AdjustFactory$1$1: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_354[1] = "MD5", method='<com.adjust.sdk.Util: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_207[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_346[1] = "SHA-1", method='<com.adjust.sdk.Util: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzgd: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_196[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_366[0] = "SHA-1", method='<ly.count.android.sdk.ConnectionProcessor: java.lang.String sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.zzbm: void run()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_14[1] = "MD5", method='<com.mysugr.rpc.api.utils.ByteArrayExtensionsKt: byte[] md5(byte[])>'}, UnitContainer{unit=$fakeLocal_17[1] = "MD5", method='<com.mysugr.rpc.api.utils.ByteArrayExtensionsKt: java.lang.String md5String(byte[],java.lang.String,boolean)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [4, "1521499837408", 3, 2]
[UnitContainer{unit=$r21[0] = 4, method='<com.google.android.gms.internal.ads.zzayr: com.google.android.gms.internal.ads.zzays zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.zzayw)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "1521499837408", method='<com.google.android.gms.internal.ads.zzcz: com.google.android.gms.internal.ads.zzcz zza(android.content.Context,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=$b4 = 3, method='<com.google.android.gms.internal.ads.zzayr: com.google.android.gms.internal.ads.zzays zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.zzayw)>'}, UnitContainer{unit=$b4 = 2, method='<com.google.android.gms.internal.ads.zzayr: com.google.android.gms.internal.ads.zzays zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.zzayw)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://www.index.hr"]
[UnitContainer{unit=$fakeLocal_71[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_31[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_46[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_70[0] = "http://www.index.hr", method='<com.mysugr.android.net.HttpServiceFactory: java.lang.Object createInternal(java.lang.Class,javax.net.ssl.SSLSocketFactory,com.mysugr.android.net.HostInterceptor,boolean)>'}]
=======================================
Analyzing APK: com.myvisiontrack.mvt.apk
*** Base package: com.myvisiontrack.mvt
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES/ECB/NoPadding", "AES/ECB/PKCS5PADDING", "DES/ECB/NoPadding", "RC4", "DES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_-1[0] = "DES/ECB/NoPadding", method='<a.a.a.a.i.a.j: byte[] h(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/PKCS5PADDING", method='<com.axmor.mvt.myvisiontrack.utils.CryptUtils: java.lang.String b(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "DES/ECB/NoPadding", method='<a.a.a.a.i.a.j$a: byte[] t()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "RC4", method='<a.a.a.a.i.a.j: byte[] b(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "DES/ECB/NoPadding", method='<a.a.a.a.i.a.j: byte[] d(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.f: void a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.i: void <init>(com.google.android.gms.analytics.internal.v,java.lang.String,com.google.android.gms.analytics.internal.e)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.e: void a(java.lang.String)>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.c.a.a.g: java.net.Socket a(java.net.Socket,java.lang.String,int,boolean)>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.c.a.a.g: java.net.Socket c()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.c.a.a.g$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.c.a.a.g$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "SHA1", "MD5", "MD5", "MD5", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<a.a.a.a.i.a.j$b: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.analytics.internal.a: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<a.a.a.a.i.a.j: byte[] a(byte[],byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.axmor.mvt.myvisiontrack.utils.CryptUtils: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.af: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.z: void e()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.m: long d(byte[])>'}, UnitContainer{unit=$r8 = "MD5", method='<a.a.a.a.i.a.d: a.a.a.a.e b(a.a.a.a.a.m,a.a.a.a.q)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.a: java.lang.String a(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [class "Landroid/os/Build;", "localcfg"]
[UnitContainer{unit=$r1 = class "Landroid/os/Build;", method='<com.d.a: java.lang.String b(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "localcfg", method='<com.axmor.mvt.myvisiontrack.d.a: void <init>(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: [class "Landroid/os/Build;", "localcfg"]
[UnitContainer{unit=$r1 = class "Landroid/os/Build;", method='<com.d.a: java.lang.String b(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "localcfg", method='<com.axmor.mvt.myvisiontrack.d.a: void <init>(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [i0, $r3, $i0, lengthof $r2, @parameter2: int, @parameter1: byte[], $i0, 10000, $r0, newarray (byte)[$i0], @this: org.cryptonode.jncryptor.AES256v2Cryptor, @parameter2: byte[], @this: org.cryptonode.jncryptor.AES256v2Cryptor, $r4, $r0.<org.cryptonode.jncryptor.AES256v2Cryptor: int b>]
=======================================
Analyzing APK: com.naturalcycles.cordova.apk
*** Base package: com.naturalcycles.cordova
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.adjust.sdk.Util: double randomInRange(double,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcjk: long zzzs()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <de.appplant.cordova.plugin.notification.Builder: void applyContentReceiver(android.support.v4.app.NotificationCompat$Builder)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.adjust.sdk.AdjustFactory$1$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.adjust.sdk.AdjustFactory$1$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.adjust.sdk.AdjustFactory$1$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "MD5", "MD5", "SHA1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_346[1] = "SHA-1", method='<com.adjust.sdk.Util: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_272[0] = "SHA1", method='<com.adjust.sdk.AdjustFactory$1$1: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcem: long zza(com.google.android.gms.internal.zzcjy)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcjk: long zzI(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_354[1] = "MD5", method='<com.adjust.sdk.Util: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcfv: java.lang.String zzec(java.lang.String)>'}]
=======================================
Analyzing APK: com.neurometrix.quell.apk
*** Base package: com.neurometrix.quell
Analyzing APK: com.noona.application.us.apk
*** Base package: com.noona.application.us
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzgo: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.perf.internal.zzt: boolean zza(boolean,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzog: com.google.android.gms.internal.measurement.zzqp zza(com.google.android.gms.internal.measurement.zzia,com.google.android.gms.internal.measurement.zzqp[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.cordova.firebase.FirebasePluginMessagingService: void onMessageReceived(com.google.firebase.messaging.RemoteMessage)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.measurement.zzaw,java.lang.String,com.google.android.gms.internal.measurement.zzcn)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.plugin.datepicker.DatePickerPlugin$1: void run()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfy: long zzmj()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.internal.measurement.zznx: com.google.android.gms.internal.measurement.zzqp zza(com.google.android.gms.internal.measurement.zzia,com.google.android.gms.internal.measurement.zzqp[])>'}, UnitContainer{unit=$fakeLocal_23[0] = "MD5", method='<com.nordnetab.chcp.main.utils.MD5: void <init>()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfy: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_63[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzak: java.lang.String zzo(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_110[0] = "SHA-1", method='<com.google.firebase.perf.internal.RemoteConfigManager: java.lang.String zzh(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_56[0] = "SHA-1", method='<com.google.firebase.perf.internal.zzv: long zzg(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["undefined", "0", "false", "true", "[object Object]"]
[UnitContainer{unit=return "undefined", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}, UnitContainer{unit=return "0", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}, UnitContainer{unit=return "false", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}, UnitContainer{unit=return "true", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}, UnitContainer{unit=return "[object Object]", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["undefined", "0", "false", "true", "[object Object]"]
[UnitContainer{unit=return "undefined", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}, UnitContainer{unit=return "0", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}, UnitContainer{unit=return "false", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}, UnitContainer{unit=return "true", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}, UnitContainer{unit=return "[object Object]", method='<com.google.android.gms.internal.measurement.zzjp: java.lang.String zzd(com.google.android.gms.internal.measurement.zzqp)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.measurement.zzcg: com.google.android.gms.internal.measurement.zzcg zza(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.measurement.zzcf: void <clinit>()>'}]
=======================================
Analyzing APK: com.omesoft.temperature.apk
*** Base package: com.omesoft.temperature
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.common.net.e: void run()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.common.net.s: org.json.JSONObject a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.fb.c.a: java.lang.String a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.omesoft.util.y: java.lang.String a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.common.net.s: org.json.JSONObject a(java.lang.String,org.json.JSONObject)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.fb.a.b: com.umeng.fb.a.d a(com.umeng.fb.a.c)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.omesoft.util.y: java.lang.String b()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.zhy.autolayout.widget.MetroLayout: void onMeasure(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.fb.c.a: java.lang.String a(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.common.net.d: boolean a(com.umeng.common.net.a$a,boolean,android.os.Messenger)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.omesoft.util.l: java.lang.String a()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.umeng.common.util.h: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.omesoft.util.n: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.umeng.common.util.h: java.lang.String b(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["uLi4/f4+Pb39.T19"]
[UnitContainer{unit=$r0 = "uLi4/f4+Pb39.T19", method='<com.umeng.common.util.b: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["uLi4/f4+Pb39.T19", "nmeug.f9/Om+L823"]
[UnitContainer{unit=$r0 = "uLi4/f4+Pb39.T19", method='<com.umeng.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r0 = "nmeug.f9/Om+L823", method='<com.umeng.common.util.b: void <clinit>()>'}]
=======================================
Analyzing APK: com.oncoassist.core.apk
*** Base package: com.oncoassist.core
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <hb: void g()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.GcmRegistrar$Request: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key q()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[],long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.LocalIdManager: void <init>(java.io.File)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.zzark,java.lang.String,com.google.android.gms.internal.zzatb)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.nexus.NexusSocket: long calculateReconnectTimerInSeconds(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.api.HeaderInterceptor: io.intercom.android.sdk.api.HeaderInterceptor create(android.content.Context,io.intercom.android.sdk.identity.AppIdentity)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.ParseRequest: bolts.Task executeAsync(com.parse.ParseHttpClient,com.parse.http.ParseHttpRequest,com.parse.ProgressCallback,bolts.Task)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <n6: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.com.bumptech.glide.load.resource.gif.GifFrameLoader: io.intercom.com.bumptech.glide.load.Key r()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ms: void a(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzbn)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.oncoassist.vo.User: java.lang.String rndId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.epapyrus.plugpdf.core.PDFDocument: java.lang.String getRandomString()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcno: long zzbcq()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <iu: com.google.android.gms.internal.zzbt zzx(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.kobjects.crypt.Crypt: java.lang.String generate(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.epapyrus.plugpdf.core.'annotation'.FileDialog: void <init>(android.content.Context,java.lang.String,byte[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.ParsePushBroadcastReceiver: android.app.Notification getNotification(android.content.Context,android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.okhttp3.OkHttpClient: io.intercom.okhttp3.WebSocket newWebSocket(io.intercom.okhttp3.Request,io.intercom.okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void a(android.view.View,android.graphics.Rect,int[])>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.wli.framework.http.CustomSSLConnection
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.wli.framework.http.CustomSSLConnection
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$a
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$a
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$e
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$e
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of m20
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$d
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$d
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$h
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$h
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.wli.framework.http.CustomSSLConnection
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1"]
[UnitContainer{unit=$r7 = "MD5", method='<ss: com.google.android.gms.internal.zzbt zzx(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.parse.ParseDigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcno: long a(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_2[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<ej: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<io.intercom.okio.HashingSource: io.intercom.okio.HashingSource md5(io.intercom.okio.Source)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.intercom.okio.HashingSource: io.intercom.okio.HashingSource sha1(io.intercom.okio.Source)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<oi: long a(com.google.android.gms.internal.zzcoe)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzw: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<io.intercom.okio.ByteString: io.intercom.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<df: java.lang.String a()>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<io.intercom.okio.HashingSink: io.intercom.okio.HashingSink md5(io.intercom.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<io.intercom.okio.Buffer: io.intercom.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzaqy: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<io.intercom.okio.ByteString: io.intercom.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<m20: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<io.intercom.okio.Buffer: io.intercom.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.intercom.okio.HashingSink: io.intercom.okio.HashingSink sha1(io.intercom.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com", "http://localhost/", "http://tinyurl.com/", "http://localhost/", "http://img.youtube.com/vi/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.zzasu: com.google.android.gms.internal.zzasu a(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.zzast: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_22[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_3[0] = "http://tinyurl.com/", method='<com.oncoassist.view.VideoPlayerActivity: void generateTinyUrlAndShare(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_5[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://img.youtube.com/vi/"), method='<com.wli.framework.media.ImageHelper: android.graphics.Bitmap getImageFromYouTubeID(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_7[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_12[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.optum.telehealth.apk
*** Base package: com.optum.telehealth
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.appindexing.internal.zzc$zzc: long zzafa(int)>
=============================================
Analyzing APK: com.philips.hc.ultrasound.lumify.apk
*** Base package: com.philips.hc.ultrasound.lumify
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES"]
[UnitContainer{unit=$fakeLocal_102[0] = "AES", method='<philips.sharedlib.Crypto.CryptoBase: philips.sharedlib.Crypto.CryptoBase$CipherOutputStreamGroup GetOutputStreamGroup(java.io.File)>'}, UnitContainer{unit=$fakeLocal_89[0] = "AES", method='<philips.sharedlib.Crypto.CryptoBase: java.io.InputStream GetInputStream(java.io.File)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.export.jobs.NetworkShareTestJob: void run(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.automatedtest.ProbeChangerTest: boolean testBody()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.automatedtest.ScreenChangeAutomatedTest: boolean testBody()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jcifs.netbios.NbtAddress: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.portal.PortalService: java.lang.String generateRandomString(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jcifs.smb.TestLocking: void run()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.connectivity.ConnectivityProfileManager: java.lang.String getNextUniqueId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jcifs.smb.NtlmPasswordAuthentication: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jcifs.smb.SmbConstants: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.export.jobs.IWorkflowJob: long getUniqueBatchId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.automatedtest.AcquireTest: boolean testBody()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.ui.ButtonPanel: void shuffle(java.util.ArrayList)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.automatedtest.PresetChangerTest: boolean testBody()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <philips.ultrasound.automatedtest.RandomChangerTest: boolean testBody()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.philips.icpinterface.SSLConnectivity$MyTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_176[0] = "MD5", method='<jcifs.smb.NtlmPasswordAuthentication: byte[] getNTLM2Response(byte[],byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_45[0] = "MD5", method='<jcifs.smb.SigningDigest: void <init>(jcifs.smb.SmbTransport,jcifs.smb.NtlmPasswordAuthentication)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<jcifs.util.HMACT64: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_24[0] = "MD5", method='<jcifs.smb.SigningDigest: void <init>(byte[],boolean)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["jks"]
[UnitContainer{unit=r2 = "jks", method='<java.security.KeyStore: java.lang.String getDefaultType()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://clients3.google.com/generate_204"]
[UnitContainer{unit=$fakeLocal_86[0] = "http://clients3.google.com/generate_204", method='<philips.sharedlib.util.NetworkHelper: boolean checkNoInternetConnectivity()>'}]
=======================================
Analyzing APK: com.philips.mobocare.apk
*** Base package: com.philips.mobocare
Analyzing APK: com.philosys.gmateon.apk
*** Base package: com.philosys.gmateon
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzele: void <init>(com.google.android.gms.internal.zzeku,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.philosys.gmateon.settings.Setting_Statistics: void makeDB()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzecp: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.android.gms.internal.zzejc,long,long,double,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzelb: java.lang.String zzcaz()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.itextpdf.text.pdf.BaseFont: java.lang.String createSubsetPrefix()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzels: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.poi.ss.formula.atp.RandBetween: org.apache.poi.ss.formula.eval.ValueEval evaluate(org.apache.poi.ss.formula.eval.ValueEval[],org.apache.poi.ss.formula.OperationEvaluationContext)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzclq: long zzbay()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.poi.ss.formula.functions.NumericFunction$35: org.apache.poi.ss.formula.eval.ValueEval evaluate(int,int)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "MD5", "sha1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "SHA1", "SHA1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzchx: java.lang.String zzjn(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzu: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_483[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: byte[] createDocumentId()>'}, UnitContainer{unit=specialinvoke $r0.<org.apache.poi.poifs.crypt.HashAlgorithm: void <init>(java.lang.String,int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>("sha1", 1, "SHA-1", 32772, "SHA1", 20, "HmacSHA1", 0), method='<org.apache.poi.poifs.crypt.HashAlgorithm: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_997[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfReader: void readDecryptedDocObj()>'}, UnitContainer{unit=$fakeLocal_311[0] = "SHA1", method='<com.itextpdf.text.pdf.security.LtvVerification: byte[] hashBytesSha1(byte[])>'}, UnitContainer{unit=$fakeLocal_258[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap)>'}, UnitContainer{unit=$fakeLocal_452[0] = "SHA1", method='<com.itextpdf.text.pdf.security.PdfPKCS7: void <init>(byte[],com.itextpdf.text.pdf.PdfName,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_309[0] = "SHA1", method='<com.itextpdf.text.pdf.security.MakeXmlSignature: javax.xml.crypto.dsig.XMLObject generateXadesObject(javax.xml.crypto.dsig.XMLSignatureFactory,com.itextpdf.text.pdf.XmlSignatureAppearance,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzclq: long zzaf(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcgo: long zza(com.google.android.gms.internal.zzcme)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_100[0] = "MD5", method='<com.itextpdf.text.ImgJBIG2: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.internal.zzelt: java.lang.String zzqe(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_642[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfEncryption: com.itextpdf.text.pdf.PdfDictionary getEncryptionDictionary()>'}, UnitContainer{unit=$fakeLocal_145[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: void <init>()>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_243[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PRStream,java.util.HashMap)>'}]
=======================================
Analyzing APK: com.philosys.gmatesmart.apk
*** Base package: com.philosys.gmatesmart
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzele: void <init>(com.google.android.gms.internal.zzeku,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzecp: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.android.gms.internal.zzejc,long,long,double,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzelb: java.lang.String zzcaz()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.itextpdf.text.pdf.BaseFont: java.lang.String createSubsetPrefix()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzels: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.poi.ss.formula.atp.RandBetween: org.apache.poi.ss.formula.eval.ValueEval evaluate(org.apache.poi.ss.formula.eval.ValueEval[],org.apache.poi.ss.formula.OperationEvaluationContext)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.philosys.gmatesmart.com.PHCommon: void makeDB()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.philosys.gmatesmart.msp.Setting_Statistics: void makeDB()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzclq: long zzbay()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.poi.ss.formula.functions.NumericFunction$35: org.apache.poi.ss.formula.eval.ValueEval evaluate(int,int)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "MD5", "sha1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "SHA1", "SHA1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzchx: java.lang.String zzjn(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzu: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_483[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: byte[] createDocumentId()>'}, UnitContainer{unit=specialinvoke $r0.<org.apache.poi.poifs.crypt.HashAlgorithm: void <init>(java.lang.String,int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>("sha1", 1, "SHA-1", 32772, "SHA1", 20, "HmacSHA1", 0), method='<org.apache.poi.poifs.crypt.HashAlgorithm: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_997[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfReader: void readDecryptedDocObj()>'}, UnitContainer{unit=$fakeLocal_311[0] = "SHA1", method='<com.itextpdf.text.pdf.security.LtvVerification: byte[] hashBytesSha1(byte[])>'}, UnitContainer{unit=$fakeLocal_258[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap)>'}, UnitContainer{unit=$fakeLocal_452[0] = "SHA1", method='<com.itextpdf.text.pdf.security.PdfPKCS7: void <init>(byte[],com.itextpdf.text.pdf.PdfName,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_309[0] = "SHA1", method='<com.itextpdf.text.pdf.security.MakeXmlSignature: javax.xml.crypto.dsig.XMLObject generateXadesObject(javax.xml.crypto.dsig.XMLSignatureFactory,com.itextpdf.text.pdf.XmlSignatureAppearance,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzclq: long zzaf(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcgo: long zza(com.google.android.gms.internal.zzcme)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_100[0] = "MD5", method='<com.itextpdf.text.ImgJBIG2: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.internal.zzelt: java.lang.String zzqe(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_642[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfEncryption: com.itextpdf.text.pdf.PdfDictionary getEncryptionDictionary()>'}, UnitContainer{unit=$fakeLocal_145[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: void <init>()>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_243[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PRStream,java.util.HashMap)>'}]
=======================================
Analyzing APK: com.proteus.discover.apk
*** Base package: com.proteus.discover
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.newrelic.agent.android.connectivity.CatFacade: java.lang.Long randomNumber()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.newrelic.agent.android.util.Util: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.newrelic.agent.android.analytics.EventManagerImpl: boolean addEvent(com.newrelic.agent.android.analytics.AnalyticsEvent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.salesforce.android.service.common.liveagentlogging.internal.c: void b()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.salesforce.android.sos.capturer.w: void <init>()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5"]
[UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<c.f: c.f c()>'}, UnitContainer{unit=$fakeLocal_108[0] = "SHA1", method='<com.swrve.sdk.ae: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_135[0] = "SHA-1", method='<com.newrelic.agent.android.harvest.HttpError: java.lang.String computeHash()>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<c.f: c.f d()>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.p: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_85[0] = "MD5", method='<com.swrve.sdk.ae: java.lang.String e(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["AWS4"]
[UnitContainer{unit=$r18 = "AWS4", method='<com.proteus.service.util.a: java.lang.String a(java.lang.String,java.lang.String,okhttp3.z,java.util.Map,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[UnitContainer{unit=$r1[14] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[12] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[15] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[13] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 0, method='<com.proteus.service.user.account.b: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://"]
[UnitContainer{unit=return "http://", method='<com.newrelic.agent.android.payload.PayloadSender: java.lang.String getProtocol()>'}]
=======================================
Analyzing APK: com.qompium.fibricheck.apk
*** Base package: com.qompium.fibricheck
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfy: long zzmj()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.qompium.fibricheck.util.FileUtils: void saveJsonFile(byte[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.qompium.fibricheck.util.FileUtils: void saveJsonFile(java.io.File)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD2", "SHA-1", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_96[0] = "SHA-1", method='<com.stripe.android.StripeTextUtils: java.lang.String shaHashInput(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_98[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfy: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_85[0] = "MD2", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_112[0] = "SHA-1", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://api.fibricheck.com"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_113[0] = "http://api.fibricheck.com", method='<com.qompium.fibricheck.retrofit.MyRetrofitBuilder: retrofit2.Retrofit getRetrofit()>'}]
=======================================
Analyzing APK: com.renoviainc.leva.apk
*** Base package: com.renoviainc.leva
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES/ECB/NoPadding", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "RC4"]
[UnitContainer{unit=$fakeLocal_518[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_521[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_706[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_613[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_547[0] = "RC4", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntityBuilder: java.lang.String generateBoundary()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(org.apache.http.HttpHost)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.renoviainc.leva.webservices.NetworkUtility$MyTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.renoviainc.leva.webservices.NetworkUtility$MyTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_1591[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>'}, UnitContainer{unit=$r10 = "MD5", method='<org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_579[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>'}, UnitContainer{unit=$r9 = "MD5", method='<org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}]
=======================================
Analyzing APK: com.rescontechnologies.lincus.apk
*** Base package: com.rescontechnologies.lincus
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["PBEWithMD5AndDES", "AES/ECB/NoPadding", "AES/ECB/NoPadding", "PBEWithMD5AndDES"]
[UnitContainer{unit=$fakeLocal_1741[0] = "PBEWithMD5AndDES", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] getString(java.lang.String[],int,int,int[],float[],byte[])>'}, UnitContainer{unit=$fakeLocal_1531[0] = "AES/ECB/NoPadding", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] DoCipher(java.lang.String[],int,byte[],byte[],int,javax.crypto.spec.IvParameterSpec)>'}, UnitContainer{unit=$fakeLocal_1523[0] = "AES/ECB/NoPadding", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] DoCipher(java.lang.String[],int,byte[],byte[],int,javax.crypto.spec.IvParameterSpec)>'}, UnitContainer{unit=$fakeLocal_2121[0] = "PBEWithMD5AndDES", method='<com.citrussuite.androidengine.JavaCallbacks: int uploadStrings(java.lang.String[],int,int,int[],float[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.citrussuite.androidengine.CitrusSoundRecorder: int HandleButton(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.apps.analytics.AdMobInfo: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzcc: com.google.android.gms.internal.zzag$zza zzP(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.analytics.internal.zzf,java.lang.String,com.google.android.gms.analytics.internal.zzad)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.apps.analytics.PersistentHitStore: void <init>(android.content.Context,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.internal.client.zzo: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask: void run()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzc: void zzea(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.citrussuite.androidengine.CitrusAndroidActivity: android.net.Uri getNewPhotoURI(boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzal: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzal: void zza(java.lang.String,android.content.Context,com.google.android.gms.internal.zzap)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzaj: void zzc(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzaf$zzd)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.vending.expansion.downloader.Helpers: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.apps.analytics.PersistentHitStore: void <init>(com.google.android.apps.analytics.PersistentHitStore$DataBaseHelper)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.scribe.services.TimestampServiceImpl$Timer: java.lang.Integer getRandomInteger()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.citrussuite.androidengine.WebPostTask$CustomX509TrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.citrussuite.androidengine.WebPostTask$CustomX509TrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.citrussuite.androidengine.WebPostTask$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA", "MD5", "MD5", "SHA1", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzak: java.lang.String zza(byte[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1877[0] = "SHA-1", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] getString(java.lang.String[],int,int,int[],float[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.analytics.internal.zza: java.lang.String zzbb(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzir: java.lang.String zzhs()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzt: java.lang.String zzfi(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_14[0] = "MD5", method='<org.vudroid.core.utils.MD5StringUtil: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.ads.internal.util.client.zza: java.lang.String zzaH(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_154[0] = "SHA", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getShaDigest()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzn: void zziJ()>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.tagmanager.zzap: com.google.android.gms.internal.zzag$zza zzP(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzaj: long zzr(byte[])>'}, UnitContainer{unit=$fakeLocal_1765[0] = "MD5", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] getString(java.lang.String[],int,int,int[],float[],byte[])>'}, UnitContainer{unit=$fakeLocal_101[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzbg: java.security.MessageDigest zzcL()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [73, 69, 15, -59]
[UnitContainer{unit=$r0[2] = 73, method='<com.citrussuite.androidengine.JavaCallbacks: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 69, method='<com.citrussuite.androidengine.JavaCallbacks: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 15, method='<com.citrussuite.androidengine.JavaCallbacks: void <clinit>()>'}, UnitContainer{unit=$r0[0] = -59, method='<com.citrussuite.androidengine.JavaCallbacks: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [20, 20]
[UnitContainer{unit=$fakeLocal_1742[1] = 20, method='<com.citrussuite.androidengine.JavaCallbacks: byte[] getString(java.lang.String[],int,int,int[],float[],byte[])>'}, UnitContainer{unit=$fakeLocal_2122[1] = 20, method='<com.citrussuite.androidengine.JavaCallbacks: int uploadStrings(java.lang.String[],int,int,int[],float[],byte[])>'}]
=======================================
Analyzing APK: com.resmed.airmini.apk
*** Base package: com.resmed.airmini
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.resmed.mon.ipc.rmon.a.e: java.util.List a(float,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.ag$4: void a()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.a.a.a.b.d
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://"]
[UnitContainer{unit=$r4 = "http://", method='<com.flurry.sdk.dh: void d()>'}]
=======================================
Analyzing APK: com.resonea.drowzle.apk
*** Base package: com.resonea.drowzle
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[],long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int[],long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.upstream.cache.CachedContentIndex: void writeFile()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String a(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<com.onesignal.OneSignalStateSynchronizer: void a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest d()>'}]
=======================================
Analyzing APK: com.roche.acconnect.apk
*** Base package: com.roche.acconnect
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/PKCS5Padding"]
[UnitContainer{unit=$fakeLocal_118[0] = "AES/ECB/PKCS5Padding", method='<com.roche.bluenileupgraderandroidcomponent.Encrypter: javax.crypto.Cipher setupCipher(java.security.Key)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.internal.client.zzm: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.analytics.internal.zzf,java.lang.String,com.google.android.gms.analytics.internal.zzad)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzcc: com.google.android.gms.internal.zzag$zza zzI(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzaj: void zzc(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzaf$zzd)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA1", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.tagmanager.zzap: com.google.android.gms.internal.zzag$zza zzI(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzak: java.lang.String zza(byte[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_66[0] = "SHA1", method='<com.roche.bluenileupgraderandroidcomponent.Encrypter: char[] generatePassword(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.analytics.internal.zza: java.lang.String zzaY(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzbl: java.security.MessageDigest zzcy()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzid: java.lang.String zzgD()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.ads.internal.util.client.zza: java.lang.String zzaE(java.lang.String)>'}]
=======================================
Analyzing APK: com.rubytribe.skinvision.ac.apk
*** Base package: com.rubytribe.skinvision.ac
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.LeanplumPushService: void showNotification(android.content.Context,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.internal.WebSocketClient: java.lang.String createSecret()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.internal.HybiParser: byte[] frame(java.lang.Object,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.leanplum.LeanplumNotificationHelper: int verifyJobId(java.util.List,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.c.w: void <init>(f.b.a.a.n.c.o.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.a.a.b.b.h: void <clinit>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of f.b.a.a.n.e.h
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<f.b.a.a.n.e.h: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<c.h.a.a.b.y.g: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<f.b.a.a.n.b.i: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.leanplum.internal.FileManager: com.leanplum.internal.FileManager$HashResults fileMD5HashCreateWithPath(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<g.f: g.f h()>'}, UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<com.zendesk.util.DigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.leanplum.internal.Util: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<g.f: g.f g()>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.q: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<f.b.a.a.n.b.i: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<f.a.a.b$d: void <init>(f.a.a.b)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["L3@nP1Vm"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["L3@nP1Vm", "__l3anplum__iv__"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}, UnitContainer{unit=$r10 = "__l3anplum__iv__", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["L3@nP1Vm"]
[UnitContainer{unit=$r10 = "L3@nP1Vm", method='<com.leanplum.internal.AESCrypt: byte[] performCryptOperation(int,java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_5[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_22[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_5[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_12[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.sandstonediagnostics.v2.trak.apk
*** Base package: com.sandstonediagnostics.v2.trak
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NOPADDING", "AES/ECB/NOPADDING"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.yg: void <init>(byte[],int)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.yg: byte[] a(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.ahc: java.util.Random c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.maps.android.a.b.n: int b(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi25_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi24_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT131R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT571K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT283K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi30_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi27_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT193R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi25_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT409R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECCurve$F2m: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi28_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.ads.internal.q.a.o: java.lang.String a(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT233R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT113R2Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.ads.internal.q.d.a: void a(android.content.Context,java.lang.String,int,java.lang.Exception)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi30_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement g()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT163K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.raw.Mod: int[] a(int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.h.iu: long g()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi26_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT131R2Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT571R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT283R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi27_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT163R2Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT193R2Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi28_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.cg: void a(java.lang.Throwable,java.lang.String,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi24_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT113R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <versioned.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi26_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <host.exp.exponent.f.j: int a(java.lang.Integer)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT239K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT233K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi29_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT163R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.azb: void a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <versioned.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT409K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi29_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.Promise)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.b.a.a.p: void <init>(io.b.a.a.a.c.a.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <host.exp.exponent.notifications.e$2: void a(android.graphics.Bitmap)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.b.a.a.a.e.h
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA1", "SHA1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_41[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.alu: java.security.MessageDigest a()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.o: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA1", method='<io.b.a.a.a.e.h: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_276[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_380[0] = "MD5", method='<io.a.a.b$a: void <init>(io.a.a.b)>'}, UnitContainer{unit=$fakeLocal_287[1] = "SHA-1", method='<io.b.a.a.a.b.i: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.agl: void run()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.mi: java.lang.String c()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.h.u: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.facebook.ads.internal.q.a.g: java.lang.String b(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_194[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_753[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_205[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<com.facebook.ads.internal.p.a.o: void a(javax.net.ssl.HttpsURLConnection,java.util.Set,java.util.Set)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.a: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_32[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_216[0] = "SHA-1", method='<okhttp3.internal.Util: c.f sha1(c.f)>'}, UnitContainer{unit=$fakeLocal_59[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_272[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.ads.internal.q.a.i: java.lang.String a(java.io.File)>'}, UnitContainer{unit=$fakeLocal_280[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_96[0] = "SHA-1", method='<com.stripe.android.u: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_300[0] = "SHA-1", method='<io.b.a.a.a.b.i: java.lang.String a(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.z: java.lang.String b()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.h.iu: java.security.MessageDigest i()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.facebook.ads.internal.o.c: void a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_98[0] = "MD5", method='<org.apache.a.b.b.a: java.security.MessageDigest a()>'}, UnitContainer{unit=$fakeLocal_123[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<expolib_v1.b.f: expolib_v1.b.f c()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.mi: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_280[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.ads.internal.p.b.m: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<expolib_v1.b.f: expolib_v1.b.f d()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [2, 4, "1521499837408", 3]
[UnitContainer{unit=$b4 = 2, method='<com.google.android.gms.internal.ads.yp: com.google.android.gms.internal.ads.yq a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.yu)>'}, UnitContainer{unit=$r24[0] = 4, method='<com.google.android.gms.internal.ads.yp: com.google.android.gms.internal.ads.yq a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.yu)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "1521499837408", method='<com.google.android.gms.internal.ads.ahz: com.google.android.gms.internal.ads.ahz a(android.content.Context,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=$b4 = 3, method='<com.google.android.gms.internal.ads.yp: com.google.android.gms.internal.ads.yq a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.yu)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$r2, virtualinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: org.spongycastle.asn1.ASN1Primitive g()>(), virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), $r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Vector a>, $i0, (org.spongycastle.asn1.pkcs.PKCS12PBEParams) $r1, i2 << 8, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams a>, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.ASN1OctetString b>, new org.spongycastle.asn1.IndefiniteLengthInputStream, $r3, null, r1, (javax.crypto.SecretKey) $r3, @parameter0: java.lang.Object, @parameter0: java.security.Key, $r3, r1, virtualinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: org.spongycastle.asn1.ASN1Primitive g()>(), (org.spongycastle.asn1.ASN1Encodable) $r0, $r1, @this: org.spongycastle.jcajce.PBKDF1KeyWithParameters, @this: org.spongycastle.asn1.x509.AlgorithmIdentifier, (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r2, i3 << 0, @this: org.spongycastle.asn1.pkcs.SafeBag, (org.spongycastle.asn1.pkcs.EncryptedData) $r1, new org.spongycastle.asn1.pkcs.PBKDF2Params, null, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger b()>(), @this: org.spongycastle.asn1.pkcs.PBES2Parameters, r1, $i1, null, virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable b()>(), virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set a(java.lang.Object)>($r2), interfaceinvoke $r5.<org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey a(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r0), $r2, (org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) $r4, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), new org.spongycastle.asn1.pkcs.AuthenticatedSafe, (org.spongycastle.jcajce.PBKDF1KeyWithParameters) $r11, new org.spongycastle.asn1.x509.AlgorithmIdentifier, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), @this: org.spongycastle.asn1.ASN1Set, new org.spongycastle.asn1.ASN1StreamParser, $r3, $r10, specialinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), r1, @parameter2: int, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $r3, $r9, specialinvoke $r9.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), @parameter0: java.lang.Object, new org.spongycastle.asn1.pkcs.PBES2Parameters, $i1, (org.spongycastle.asn1.ASN1Sequence) $r2, @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, $i0, (org.spongycastle.asn1.ASN1Set) $r0, specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher a(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, interfaceinvoke $r13.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher a(java.lang.String)>($r14), new java.io.DataInputStream, @parameter0: java.lang.Object, (javax.crypto.SecretKey) $r1, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), $i1, $r0.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: org.spongycastle.asn1.pkcs.ContentInfo[] a>, @this: org.spongycastle.asn1.pkcs.MacData, $r1, @this: org.spongycastle.asn1.pkcs.KeyDerivationFunc, virtualinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: org.spongycastle.asn1.ASN1Primitive g()>(), new org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, $r30[$i0], (org.spongycastle.jcajce.PKCS12Key) $r2, $r3, $r7, specialinvoke $r7.<org.spongycastle.asn1.BERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $r11, @parameter0: java.lang.Object, virtualinvoke $r9.<org.spongycastle.asn1.DERExternalParser: org.spongycastle.asn1.ASN1Primitive g()>(), $i1 & 32, virtualinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: org.spongycastle.asn1.ASN1Primitive g()>(), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), r0.<java.io.DataInputStream: java.io.InputStream in>, $r2, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), @parameter4: byte[], $r0.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1Encodable bG>, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, null, $i0 & 1023, @this: org.spongycastle.jcajce.PKCS12KeyWithParameters, $r0.<org.spongycastle.asn1.pkcs.KeyDerivationFunc: org.spongycastle.asn1.x509.AlgorithmIdentifier a>, @parameter0: java.lang.Object, @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r1.<java.io.InputStream: int read()>(), $r1, $i0, @this: org.spongycastle.asn1.pkcs.PKCS12PBEParams, virtualinvoke $r13.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), new org.spongycastle.asn1.DERExternalParser, (org.spongycastle.asn1.pkcs.SafeBag) $r1, r1, i0, $r1, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r1, (javax.crypto.interfaces.PBEKey) $r1, $i0, $r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int a>, @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher, $r3.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom b>, @parameter0: byte[], $r0.<org.spongycastle.asn1.pkcs.MacData: java.math.BigInteger c>, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), r0.<java.io.DataInputStream: java.io.InputStream in>, r1, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedData: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher a(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>($b0, $r3, $r2), $r3, r1, new org.spongycastle.asn1.ASN1InputStream, $i0, @parameter1: char[], $r2, $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector a>, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, @this: org.spongycastle.asn1.ASN1Sequence, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, new org.spongycastle.asn1.pkcs.EncryptedData, $s5, (org.spongycastle.asn1.ASN1Set) $r2, $r2, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int b()>(), lengthof $r6, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper bG>, @this: org.spongycastle.asn1.pkcs.PBKDF2Params, $r0.<org.spongycastle.jcajce.PKCS12KeyWithParameters: int b>, $r2, -1, (org.spongycastle.jcajce.PKCS12KeyWithParameters) $r7, new org.spongycastle.asn1.BERSequenceParser, $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable b>, $i12 + $i11, $i0, $r3, $i10 + $i9, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r0.<org.spongycastle.asn1.ASN1OctetString: byte[] a>, $i1, $r2, @parameter2: org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.ContentInfo bF>, $r0, virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), @this: org.spongycastle.asn1.pkcs.MacData, $r0.<org.spongycastle.asn1.x509.DigestInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier b>, $r0.<org.spongycastle.asn1.ASN1InputStream: int a>, @this: org.spongycastle.asn1.pkcs.Pfx, null, $r2, null, virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: byte[] b()>(), $i1, null, @this: org.spongycastle.asn1.x509.DigestInfo, virtualinvoke $r7.<org.spongycastle.asn1.BERSetParser: org.spongycastle.asn1.ASN1Primitive g()>(), @this: org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, $r6, @this: org.spongycastle.asn1.pkcs.ContentInfo, $r14, $r3, $r8, specialinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), $i0, $r0, (org.spongycastle.asn1.ASN1Sequence) $r37, $r4, i0, staticinvoke <org.spongycastle.asn1.ASN1InputStream: int a(java.io.InputStream,int)>($r0, $i1), $r14, (org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r33, @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier, (org.spongycastle.asn1.ASN1Encodable) $r2, @this: org.spongycastle.asn1.ASN1Set, r1, $i0, $i0, (javax.crypto.interfaces.PBEKey) $r21, $i0, $r3, $r0.<org.spongycastle.asn1.pkcs.MacData: org.spongycastle.asn1.x509.DigestInfo a>, new org.spongycastle.asn1.BERTaggedObjectParser, $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector a>, @parameter0: java.lang.Object, @parameter0: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r4.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String b()>(), 1024, $r0.<org.spongycastle.asn1.pkcs.PBKDF2Params: org.spongycastle.asn1.ASN1Integer c>, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBKDF2Params: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @this: org.spongycastle.asn1.ASN1InputStream, $i0, 1, $i2, $r3, $r6, specialinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), (org.spongycastle.asn1.ASN1OctetString) $r17, virtualinvoke $r2.<java.io.InputStream: int read()>(), new org.spongycastle.asn1.BERSetParser, r1, staticinvoke <org.spongycastle.util.encoders.Hex: byte[] a(byte[],int,int)>($r0, 0, $i0), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.Pfx: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier a()>(), (org.spongycastle.asn1.ASN1Sequence) $r8, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), (org.spongycastle.asn1.ASN1Sequence) $r8, $r2, (org.spongycastle.asn1.pkcs.PBKDF2Params) $r1, $r5, $i0, $i1, $i1, $b4 & 255, r0.<java.io.DataInputStream: java.io.InputStream in>, $r0, $i0, $r2, specialinvoke $r2.<org.spongycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier a>, staticinvoke <org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.x509.AlgorithmIdentifier a(java.lang.Object)>($r2), @parameter2: int, @parameter0: java.lang.Object, @parameter0: char[], new org.spongycastle.asn1.BEROctetStringParser, (org.spongycastle.asn1.ASN1Encodable) $r0, $i0, $i0 + 1024, interfaceinvoke $r11.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher a(java.lang.String)>($r12), $r2, @parameter1: java.security.Key, $i0, @parameter1: java.security.Key, virtualinvoke r0.<java.util.Random: int next(int)>(32), @parameter0: java.lang.Object, @parameter1: java.security.Key, $i0, $i0, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), null, new org.spongycastle.jcajce.PKCS12Key, (org.spongycastle.asn1.ASN1Set) $r17, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive a(int,int,int)>($i1, $i2, $i0), specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), r55, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger b()>(), (org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, null, $r2, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r2), @this: org.spongycastle.asn1.x509.DigestInfo, i0, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.SafeBag: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3), @this: org.spongycastle.asn1.pkcs.AuthenticatedSafe, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), (org.spongycastle.asn1.ASN1Sequence) $r0, new org.spongycastle.asn1.pkcs.Pfx, null, i1 << 16, (java.security.PrivateKey) $r15, virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger a()>(), i0 << 24, (org.spongycastle.asn1.ASN1Sequence) $r37, (org.spongycastle.asn1.ASN1OctetString) $r8, @parameter1: java.security.Key, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), $r3, $r2, $i0, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), virtualinvoke $r3.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive d()>(), $i1, null, null, new java.io.BufferedInputStream, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r2), @this: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, $i13, null, @parameter0: java.lang.Object, (org.spongycastle.asn1.pkcs.AuthenticatedSafe) $r1, @parameter1: java.security.Key, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int read()>(), r1, virtualinvoke $r3.<java.io.InputStream: int read()>(), $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Encodable b>, $r3, r54, (org.spongycastle.jcajce.PBKDF1Key) $r1, @this: org.spongycastle.asn1.pkcs.Pfx, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), $r1, @parameter4: int, (org.spongycastle.asn1.pkcs.Pfx) $r1, $r38, (org.spongycastle.asn1.ASN1Encodable) $r2, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.MacData bG>, $r9, $i2, $r3, $r4, specialinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.spongycastle.asn1.ASN1StreamParser)>($i2, $r3), $r16, staticinvoke <org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams a(java.lang.Object)>($r6), $r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int m>, @parameter0: byte[], $i1, <org.spongycastle.jce.provider.BouncyCastleProvider: java.util.Map c>, $r0.<org.spongycastle.jcajce.PBKDF1KeyWithParameters: int b>, @this: org.spongycastle.asn1.pkcs.SafeBag, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive e()>(), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBES2Parameters: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r14, @parameter0: java.lang.Object, staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString a(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec h>, r1, $r0.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.ASN1Integer a>, r1, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Set c>, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive e()>(), new org.spongycastle.asn1.BERApplicationSpecificParser, @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.spongycastle.asn1.pkcs.PBKDF2Params a>, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper bG>, new org.spongycastle.asn1.ASN1InputStream, $r14, (org.spongycastle.asn1.pkcs.PBES2Parameters) $r1, $r2, new org.spongycastle.asn1.pkcs.SafeBag, r1, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, @this: org.spongycastle.asn1.ASN1OctetString, (org.spongycastle.asn1.ASN1Primitive) $r17, (javax.crypto.interfaces.PBEKey) $r6, @parameter1: java.security.Key, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r1[$i2], $r1, r1, $r0.<org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.KeyDerivationFunc bF>, $r0, $r0.<org.spongycastle.asn1.x509.DigestInfo: byte[] a>, $i0, r0.<java.io.DataInputStream: java.io.InputStream in>, $r1, virtualinvoke $r2.<org.spongycastle.asn1.ASN1OctetString: byte[] c()>()]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.h.bn: com.google.android.gms.internal.h.bn a(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.h.bm: void <clinit>()>'}]
=======================================
Analyzing APK: com.sanofi.fr.diabeoprod.apk
*** Base package: com.sanofi.fr.diabeoprod
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES"]
[UnitContainer{unit=$fakeLocal_531[0] = "AES", method='<com.voluntis.medpassport.database.DatabaseTable: com.voluntis.medpassport.database.DatabaseRecord uncipherRecord(byte[])>'}, UnitContainer{unit=$fakeLocal_474[0] = "AES", method='<com.voluntis.medpassport.database.DatabaseTable: byte[] cipherRecord(com.voluntis.medpassport.database.DatabaseRecord)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.sanofi.fr.diabeoprod.utils.HttpHelper: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.sanofi.fr.diabeoprod.utils.CryptoHelper: int getNextRandInt()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.openudid.OpenUDID_manager: void <init>(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.sanofi.fr.diabeoprod.utils.StringUtils: java.lang.String getRandomChar(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.voluntis.medpassport.database.DatabaseTable: void <clinit>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_453[0] = "SHA-1", method='<com.voluntis.medpassport.database.DatabaseTable: byte[] cipherRecord(com.voluntis.medpassport.database.DatabaseRecord)>'}, UnitContainer{unit=$fakeLocal_121[0] = "SHA-1", method='<com.sanofi.fr.diabeoprod.utils.SecurePreferences: java.lang.String hashKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_402[0] = "SHA-1", method='<ly.count.android.sdk.ConnectionProcessor: java.lang.String sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_513[0] = "SHA-1", method='<com.voluntis.medpassport.database.DatabaseTable: com.voluntis.medpassport.database.DatabaseRecord uncipherRecord(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["pump_flow_reminder", "basalAutoAdaptationInitialTreatmentSynchroId", "pump_flow_reminder", "basalAutoAdaptationInitialTreatmentSynchroId", "pref_email", "PotentialSynchroId", "blockingTimeLeft", "basalAutoAdaptationSummaryToDisplay", "basalAutoAdaptationSummaryToDisplay", "basalAutoAdaptationDone", "application_already_launched", "PotentialSynchroId", "pref_password", "update_datetime_message", "panelSummary", "PotentialSynchroId", "license_expiration_alert_three_months", "license_expiration_alert_one_month", "basalAutoAdaptationDone", "preferencesDeviceId", "update_build_number", "basalAutoAdaptationDone", "diabeo_background_datetime", "lastPreloadPumpFlowDate", "basalAutoAdaptationSummaryToDisplay", "basalAutoAdaptationSummaryToDisplay", "PotentialSynchroId", "license_expiration_alert_two_weeks", "pump_flow_reminder", "update_build_number", "update_marketing_number", "basalAutoAdaptationDone", "basalAutoAdaptationSummaryToDisplay", "update_marketing_number", "basalAutoAdaptationInitialTreatmentSynchroId", "preferencesDeviceId", "lastPreloadPumpFlowDate", "pump_flow_reminder", "basalAutoAdaptationDone", "update_datetime_message", "pump_flow_reminder", "basalAutoAdaptationDone", 0, "basalAutoAdaptationInitialTreatmentSynchroId", "preferencesDeviceId", "update_build_number", "diabeo_background_datetime", "numberOfAttempts", "pref_email", "pref_password", "application_already_launched", "PotentialSynchroId", "application_already_launched", "license_expiration_alert_one_week"]
[UnitContainer{unit=$fakeLocal_1028[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushPumpFlowUpdateReminder(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_496[0] = "basalAutoAdaptationInitialTreatmentSynchroId", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$2: void onDismiss(android.content.DialogInterface)>'}, UnitContainer{unit=$fakeLocal_906[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.treatment.profile.TreatmentAbstract: void acceptOrDenyTreatmentProfile(int)>'}, UnitContainer{unit=$fakeLocal_573[0] = "basalAutoAdaptationInitialTreatmentSynchroId", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$3: void onClick(android.content.DialogInterface,int)>'}, UnitContainer{unit=$fakeLocal_81[0] = "pref_email", method='<com.sanofi.fr.diabeoprod.activities.SplashScreenActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_497[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.synchronization.SyncStepTables: void setCollisionStateIfNecessary(com.voluntis.medpassport.database.DatabaseTable,int,int)>'}, UnitContainer{unit=$fakeLocal_391[0] = "blockingTimeLeft", method='<com.sanofi.fr.diabeoprod.fragments.PinCodeFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_554[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1: void onLoadFinished(android.support.v4.content.Loader,com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result)>'}, UnitContainer{unit=$fakeLocal_378[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_96[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader: com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result loadInBackground()>'}, UnitContainer{unit=$fakeLocal_606[0] = "application_already_launched", method='<com.sanofi.fr.diabeoprod.Diabeo: boolean checkIfPinCodeIsRequired(android.app.Activity,com.sanofi.fr.diabeoprod.utils.SecurePreferences,com.voluntis.medpassport.database.UserPreferenceRecord)>'}, UnitContainer{unit=$fakeLocal_516[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.synchronization.SyncStepTables: void setCollisionStateIfNecessary(com.voluntis.medpassport.database.DatabaseTable,int,int)>'}, UnitContainer{unit=$fakeLocal_592[0] = "pref_password", method='<com.sanofi.fr.diabeoprod.activities.AuthenticationActivity: void initializeUi()>'}, UnitContainer{unit=$fakeLocal_50[0] = "update_datetime_message", method='<com.sanofi.fr.diabeoprod.utils.UpdateApplicationManager: boolean isMessageOfApplicationUpdateCanBeDisplayed()>'}, UnitContainer{unit=$fakeLocal_435[0] = "panelSummary", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_914[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.database.TreatmentTable: com.voluntis.medpassport.database.TreatmentRecord denyTreatment()>'}, UnitContainer{unit=$fakeLocal_1440[0] = "license_expiration_alert_three_months", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushLicenseExpirationMessage(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_1435[0] = "license_expiration_alert_one_month", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushLicenseExpirationMessage(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_545[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1: void onLoadFinished(android.support.v4.content.Loader,com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result)>'}, UnitContainer{unit=$fakeLocal_29[0] = "preferencesDeviceId", method='<com.sanofi.fr.diabeoprod.utils.Network: java.lang.String getDeviceId()>'}, UnitContainer{unit=$fakeLocal_1135[0] = "update_build_number", method='<com.sanofi.fr.diabeoprod.Diabeo: void startUpApplication(android.app.Activity,boolean,java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_428[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_583[0] = "diabeo_background_datetime", method='<com.sanofi.fr.diabeoprod.Diabeo: boolean checkIfPinCodeIsRequired(android.app.Activity,com.sanofi.fr.diabeoprod.utils.SecurePreferences,com.voluntis.medpassport.database.UserPreferenceRecord)>'}, UnitContainer{unit=$fakeLocal_656[0] = "lastPreloadPumpFlowDate", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment: void checkForPumpFlows()>'}, UnitContainer{unit=$fakeLocal_396[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_383[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_543[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.synchronization.SyncStepTables: void setCollisionStateIfNecessary(com.voluntis.medpassport.database.DatabaseTable,int,int)>'}, UnitContainer{unit=$fakeLocal_1430[0] = "license_expiration_alert_two_weeks", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushLicenseExpirationMessage(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_1890[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.utils.logic.BasalAutoAdaptation: com.sanofi.fr.diabeoprod.utils.ui.Panel getAdaptationSummaryPanel()>'}, UnitContainer{unit=$fakeLocal_32[0] = "update_build_number", method='<com.sanofi.fr.diabeoprod.utils.UpdateApplicationManager: boolean isUpdateAvailable()>'}, UnitContainer{unit=$fakeLocal_265[0] = "update_marketing_number", method='<com.voluntis.medpassport.synchronization.SyncStepAuthenticate: com.voluntis.medpassport.synchronization.ResultStepAuthenticate execute()>'}, UnitContainer{unit=$fakeLocal_89[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader: com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result loadInBackground()>'}, UnitContainer{unit=$fakeLocal_431[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_396[0] = "update_marketing_number", method='<com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper: void showAboutDialog()>'}, UnitContainer{unit=$fakeLocal_99[0] = "basalAutoAdaptationInitialTreatmentSynchroId", method='<com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader: com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result loadInBackground()>'}, UnitContainer{unit=$fakeLocal_79[0] = "preferencesDeviceId", method='<com.sanofi.fr.diabeoprod.utils.ResetTask: java.lang.Boolean doInBackground(com.voluntis.medpassport.database.DatabaseTable[])>'}, UnitContainer{unit=$fakeLocal_772[0] = "lastPreloadPumpFlowDate", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment: void onClick(android.content.DialogInterface,int)>'}, UnitContainer{unit=$fakeLocal_494[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$2: void onDismiss(android.content.DialogInterface)>'}, UnitContainer{unit=$fakeLocal_551[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1: void onLoadFinished(android.support.v4.content.Loader,com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result)>'}, UnitContainer{unit=$fakeLocal_379[0] = "update_datetime_message", method='<com.sanofi.fr.diabeoprod.Diabeo$2: void onClick(android.content.DialogInterface,int)>'}, UnitContainer{unit=$fakeLocal_571[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$3: void onClick(android.content.DialogInterface,int)>'}, UnitContainer{unit=$fakeLocal_476[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$2: void onDismiss(android.content.DialogInterface)>'}, UnitContainer{unit=$b4 = 0, method='<com.sanofi.fr.diabeoprod.utils.SecurePreferences: byte[] buildKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_98[0] = "basalAutoAdaptationInitialTreatmentSynchroId", method='<com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader: com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result loadInBackground()>'}, UnitContainer{unit=$fakeLocal_34[0] = "preferencesDeviceId", method='<com.sanofi.fr.diabeoprod.utils.Network: java.lang.String getDeviceId()>'}, UnitContainer{unit=$fakeLocal_263[0] = "update_build_number", method='<com.voluntis.medpassport.synchronization.SyncStepAuthenticate: com.voluntis.medpassport.synchronization.ResultStepAuthenticate execute()>'}, UnitContainer{unit=$fakeLocal_1670[0] = "diabeo_background_datetime", method='<com.sanofi.fr.diabeoprod.Diabeo$5: void run()>'}, UnitContainer{unit=$fakeLocal_392[0] = "numberOfAttempts", method='<com.sanofi.fr.diabeoprod.fragments.PinCodeFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_591[0] = "pref_email", method='<com.sanofi.fr.diabeoprod.activities.AuthenticationActivity: void initializeUi()>'}, UnitContainer{unit=$fakeLocal_82[0] = "pref_password", method='<com.sanofi.fr.diabeoprod.activities.SplashScreenActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_85[0] = "application_already_launched", method='<com.sanofi.fr.diabeoprod.activities.SuggestCodeActivity: void onActivityResult(int,int,android.content.Intent)>'}, UnitContainer{unit=$fakeLocal_849[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.database.TreatmentTable: com.voluntis.medpassport.database.TreatmentRecord acceptTreatment(boolean)>'}, UnitContainer{unit=$fakeLocal_967[0] = "application_already_launched", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushCoachingAlert(android.content.Context,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_1425[0] = "license_expiration_alert_one_week", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushLicenseExpirationMessage(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["pump_flow_reminder", "basalAutoAdaptationInitialTreatmentSynchroId", "pump_flow_reminder", "basalAutoAdaptationInitialTreatmentSynchroId", "pref_email", "PotentialSynchroId", "blockingTimeLeft", "basalAutoAdaptationSummaryToDisplay", "basalAutoAdaptationSummaryToDisplay", "basalAutoAdaptationDone", "application_already_launched", "PotentialSynchroId", "pref_password", "update_datetime_message", "panelSummary", "PotentialSynchroId", "license_expiration_alert_three_months", "license_expiration_alert_one_month", "basalAutoAdaptationDone", "preferencesDeviceId", "update_build_number", "basalAutoAdaptationDone", "diabeo_background_datetime", "lastPreloadPumpFlowDate", "basalAutoAdaptationSummaryToDisplay", "basalAutoAdaptationSummaryToDisplay", "PotentialSynchroId", "license_expiration_alert_two_weeks", "pump_flow_reminder", "update_build_number", "update_marketing_number", "basalAutoAdaptationDone", "basalAutoAdaptationSummaryToDisplay", "update_marketing_number", "basalAutoAdaptationInitialTreatmentSynchroId", "preferencesDeviceId", "lastPreloadPumpFlowDate", "pump_flow_reminder", "basalAutoAdaptationDone", "update_datetime_message", "pump_flow_reminder", "basalAutoAdaptationDone", 0, "basalAutoAdaptationInitialTreatmentSynchroId", "preferencesDeviceId", "update_build_number", "diabeo_background_datetime", "numberOfAttempts", "pref_email", "pref_password", "application_already_launched", "PotentialSynchroId", "application_already_launched", "license_expiration_alert_one_week"]
[UnitContainer{unit=$fakeLocal_1028[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushPumpFlowUpdateReminder(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_496[0] = "basalAutoAdaptationInitialTreatmentSynchroId", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$2: void onDismiss(android.content.DialogInterface)>'}, UnitContainer{unit=$fakeLocal_906[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.treatment.profile.TreatmentAbstract: void acceptOrDenyTreatmentProfile(int)>'}, UnitContainer{unit=$fakeLocal_573[0] = "basalAutoAdaptationInitialTreatmentSynchroId", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$3: void onClick(android.content.DialogInterface,int)>'}, UnitContainer{unit=$fakeLocal_81[0] = "pref_email", method='<com.sanofi.fr.diabeoprod.activities.SplashScreenActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_497[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.synchronization.SyncStepTables: void setCollisionStateIfNecessary(com.voluntis.medpassport.database.DatabaseTable,int,int)>'}, UnitContainer{unit=$fakeLocal_391[0] = "blockingTimeLeft", method='<com.sanofi.fr.diabeoprod.fragments.PinCodeFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_554[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1: void onLoadFinished(android.support.v4.content.Loader,com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result)>'}, UnitContainer{unit=$fakeLocal_378[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_96[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader: com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result loadInBackground()>'}, UnitContainer{unit=$fakeLocal_606[0] = "application_already_launched", method='<com.sanofi.fr.diabeoprod.Diabeo: boolean checkIfPinCodeIsRequired(android.app.Activity,com.sanofi.fr.diabeoprod.utils.SecurePreferences,com.voluntis.medpassport.database.UserPreferenceRecord)>'}, UnitContainer{unit=$fakeLocal_516[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.synchronization.SyncStepTables: void setCollisionStateIfNecessary(com.voluntis.medpassport.database.DatabaseTable,int,int)>'}, UnitContainer{unit=$fakeLocal_592[0] = "pref_password", method='<com.sanofi.fr.diabeoprod.activities.AuthenticationActivity: void initializeUi()>'}, UnitContainer{unit=$fakeLocal_50[0] = "update_datetime_message", method='<com.sanofi.fr.diabeoprod.utils.UpdateApplicationManager: boolean isMessageOfApplicationUpdateCanBeDisplayed()>'}, UnitContainer{unit=$fakeLocal_435[0] = "panelSummary", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_914[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.database.TreatmentTable: com.voluntis.medpassport.database.TreatmentRecord denyTreatment()>'}, UnitContainer{unit=$fakeLocal_1440[0] = "license_expiration_alert_three_months", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushLicenseExpirationMessage(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_1435[0] = "license_expiration_alert_one_month", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushLicenseExpirationMessage(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_545[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1: void onLoadFinished(android.support.v4.content.Loader,com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result)>'}, UnitContainer{unit=$fakeLocal_29[0] = "preferencesDeviceId", method='<com.sanofi.fr.diabeoprod.utils.Network: java.lang.String getDeviceId()>'}, UnitContainer{unit=$fakeLocal_1135[0] = "update_build_number", method='<com.sanofi.fr.diabeoprod.Diabeo: void startUpApplication(android.app.Activity,boolean,java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_428[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_583[0] = "diabeo_background_datetime", method='<com.sanofi.fr.diabeoprod.Diabeo: boolean checkIfPinCodeIsRequired(android.app.Activity,com.sanofi.fr.diabeoprod.utils.SecurePreferences,com.voluntis.medpassport.database.UserPreferenceRecord)>'}, UnitContainer{unit=$fakeLocal_656[0] = "lastPreloadPumpFlowDate", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment: void checkForPumpFlows()>'}, UnitContainer{unit=$fakeLocal_396[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_383[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_543[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.synchronization.SyncStepTables: void setCollisionStateIfNecessary(com.voluntis.medpassport.database.DatabaseTable,int,int)>'}, UnitContainer{unit=$fakeLocal_1430[0] = "license_expiration_alert_two_weeks", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushLicenseExpirationMessage(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_1890[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.utils.logic.BasalAutoAdaptation: com.sanofi.fr.diabeoprod.utils.ui.Panel getAdaptationSummaryPanel()>'}, UnitContainer{unit=$fakeLocal_32[0] = "update_build_number", method='<com.sanofi.fr.diabeoprod.utils.UpdateApplicationManager: boolean isUpdateAvailable()>'}, UnitContainer{unit=$fakeLocal_265[0] = "update_marketing_number", method='<com.voluntis.medpassport.synchronization.SyncStepAuthenticate: com.voluntis.medpassport.synchronization.ResultStepAuthenticate execute()>'}, UnitContainer{unit=$fakeLocal_89[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader: com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result loadInBackground()>'}, UnitContainer{unit=$fakeLocal_431[0] = "basalAutoAdaptationSummaryToDisplay", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$1: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_396[0] = "update_marketing_number", method='<com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper: void showAboutDialog()>'}, UnitContainer{unit=$fakeLocal_99[0] = "basalAutoAdaptationInitialTreatmentSynchroId", method='<com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader: com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result loadInBackground()>'}, UnitContainer{unit=$fakeLocal_79[0] = "preferencesDeviceId", method='<com.sanofi.fr.diabeoprod.utils.ResetTask: java.lang.Boolean doInBackground(com.voluntis.medpassport.database.DatabaseTable[])>'}, UnitContainer{unit=$fakeLocal_772[0] = "lastPreloadPumpFlowDate", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment: void onClick(android.content.DialogInterface,int)>'}, UnitContainer{unit=$fakeLocal_494[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$2: void onDismiss(android.content.DialogInterface)>'}, UnitContainer{unit=$fakeLocal_551[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1: void onLoadFinished(android.support.v4.content.Loader,com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result)>'}, UnitContainer{unit=$fakeLocal_379[0] = "update_datetime_message", method='<com.sanofi.fr.diabeoprod.Diabeo$2: void onClick(android.content.DialogInterface,int)>'}, UnitContainer{unit=$fakeLocal_571[0] = "pump_flow_reminder", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$3: void onClick(android.content.DialogInterface,int)>'}, UnitContainer{unit=$fakeLocal_476[0] = "basalAutoAdaptationDone", method='<com.sanofi.fr.diabeoprod.logbook.LogBookPagerFragment$1$2: void onDismiss(android.content.DialogInterface)>'}, UnitContainer{unit=$b4 = 0, method='<com.sanofi.fr.diabeoprod.utils.SecurePreferences: byte[] buildKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_98[0] = "basalAutoAdaptationInitialTreatmentSynchroId", method='<com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader: com.sanofi.fr.diabeoprod.logbook.BasalAutoAdaptationLoader$Result loadInBackground()>'}, UnitContainer{unit=$fakeLocal_34[0] = "preferencesDeviceId", method='<com.sanofi.fr.diabeoprod.utils.Network: java.lang.String getDeviceId()>'}, UnitContainer{unit=$fakeLocal_263[0] = "update_build_number", method='<com.voluntis.medpassport.synchronization.SyncStepAuthenticate: com.voluntis.medpassport.synchronization.ResultStepAuthenticate execute()>'}, UnitContainer{unit=$fakeLocal_1670[0] = "diabeo_background_datetime", method='<com.sanofi.fr.diabeoprod.Diabeo$5: void run()>'}, UnitContainer{unit=$fakeLocal_392[0] = "numberOfAttempts", method='<com.sanofi.fr.diabeoprod.fragments.PinCodeFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_591[0] = "pref_email", method='<com.sanofi.fr.diabeoprod.activities.AuthenticationActivity: void initializeUi()>'}, UnitContainer{unit=$fakeLocal_82[0] = "pref_password", method='<com.sanofi.fr.diabeoprod.activities.SplashScreenActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_85[0] = "application_already_launched", method='<com.sanofi.fr.diabeoprod.activities.SuggestCodeActivity: void onActivityResult(int,int,android.content.Intent)>'}, UnitContainer{unit=$fakeLocal_849[0] = "PotentialSynchroId", method='<com.voluntis.medpassport.database.TreatmentTable: com.voluntis.medpassport.database.TreatmentRecord acceptTreatment(boolean)>'}, UnitContainer{unit=$fakeLocal_967[0] = "application_already_launched", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushCoachingAlert(android.content.Context,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}, UnitContainer{unit=$fakeLocal_1425[0] = "license_expiration_alert_one_week", method='<com.sanofi.fr.diabeoprod.Diabeo: void pushLicenseExpirationMessage(android.app.Activity,com.sanofi.fr.diabeoprod.utils.ui.AlertDialogHelper)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["Demo2012Inter"]
[UnitContainer{unit=$r7 = "Demo2012Inter", method='<com.sanofi.fr.diabeoprod.utils.HttpHelper: com.voluntis.medpassport.synchronization.HttpUrlConnectionResponse sendRequest(java.net.URI,int,byte[],java.lang.String,boolean)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google.com/books?vid=isbn", "http://www.google.", "http://www.google.com/books?id="]
[UnitContainer{unit=virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://www.google.com/books?vid=isbn"), method='<com.google.zxing.client.android.book.NetworkWorker: void run()>'}, UnitContainer{unit=virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://www.google."), method='<com.google.zxing.client.android.result.supplement.ProductResultInfoRetriever: void retrieveSupplementalInfo()>'}, UnitContainer{unit=virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://www.google.com/books?id="), method='<com.google.zxing.client.android.book.NetworkWorker: void run()>'}]
=======================================
Analyzing APK: com.sanofi.us.MyDoseCoach.android.apk
*** Base package: com.sanofi.us.MyDoseCoach.android
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.greenrobot.greendao.test.DbTest: void <init>(boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bugsee.library.util.q: boolean a(com.bugsee.library.util.q$a,int,int,java.lang.String)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<a.f: a.f d()>'}, UnitContainer{unit=$fakeLocal_196[0] = "MD5", method='<okhttp3copy.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_235[0] = "SHA-1", method='<com.bugsee.library.data.CrashInfo: java.lang.String getCrashSignature(com.bugsee.library.data.CrashInfo$ExceptionInfo)>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA-1", method='<okiocopy.ByteString: okiocopy.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_110[0] = "MD5", method='<okiocopy.ByteString: okiocopy.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<a.f: a.f c()>'}, UnitContainer{unit=$fakeLocal_18[0] = "SHA-1", method='<com.sanofi.us.MyDoseCoach.android.g.f: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_45[1] = "MD5", method='<okiocopy.HashingSink: okiocopy.HashingSink md5(okiocopy.Sink)>'}, UnitContainer{unit=$fakeLocal_43[1] = "MD5", method='<okiocopy.HashingSource: okiocopy.HashingSource md5(okiocopy.Source)>'}, UnitContainer{unit=$fakeLocal_301[0] = "MD5", method='<com.bugsee.library.task.a.b: java.lang.String a(com.bugsee.library.data.GenerationInfo)>'}, UnitContainer{unit=$fakeLocal_207[0] = "SHA-1", method='<okhttp3copy.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_218[0] = "SHA-1", method='<okhttp3copy.internal.Util: okiocopy.ByteString sha1(okiocopy.ByteString)>'}, UnitContainer{unit=$fakeLocal_1523[0] = "SHA-1", method='<okiocopy.Buffer: okiocopy.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_50[1] = "SHA-1", method='<okiocopy.HashingSink: okiocopy.HashingSink sha1(okiocopy.Sink)>'}, UnitContainer{unit=$fakeLocal_48[1] = "SHA-1", method='<okiocopy.HashingSource: okiocopy.HashingSource sha1(okiocopy.Source)>'}, UnitContainer{unit=$fakeLocal_1518[0] = "MD5", method='<okiocopy.Buffer: okiocopy.ByteString md5()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google.com", "http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_70[0] = "http://www.google.com", method='<com.bugsee.library.network.h: void e()>'}, UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_91[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.scanwell.andy.apk
*** Base package: com.scanwell.andy
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(float[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[],long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int[],long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(double[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(boolean[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(char[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(byte[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(java.lang.Object[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.upstream.cache.CachedContentIndex$LegacyStorage: void <init>(java.io.File,byte[],boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.upstream.cache.SimpleCache: void <init>(java.io.File,com.google.android.exoplayer2.upstream.cache.CacheEvictor,com.google.android.exoplayer2.upstream.cache.CachedContentIndex,com.google.android.exoplayer2.upstream.cache.CacheFileMetadataIndex)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(long[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(short[])>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.sec.android.app.shealth.apk
*** Base package: com.sec.android.app.shealth
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES", "AES", "AES/ECB/NOPADDING", "AES/ECB/NOPADDING"]
[UnitContainer{unit=$fakeLocal_252[3] = "AES", method='<com.samsung.android.app.shealth.tracker.healthrecord.util.HealthRecordSharedPreferenceHelper: byte[] cipherBySecretkey(byte[],byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_1299[0] = "AES", method='<com.samsung.android.service.health.security.KeyOperation: byte[] cipherMessage(byte[],byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_155[0] = "AES", method='<com.samsung.android.sdk.healthdata.privileged.util.FileUtil: javax.crypto.Cipher getCipher(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.zzdty: void <init>(byte[],int)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.zzdty: byte[] zzd(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.service.health.server.push.SyncPolicyObserver: void addPushList(android.content.Context,java.util.Set)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.coaching.ProgramCoachingInfoManager: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.livetracker.SportNotificationManager: android.app.PendingIntent getPendingIntentWithBackStack(boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.heartrate.data.HeartrateTips: java.lang.String getTip(android.content.res.Resources)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dsi.ant.plugins.antplus.pcc.AntPlusWeightScalePcc$UserProfile: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.websync.sync.SyncManagerService: void enableAutoSync()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.appcessory.session.SAPSession: long generateUniqueId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.program.programbase.ProgramNotifier$TodayScheduleRunnable: void run()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.DummyTask: int getIntRandom(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.coaching.CoachingMessageUtils: int getRandom(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sleep.service.SleepIntentService: void onHandleIntent(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.manager.PcServerNotificationManager: com.samsung.android.app.shealth.social.togetherbase.data.NotificationContextInfo createNotificationContextInfo(java.lang.String,com.samsung.android.app.shealth.social.togetherpublic.manager.PcServerNotificationManager$NotificationInfo)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.actionable.manager.TimingControlManager: void onReceiveInternal(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.manager.PcNotificationManager: long getRandomTime(long,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzzp: void zza(java.lang.Thread,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.paypal.android.sdk.onetouch.core.fpti.FptiManager: void trackFpti(com.paypal.android.sdk.onetouch.core.fpti.TrackingPoint,java.lang.String,java.util.Map,com.paypal.android.sdk.onetouch.core.enums.Protocol)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.stress.data.StressTips: java.lang.String getTip(android.content.res.Resources)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.floor.view.fragment.TrackerFloorTrackFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzzp: void zza(java.lang.Throwable,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.receiver.PcNotificationAlarmReceiver: void makePcNotification(com.samsung.android.app.shealth.social.togetherpublic.data.PcItem,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.platform.script.ScriptManager: boolean isAvailableScenario(long,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.platform.script.ScriptManager: java.util.ArrayList lambda$insertPrograms$127$ScriptManager(boolean,java.util.ArrayList,java.util.ArrayList)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.wearablecomm.socket.WearableCommUtil: int getNewSocketId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.water.ui.fragment.TrackerWaterLogFragment: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.service.health.data.disposer.DataDisposer: void setAlarm(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.mindfulness.model.MindNotificationManager: android.app.PendingIntent getPendingIntent()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.onfido.android.sdk.capture.ui.camera.liveness.LivenessChallenge$DIGITS: void <init>(java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.babylon.gatewaymodule.familyaccounts.gww: io.reactivex.Single getFamilyMembers(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.sensor.accessory.service.connection.ble.WeightScaleRequester: void addRequestToRegisterOrUpdateUser(java.util.List,boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.platform.script.ScriptManager: void setRequestAlarm()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.service.health.server.monitor.SamsungAccountSamplingLogger: void init(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.zzaqc,java.lang.String,com.google.android.gms.internal.zzart)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.insight.HomeInsightActivity: java.lang.String getNoInsightDesc()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.program.programbase.ProgramNotifier: void access$200(com.samsung.android.app.shealth.program.programbase.ProgramNotifier,java.lang.String,java.lang.String,android.content.Intent,android.content.Intent,com.samsung.android.app.shealth.program.programbase.Program,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcp: java.util.Random zzad()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.device.WearableIntent: android.content.Intent requestSync()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.food.util.FoodMealMirroringService: void registerJob()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.server.application.WearableServerSyncHelper: void onReceiveOobeStatusChange()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jsoup.helper.DataUtil: java.lang.String mimeBoundary()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.profile.HomeProfileFragment: void access$100(com.samsung.android.app.shealth.home.profile.HomeProfileFragment)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzclq: long zzbay()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.insight.HomeSampleAhiActivity: void lambda$onCreate$145(android.view.View)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.expert.consultation.uk.ui.appointment.UkAudioControllerView: void generateBars()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.water.ui.fragment.TrackerWaterLogFragment: boolean initiateTrackShare()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.caffeine.ui.fragment.TrackerCaffeineLogFragment: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.message.WearableMessageManager: int sendRequest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.platform.script.message.NotiMsgHandler: int getRandomNotiId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.message.WearableMessageManager: int sendRequestMessage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.DummyTask: int getIntRandom()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.appcessory.base.SAPAccessoryManager: long generateUniqueId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.DummyTask: float getFloatRandom(float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.message.WearableMessageManagerInternal: void issueNonce(java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.deleteinfo.DeleteDataManager: boolean setAlarm()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.ReportRepository$ReportHandlerService: void prepareAndSendNotification(com.samsung.android.app.shealth.home.report.ReportInformation,com.samsung.android.app.shealth.home.report.processdata.Report)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.onfido.android.sdk.capture.ui.camera.liveness.LivenessChallenge$TURN_FACE: void <init>(java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.stress.view.TrackerStressBreathingGuideActivity: void onCreate(android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.message.MessageManager: void insertTestMessage(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzte: void onAdClosed()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.pedometer.service.jobscheduler.StepDaySummaryJobScheduler: void registerJob()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzkc: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.util.PcGreetingMsgUtil: java.lang.String getGreetingMsg(com.samsung.android.app.shealth.social.togetherpublic.util.PcGreetingMsgUtil$MessageType)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.platform.script.controller.InsightActionController: int getRandomIndex(java.util.ArrayList,java.util.ArrayList)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.platform.script.ScriptManager: int getRandomIndex(java.util.ArrayList,java.util.ArrayList)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.livetracker.SportNotificationManager$SportTrackerNotifActionReceiver: void onReceive(android.content.Context,android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.sensor.accessory.service.server.whitelist.AccessoryWhiteListServerSyncHelper: void setWhiteListServerSyncAlarm()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.message.MessagePushHandler: void access$300(com.samsung.android.app.shealth.home.message.MessagePushHandler,java.lang.String,com.samsung.android.app.shealth.data.HealthUserProfileHelper)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.paypal.android.sdk.onetouch.core.fpti.FptiToken: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.service.health.sdkpolicy.request.SdkPolicyRequest: void setNextAlarm(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.DummyTask: float getFloatRandom()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.ui.view.RoundTwoMapView: java.util.ArrayList getShuffledRanks()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.livetracker.LiveTrackerService$13: void onResumeTracker()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.jsoup.helper.HttpConnection$Response$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.jsoup.helper.HttpConnection$Response$2
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in org.jsoup.helper.HttpConnection$Response$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzu: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_228[0] = "MD5", method='<com.tencent.mapsdk.raster.a.av: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_78[0] = "SHA1", method='<com.babylon.sdk.core.config.info.AppInfoImpl: java.lang.String getCertificateSha1Fingerprint()>'}, UnitContainer{unit=$fakeLocal_69[0] = "MD5", method='<com.samsung.android.service.health.security.KeyMdFile: void writeMdFirst(android.content.Context,byte[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzhq: java.security.MessageDigest zzhd()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzajr: java.lang.String zzra()>'}, UnitContainer{unit=$fakeLocal_367[0] = "SHA-1", method='<com.samsung.android.sdk.scloud.decorator.device.SamsungCloudDevice: byte[] sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_153[0] = "SHA-1", method='<com.samsung.android.app.shealth.app.orangesqueezer.FileExtractor: boolean checkHashCode(boolean)>'}, UnitContainer{unit=$fakeLocal_1196[0] = "MD5", method='<com.samsung.android.app.shealth.wearable.util.WearableDataUtil: java.lang.String generateDataUuid(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_97[0] = "MD5", method='<com.samsung.android.sdk.healthconnectivity.privileged.core.a: java.lang.String a()>'}, UnitContainer{unit=$fakeLocal_209[0] = "MD5", method='<com.samsung.android.service.health.security.KeyMdFile: boolean isDifferentWithStoredMd(android.content.Context,byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_629[0] = "MD5", method='<com.samsung.android.app.shealth.tracker.pedometer.service.utility.Helpers: java.lang.String generateDeviceUuidbyPackageName(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzclq: long zzaf(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_330[0] = "MD5", method='<com.samsung.android.app.shealth.social.togetherpublic.util.PcMultipleFileDownLoadQuery: com.samsung.android.app.shealth.social.togetherpublic.util.PcMultipleFileDownLoadQuery$DownloadElement downloadFileFromServer(com.samsung.android.app.shealth.social.togetherpublic.manager.internal.PcFileCache,com.samsung.android.app.shealth.social.togetherpublic.util.PcMultipleFileDownLoadQuery$DownloadElement)>'}, UnitContainer{unit=$fakeLocal_81[0] = "MD5", method='<com.samsung.android.app.shealth.wearable.wearablecomm.socket.WearableCommUtil: java.lang.String getMD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzchx: java.lang.String zzjn(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_439[0] = "MD5", method='<com.samsung.android.app.shealth.sensor.accessory.service.connection.ble.sync.data.DataParser: java.lang.String generateDataUuid(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzajr: java.lang.String zzcp(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_482[0] = "MD5", method='<com.samsung.android.app.shealth.tracker.food.foodpick.search.api.boohee.BooheeSearch$Base32Util: java.lang.String str2Md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_46[0] = "MD5", method='<com.samsung.android.app.shealth.websync.dataconverter.DataUId: java.lang.String generateDataUId(java.lang.String,com.samsung.android.app.shealth.websync.constant.Constants$ServiceProvidersType,com.samsung.android.app.shealth.websync.constant.Constants$MODULE_TYPE,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_331[0] = "SHA", method='<com.samsung.android.sdk.spage.card.CardProvider: boolean isAllowed(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_485[0] = "MD5", method='<com.samsung.android.app.shealth.webkit.js.BillingJs: java.lang.String getDeviceId()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzapq: java.lang.String zzds(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcgo: long zza(com.google.android.gms.internal.zzcme)>'}, UnitContainer{unit=$fakeLocal_1091[0] = "MD5", method='<com.samsung.android.sdk.healthdata.privileged.util.DataUtil: java.lang.String getDataUuidForDeviceNoThrow(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_95[0] = "MD5", method='<com.samsung.android.app.shealth.websync.dataconverter.DataUId: java.lang.String generateDataUId(java.lang.String,com.samsung.android.app.shealth.websync.constant.Constants$ServiceProvidersType,com.samsung.android.app.shealth.websync.constant.Constants$MODULE_TYPE,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1067[0] = "MD5", method='<com.samsung.android.sdk.healthdata.privileged.util.DataUtil: java.lang.String generateDeviceUuid(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzby: void run()>'}, UnitContainer{unit=$fakeLocal_515[2] = "MD5", method='<com.samsung.android.service.health.security.KeyOperation: java.lang.String getTransformedPassword(android.content.Context,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["encryptedKeystore", "LINDOR", 4, "UTF-8", "meta_data.json", "U4F*(xfn$1WzGUN@LyYMPwyN5Ok(V0bn", "1505450608132", "89foTSwfaX7qkid8gpvrX5WuTlXSpSin", 3, "Health.", 2]
[UnitContainer{unit=$fakeLocal_10146[1] = "encryptedKeystore", method='<com.samsung.android.app.shealth.smartswitch.SmartSwitchBackupTask: void lambda$run$112$SmartSwitchBackupTask(com.samsung.android.sdk.healthdata.privileged.HealthDataConsole)>'}, UnitContainer{unit=$r3 = "LINDOR", method='<com.samsung.android.sdk.scloud.decorator.device.SamsungCloudDevice: java.lang.String generateStrongDeviceIDHash(java.lang.String)>'}, UnitContainer{unit=$r20[0] = 4, method='<com.google.android.gms.internal.zzdun: com.google.android.gms.internal.zzduo zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.zzdus)>'}, UnitContainer{unit=specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "UTF-8"), method='<com.samsung.android.service.health.security.KeyOperation: java.security.Key createNewSecretKey(int)>'}, UnitContainer{unit=$fakeLocal_10164[1] = "meta_data.json", method='<com.samsung.android.app.shealth.smartswitch.SmartSwitchBackupTask: void lambda$run$112$SmartSwitchBackupTask(com.samsung.android.sdk.healthdata.privileged.HealthDataConsole)>'}, UnitContainer{unit=$r4 = "U4F*(xfn$1WzGUN@LyYMPwyN5Ok(V0bn", method='<com.samsung.android.app.shealth.servicelog.healthanalytics.HealthAnalyticsUtils: java.lang.String getHmac(java.lang.String,java.lang.String,com.samsung.android.app.shealth.servicelog.healthanalytics.HealthAnalyticsConstants$Coverage)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "1505450608132", method='<com.google.android.gms.internal.zzdm: com.google.android.gms.internal.zzdm zza(android.content.Context,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=$r4 = "89foTSwfaX7qkid8gpvrX5WuTlXSpSin", method='<com.samsung.android.app.shealth.servicelog.healthanalytics.HealthAnalyticsUtils: java.lang.String getHmac(java.lang.String,java.lang.String,com.samsung.android.app.shealth.servicelog.healthanalytics.HealthAnalyticsConstants$Coverage)>'}, UnitContainer{unit=$b3 = 3, method='<com.google.android.gms.internal.zzdun: com.google.android.gms.internal.zzduo zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.zzdus)>'}, UnitContainer{unit=specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("Health."), method='<com.samsung.android.sdk.healthdata.privileged.util.LogUtil: java.lang.String makeTag(java.lang.String)>'}, UnitContainer{unit=$b3 = 2, method='<com.google.android.gms.internal.zzdun: com.google.android.gms.internal.zzduo zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.zzdus)>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["LINDOR"]
[UnitContainer{unit=$r3 = "LINDOR", method='<com.samsung.android.sdk.scloud.decorator.device.SamsungCloudDevice: java.lang.String generateStrongDeviceIDHash(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [30]
[UnitContainer{unit=$fakeLocal_211[2] = 30, method='<com.samsung.android.sdk.scloud.decorator.device.SamsungCloudDevice: java.lang.String generateStrongDeviceIDHash(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000, 1000, 1000]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["TimaPassword", "Health."]
[UnitContainer{unit=$r0 = "TimaPassword", method='<com.samsung.android.service.health.security.KnoxTimaKeystoreManager: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("Health."), method='<com.samsung.android.sdk.healthdata.privileged.util.LogUtil: java.lang.String makeTag(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.shealth.com&", "http://api-dev.samsungknowledge.cn/", "http://", "http://42.1.25.56", "http://www.shealth.com&", "http://play.google.com/store/apps/details?id=com.accuweather.android", "http://", "http://vas.samsungapps.com/stub/stubUpdateCheck.as?", "http://42.1.25.56", "http://api-dev.samsungknowledge.com/", "http://www.google-analytics.com", "http://api-dev.samsungknowledge.com/knowledge-ws/v1.3/dp/"]
[UnitContainer{unit=virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://www.shealth.com&"), method='<com.samsung.android.app.shealth.tracker.healthrecord.server.HealthRecordServerTask: com.samsung.android.app.shealth.tracker.healthrecord.server.object.TokenInfo getAccessToken(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r3 = "http://api-dev.samsungknowledge.cn/", method='<com.samsung.android.app.shealth.goal.insights.platform.script.recommend.RecommendServerClient: retrofit2.Retrofit getRetrofit()>'}, UnitContainer{unit=$r2 = "http://", method='<com.samsung.android.app.shealth.expert.consultation.uk.util.UkServiceInfoHelper: void getServiceInfo(com.samsung.android.app.shealth.expert.consultation.uk.util.UkServiceInfoHelper$ResponseListener)>'}, UnitContainer{unit=<com.samsung.android.app.shealth.tracker.samsungfire.ServerRequestClient: java.lang.String sBaseUrl> = "http://42.1.25.56", method='<com.samsung.android.app.shealth.tracker.samsungfire.ServerRequestClient: retrofit2.Retrofit getRetrofit()>'}, UnitContainer{unit=virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://www.shealth.com&"), method='<com.samsung.android.app.shealth.tracker.healthrecord.server.HealthRecordServerTask: com.samsung.android.app.shealth.tracker.healthrecord.server.object.TokenInfo getRefreshToken(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_187[1] = "http://play.google.com/store/apps/details?id=com.accuweather.android", method='<com.samsung.android.app.shealth.util.weather.fetcher.cp.accuweather.AccuWeatherFetcherBase: void lambda$getOnClickListenerForProviderIcon$369$AccuWeatherFetcherBase(android.view.View)>'}, UnitContainer{unit=$r1 = "http://", method='<com.samsung.android.app.shealth.websync.service.platform.technogym.connection.connection.TechnoGymConnectionManager: void <init>()>'}, UnitContainer{unit=virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://vas.samsungapps.com/stub/stubUpdateCheck.as?"), method='<com.samsung.android.app.shealth.home.profile.SamsungRewardUtils$CheckTask: java.lang.Integer doInBackground$2fd579c3()>'}, UnitContainer{unit=$fakeLocal_<com.samsung.android.app.shealth.tracker.samsungfire.ServerRequestClient: java.lang.String sBaseUrl> = "http://42.1.25.56", method='<com.samsung.android.app.shealth.tracker.samsungfire.ServerRequestClient: retrofit2.Retrofit getRetrofit()>'}, UnitContainer{unit=$r3 = "http://api-dev.samsungknowledge.com/", method='<com.samsung.android.app.shealth.goal.insights.platform.script.recommend.RecommendServerClient: retrofit2.Retrofit getRetrofit()>'}, UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.zzarm: com.google.android.gms.internal.zzarm zzc(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.zzarl: void <clinit>()>'}, UnitContainer{unit=$r3 = "http://api-dev.samsungknowledge.com/knowledge-ws/v1.3/dp/", method='<com.samsung.android.app.shealth.store.StoreUtils: java.lang.String getBaseUrlForCMS()>'}]
=======================================
Analyzing APK: com.senseonics.gen12androidapp.apk
*** Base package: com.senseonics.gen12androidapp
=======================================
***Violated Rule 5: Used export grade public Key ***Constants: [1024]
[UnitContainer{unit=$fakeLocal_169[0] = 1024, method='<okhttp3.internal.tls.HeldCertificate$Builder: java.security.KeyPair generateKeyPair()>'}]
=======================================
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["PBEWithSHAAnd3-KeyTripleDES-CBC", "AES", "AES", "PBEWithSHAAnd3-KeyTripleDES-CBC"]
[UnitContainer{unit=$fakeLocal_-1[0] = "PBEWithSHAAnd3-KeyTripleDES-CBC", method='<org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: java.lang.Object getObject(char[])>'}, UnitContainer{unit=$fakeLocal_262[0] = "AES", method='<com.securepreferences.SecurePreferencesOld: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_243[0] = "AES", method='<com.securepreferences.SecurePreferencesOld: java.lang.String encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "PBEWithSHAAnd3-KeyTripleDES-CBC", method='<org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: void <init>(org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi,java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.bouncycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement sqrt()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.bouncycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.asn1.ua.DSTU4145PointEncoder: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jcifs.smb.NtlmPasswordAuthentication: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jcifs.smb.SmbConstants: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jcifs.smb.TestLocking: void run()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nONBField: org.bouncycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECCurve$F2m: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jcifs.netbios.NbtAddress: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64$HashCode: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <okhttp3.mockwebserver.MockWebServer: void processHandshakeFailure(java.net.Socket)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.senseonics.util.DMSSSLSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.senseonics.util.DMSSSLSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD5", method='<jcifs.smb.NtlmPasswordAuthentication: byte[] getNTLM2Response(byte[],byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_190[0] = "SHA-1", method='<com.google.common.hash.Hashing: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_47[0] = "MD5", method='<jcifs.smb.SigningDigest: void <init>(jcifs.smb.SmbTransport,jcifs.smb.NtlmPasswordAuthentication)>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<jcifs.smb.SigningDigest: void <init>(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<org.bouncycastle.ocsp.RespID: void <init>(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_180[0] = "MD5", method='<com.google.common.hash.Hashing: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<jcifs.util.HMACT64: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [class "Landroid/os/Build;"]
[UnitContainer{unit=$r2 = class "Landroid/os/Build;", method='<com.securepreferences.SecurePreferences: java.lang.String getDeviceSerialNumber(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: [class "Landroid/os/Build;", class "Landroid/os/Build;"]
[UnitContainer{unit=$r2 = class "Landroid/os/Build;", method='<com.securepreferences.SecurePreferences: java.lang.String getDeviceSerialNumber(android.content.Context)>'}, UnitContainer{unit=$r2 = class "Landroid/os/Build;", method='<com.securepreferences.SecurePreferencesOld: java.lang.String getDeviceSerialNumber(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [new java.io.BufferedInputStream, $i0, $r1, $r0.<org.bouncycastle.asn1.pkcs.MacData: java.math.BigInteger iterationCount>, i2 << 8, $i1 & 32, virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>(), $r3, $r10, specialinvoke $r10.<org.bouncycastle.asn1.BEROctetStringParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), $i0, lengthof $r6, null, null, (org.bouncycastle.asn1.pkcs.Pfx) $r1, (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r15, i3 << 0, (java.security.PrivateKey) $r18, null, $r9, @parameter4: int, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.SafeBag: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), $r0, null, $r2, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), specialinvoke $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.bouncycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), $r0.<org.bouncycastle.asn1.pkcs.ContentInfo: org.bouncycastle.asn1.ASN1Encodable content>, $r4, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), staticinvoke <org.bouncycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r0, $i1), $r3, (org.bouncycastle.asn1.ASN1OctetString) $r8, interfaceinvoke $r5.<org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r0), $r0.<org.bouncycastle.asn1.ASN1InputStream: int limit>, r1, $i0, $r2, $i0, $r3, specialinvoke $r3.<org.bouncycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.bouncycastle.asn1.ASN1OctetString: byte[] string>, r1, 2000, $r3.<org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom random>, new org.bouncycastle.asn1.pkcs.Pfx, $r0, $i0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), $r14, @this: org.bouncycastle.asn1.pkcs.AuthenticatedSafe, (org.bouncycastle.asn1.ASN1Encodable) $r2, $r5, (org.bouncycastle.asn1.pkcs.PBES2Parameters) $r1, $r38, 1000, $r0.<org.bouncycastle.asn1.pkcs.Pfx: org.bouncycastle.asn1.pkcs.ContentInfo contentInfo>, @parameter0: java.lang.Object, $r3, @this: org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $r3, $r9, specialinvoke $r9.<org.bouncycastle.asn1.DERExternalParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), $r30[$i0], virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>(), $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), $r2, new org.bouncycastle.asn1.ASN1InputStream, $i1, @parameter0: byte[], $i0 & 1023, $i0, $r2, $r2, r0.<java.io.DataInputStream: java.io.InputStream in>, $r2, <org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: java.security.Provider bcProvider>, 10000, specialinvoke $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.bouncycastle.asn1.x509.AlgorithmIdentifier)>(2, $r3, $r2), $r0.<org.bouncycastle.asn1.pkcs.PBKDF2Params: org.bouncycastle.asn1.ASN1Integer iterationCount>, virtualinvoke $r8.<org.bouncycastle.asn1.BERSequenceParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), new org.bouncycastle.asn1.ASN1InputStream, r1, virtualinvoke $r1.<java.io.InputStream: int read()>(), $r1, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $r0.<org.bouncycastle.asn1.pkcs.AuthenticatedSafe: org.bouncycastle.asn1.pkcs.ContentInfo[] info>, null, virtualinvoke $r17.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), r1, @this: org.bouncycastle.asn1.pkcs.PBKDF2Params, (org.bouncycastle.asn1.ASN1Sequence) $r8, new org.bouncycastle.asn1.BEROctetStringParser, $i0, (org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r33, (org.bouncycastle.asn1.ASN1Primitive) $r17, r1, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PBES2Parameters: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @this: org.bouncycastle.asn1.pkcs.MacData, $i0, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: int read()>(), $i0, new org.bouncycastle.asn1.DERExternalParser, $r0.<org.bouncycastle.asn1.pkcs.PBES2Parameters: org.bouncycastle.asn1.pkcs.KeyDerivationFunc func>, @parameter2: int, $r0.<org.bouncycastle.asn1.pkcs.KeyDerivationFunc: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, $i1, r0.<java.io.DataInputStream: java.io.InputStream in>, @this: org.bouncycastle.asn1.x509.DigestInfo, @parameter0: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, $i2, $r3, $r4, specialinvoke $r4.<org.bouncycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.bouncycastle.asn1.ASN1StreamParser)>($i2, $r3), $r2, @parameter0: char[], new org.bouncycastle.asn1.BERSetParser, $r0.<org.bouncycastle.asn1.ASN1Set: java.util.Vector set>, null, staticinvoke <org.bouncycastle.asn1.pkcs.PKCS12PBEParams: org.bouncycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r6), (org.bouncycastle.asn1.ASN1Set) $r17, new org.bouncycastle.asn1.ASN1StreamParser, new org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, (org.bouncycastle.asn1.pkcs.AuthenticatedSafe) $r1, r1, $r3, interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3), $s5, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), 10000, @parameter0: java.lang.Object, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $i0, new java.io.DataInputStream, $r0, r1, -1, $r0.<org.bouncycastle.asn1.pkcs.SafeBag: org.bouncycastle.asn1.ASN1Encodable bagValue>, $r2, $r1, new org.bouncycastle.asn1.pkcs.PBKDF2Params, @parameter0: java.lang.Object, (org.bouncycastle.asn1.pkcs.PKCS12PBEParams) $r1, virtualinvoke $r6.<org.bouncycastle.asn1.BERTaggedObjectParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $i12 + $i11, @parameter0: byte[], (org.bouncycastle.asn1.ASN1Sequence) $r8, $i10 + $i9, @this: org.bouncycastle.asn1.x509.AlgorithmIdentifier, @this: org.bouncycastle.asn1.pkcs.KeyDerivationFunc, @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, @this: org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, @parameter4: byte[], $r0.<org.bouncycastle.asn1.pkcs.MacData: org.bouncycastle.asn1.x509.DigestInfo digInfo>, (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1, @parameter0: java.lang.Object, $i1, 1000, null, $r0.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, @parameter2: int, r1, $r3, (org.bouncycastle.asn1.pkcs.EncryptedData) $r1, virtualinvoke $r11.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r8), $r0.<org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec pbeKeySpec>, virtualinvoke $r7.<org.bouncycastle.asn1.BERSetParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), @parameter1: java.security.Key, new javax.crypto.spec.PBEParameterSpec, @this: org.bouncycastle.asn1.pkcs.PBES2Parameters, $r3, $r8, specialinvoke $r8.<org.bouncycastle.asn1.BERSequenceParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), $i0, @parameter2: int, null, null, @this: org.bouncycastle.asn1.ASN1OctetString, 2000, @this: org.bouncycastle.asn1.pkcs.Pfx, (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1, $r2, new org.bouncycastle.asn1.BERSequenceParser, staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)>($r9, $r10), new org.bouncycastle.asn1.pkcs.EncryptedData, $r0.<org.bouncycastle.asn1.pkcs.SafeBag: org.bouncycastle.asn1.ASN1Set bagAttributes>, @this: org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey, $r0.<org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int type>, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), r1, (org.bouncycastle.asn1.ASN1OctetString) $r17, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i1, $i2, $i0), @this: org.bouncycastle.asn1.pkcs.MacData, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: int readLength()>(), r1, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @parameter0: org.bouncycastle.asn1.x509.AlgorithmIdentifier, virtualinvoke $r9.<org.bouncycastle.asn1.DERExternalParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), $r3, (org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) $r4, $i0, $r0.<org.bouncycastle.asn1.x509.DigestInfo: byte[] digest>, virtualinvoke $r2.<java.io.InputStream: int read()>(), virtualinvoke $r10.<org.bouncycastle.asn1.BEROctetStringParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @this: org.bouncycastle.asn1.pkcs.SafeBag, new org.bouncycastle.asn1.pkcs.PKCS12PBEParams, @this: org.bouncycastle.asn1.pkcs.PKCS12PBEParams, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @this: org.bouncycastle.asn1.pkcs.ContentInfo, $b4 & 255, r0.<java.io.DataInputStream: java.io.InputStream in>, r53, $r19, @parameter0: byte[], @parameter0: java.lang.Object, r1, virtualinvoke r0.<java.util.Random: int next(int)>(32), $i0, $r0.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: org.bouncycastle.asn1.ASN1Integer iterations>, new org.bouncycastle.asn1.pkcs.PKCS12PBEParams, @parameter2: org.bouncycastle.asn1.x509.AlgorithmIdentifier, r54, r1, 1, $i2, $r3, $r6, specialinvoke $r6.<org.bouncycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.bouncycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), <org.bouncycastle.jce.provider.BouncyCastleProvider: java.util.Map keyInfoConverters>, new org.bouncycastle.asn1.BERApplicationSpecificParser, $r14, $i0, specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), new org.bouncycastle.asn1.x509.AlgorithmIdentifier, @parameter2: org.bouncycastle.asn1.pkcs.PKCS12PBEParams, $i0 + 1024, virtualinvoke $r4.<org.bouncycastle.asn1.BERApplicationSpecificParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), null, $r1, (org.bouncycastle.asn1.ASN1Encodable) $r2, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PBKDF2Params: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), i0, $r2, $r3, specialinvoke $r3.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r2), (org.bouncycastle.asn1.pkcs.PBKDF2Params) $r1, i1 << 16, @this: org.bouncycastle.asn1.ASN1Set, virtualinvoke $r3.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive readObject()>(), i0 << 24, @this: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, new org.bouncycastle.asn1.pkcs.SafeBag, staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r9, $r10), $r0.<org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.bouncycastle.asn1.pkcs.PKCS12PBEParams params>, @this: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>($r9, $r10), $r14, $i0, $i0, $i1, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), null, new org.bouncycastle.asn1.IndefiniteLengthInputStream, $r0.<org.bouncycastle.asn1.pkcs.Pfx: org.bouncycastle.asn1.pkcs.MacData macData>, @parameter3: int, r1, new org.bouncycastle.asn1.BERTaggedObjectParser, $i13, $r0.<org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.bouncycastle.asn1.pkcs.PBKDF2Params params>, @this: org.bouncycastle.asn1.ASN1Sequence, new org.bouncycastle.asn1.pkcs.AuthenticatedSafe, $i0, virtualinvoke $r3.<java.io.InputStream: int read()>(), null, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.EncryptedData: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @this: org.bouncycastle.asn1.ASN1InputStream, @parameter1: java.security.Key, @parameter0: java.lang.Object, $i1, @parameter2: int, @this: org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, staticinvoke <org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), r1, $r11, $r0.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1Encodable parameters>, $r1, @parameter2: int, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), virtualinvoke $r2.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1Encodable getParameters()>(), $r0.<org.bouncycastle.asn1.x509.DigestInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, $r2, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.bouncycastle.asn1.pkcs.SafeBag) $r1, $i0, $r6, virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), @this: org.bouncycastle.asn1.pkcs.Pfx, virtualinvoke $r17.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @parameter1: java.security.Key, $r0.<org.bouncycastle.asn1.ASN1Set: java.util.Vector set>, new org.bouncycastle.asn1.pkcs.PBES2Parameters, (org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @parameter0: java.lang.Object, (org.bouncycastle.asn1.ASN1Sequence) $r37, @parameter1: java.security.Key, @parameter1: org.bouncycastle.asn1.x509.AlgorithmIdentifier, $r0, staticinvoke <org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r2), $r3, $r7, specialinvoke $r7.<org.bouncycastle.asn1.BERSetParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), 1024, @this: org.bouncycastle.asn1.ASN1Set, @this: org.bouncycastle.asn1.x509.DigestInfo, @parameter0: java.lang.Object, null, $r1[$i2], staticinvoke <org.bouncycastle.asn1.ASN1OctetString: org.bouncycastle.asn1.ASN1OctetString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), @this: org.bouncycastle.asn1.pkcs.SafeBag, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.Pfx: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), $r0.<org.bouncycastle.asn1.ASN1Sequence: java.util.Vector seq>, $r1, r0.<java.io.DataInputStream: java.io.InputStream in>]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r7 = "www.bouncycastle.org", method='<org.bouncycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: [100, 108, 101, 119, 104, 114, 108, "password", 111, 111, 108, 32]
[UnitContainer{unit=$r0[10] = 100, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 108, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 101, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 119, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 104, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 114, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 108, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r1 = "password", method='<okhttp3.internal.tls.SslClient$Builder: okhttp3.internal.tls.SslClient build()>'}, UnitContainer{unit=$r0[4] = 111, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 111, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 108, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 32, method='<org.bouncycastle.jce.examples.PKCS12Example: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.shl.Smartheart.apk
*** Base package: com.shl.Smartheart
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES"]
[UnitContainer{unit=$fakeLocal_12[0] = "AES", method='<com.phonegap.SimpleCrypto: byte[] a(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_5[0] = "AES", method='<com.phonegap.SimpleCrypto: byte[] b(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.a.a,double)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.j
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.phonegap.v
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.phonegap.v
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.phonegap.u
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<io.fabric.sdk.android.services.network.j: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_18[0] = "SHA-1", method='<io.fabric.sdk.android.a.b.l: java.lang.String a(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.fabric.sdk.android.a.b.l: java.lang.String c(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://10.0.0.100/SmartheartAndroid/", "http://10.0.0.100/SmartheartAndroid/", "http://"]
[UnitContainer{unit=$r9 = "http://10.0.0.100/SmartheartAndroid/", method='<com.shl.Smartheart.tb: void run()>'}, UnitContainer{unit=$r6 = "http://10.0.0.100/SmartheartAndroid/", method='<com.shl.Smartheart.Ha: void run()>'}, UnitContainer{unit=$r4 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("https://", "http://"), method='<com.shl.Smartheart.I: java.lang.String a(com.shl.Smartheart.J)>'}]
=======================================
Analyzing APK: com.silvercloudhealth.android.app.apk
*** Base package: com.silvercloudhealth.android.app
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.b.a.a.a.a.a: boolean a(b.b.a.a.a.a.a$a,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.y8: long t()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.b.a.a.e.e.kc: long a()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<b.b.a.a.c.a0: java.lang.String a(java.lang.String,b.b.a.a.c.s,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.i: java.lang.String a(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.y8: java.security.MessageDigest x()>'}]
=======================================
Analyzing APK: com.sjm.crmd.patientApp_Android_TUV.apk
*** Base package: com.sjm.crmd.patientApp_Android_TUV
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["Blowfish", "AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_75[0] = "Blowfish", method='<com.esotericsoftware.kryo.serializers.BlowfishSerializer: javax.crypto.Cipher getCipher(int)>'}, UnitContainer{unit=$fakeLocal_40[0] = "AES/ECB/NoPadding", method='<com.sjm.commProxy.framework.services.b.a: byte[] a(byte[],byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: int nextInt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: double nextDouble()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.analytics.internal.zzf,java.lang.String,com.google.android.gms.analytics.internal.zzad)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzf: void zzkp(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jacorb.orb.ORB: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: boolean nextBoolean()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jacorb.orb.Delegate: void randomMilliSecDelay()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzq: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.raw.Mod: int[] random(int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: float nextFloat()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jacorb.poa.util.IdUtil: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.esotericsoftware.kryo.util.ObjectMap: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzal: void zzc(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzah$zzd)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: long nextLong(long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzc: void zzkp(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzck: com.google.android.gms.internal.zzai$zza zzaw(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement sqrt()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.spongycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: void <init>()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzal: long zzy(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzn: void zzym()>'}, UnitContainer{unit=$fakeLocal_207[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.analytics.internal.zza: java.lang.String zzen(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.tagmanager.zzar: com.google.android.gms.internal.zzai$zza zzaw(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_196[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_110[0] = "MD5", method='<org.sqlite.SQLiteJDBCLoader: java.lang.String md5sum(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_191[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzt: java.lang.String zzmm(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_218[0] = "SHA-1", method='<okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>'}]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org", 4711L]
[UnitContainer{unit=$r1 = "www.bouncycastle.org", method='<org.spongycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=$fakeLocal_43[0] = 4711L, method='<org.jacorb.security.ssl.sun_jsse.JSRandomImpl: java.security.SecureRandom getSecureRandom()>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["notsecret", "WINDOWS-MY", "WINDOWS-MY", "PKCS11", "PKCS11"]
[UnitContainer{unit=$r5 = "notsecret", method='<com.sjm.patientApp.android.framework.platformDelegates.AndroidFileSystemDelegate: java.security.KeyStore c()>'}, UnitContainer{unit=$r2 = "WINDOWS-MY", method='<org.jacorb.security.ssl.sun_jsse.SSLSocketFactory: javax.net.SocketFactory createSocketFactory()>'}, UnitContainer{unit=$r2 = "WINDOWS-MY", method='<org.jacorb.security.ssl.sun_jsse.SSLServerSocketFactory: javax.net.ServerSocketFactory createServerSocketFactory()>'}, UnitContainer{unit=$r2 = "PKCS11", method='<org.jacorb.security.ssl.sun_jsse.SSLSocketFactory: javax.net.SocketFactory createSocketFactory()>'}, UnitContainer{unit=$r2 = "PKCS11", method='<org.jacorb.security.ssl.sun_jsse.SSLServerSocketFactory: javax.net.ServerSocketFactory createServerSocketFactory()>'}]
=======================================
Analyzing APK: com.smartinhalerlive.apk
*** Base package: com.smartinhalerlive
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES"]
[UnitContainer{unit=$r2 = "AES", method='<com.adherium.smartchat.d.c: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$r2 = "AES", method='<com.adherium.smartchat.d.c: java.lang.String b(java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.b.e: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(b.a.a.a.a.c.a.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.smartinhalerlive.app.common.analytics.data.encryption.EncryptionAgentImpl: java.lang.String getRandomKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.smartinhalerlive.app.feature.usage.overview.domain.GraphHelper: int randomWithRange(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.b.e: java.lang.String d()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.s: void a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.s: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzka: long zzlb()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.b.d: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.b.b: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of b.a.a.a.a.e.g
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.google.android.gms.common.net.zza
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.google.android.gms.common.net.zza
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "md5", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "md5", "SHA1"]
[UnitContainer{unit=$fakeLocal_1275[1] = "SHA-1", method='<b.a.a.a.a.b.i: java.lang.String a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzfr: java.lang.String zzbp(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_30[0] = "md5", method='<com.smartinhalerlive.app.feature.prescription.common.domain.helper.Md5Digest: java.lang.String hashPrescriptions(java.util.List)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<e.f: e.f c()>'}, UnitContainer{unit=$fakeLocal_42[0] = "MD5", method='<com.smartinhalerlive.app.common.analytics.data.encryption.EncryptionAgentImpl: byte[] encryptString(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.a.b.e: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<b.a.a.a.a.e.g: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.c.c.a.h: e.f a(e.f)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.e: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<b.a.a.a.a.b.i: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzei: long zza(com.google.android.gms.internal.measurement.zzkq)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzka: long zzd(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.zzi: java.lang.String getErrorMessage()>'}, UnitContainer{unit=$fakeLocal_2283[1] = "SHA-1", method='<b.a.a.a.a.b.i: java.lang.String i(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.b.d: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.b.i)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<b.a.a.a.a.b.i: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_123[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_13[0] = "md5", method='<com.smartinhalerlive.app.common.data.helper.Md5HashUtil$Companion: java.lang.String md5Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.a.b.b: java.lang.String a(java.lang.String)>'}]
=======================================
Analyzing APK: com.smartmio.apk
*** Base package: com.smartmio
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.smartmio.util.MathUtils: int randomInt(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkk: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_275[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_798[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_1555[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_279[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_271[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_300[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1550[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_442[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkk: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["gqL3HU2oQ0Qjh1vI", "a48313dca872819f96a63b9f93ac3245"]
[UnitContainer{unit=$r1 = "gqL3HU2oQ0Qjh1vI", method='<com.smartmio.util.HashUtils: java.lang.String encodePass(java.lang.String)>'}, UnitContainer{unit=$r1 = "a48313dca872819f96a63b9f93ac3245", method='<com.smartmio.util.HashUtils: java.lang.String encodePass(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["gqL3HU2oQ0Qjh1vI"]
[UnitContainer{unit=$r1 = "gqL3HU2oQ0Qjh1vI", method='<com.smartmio.util.HashUtils: java.lang.String encodePass(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.stethome.home.cert.sample.apk
*** Base package: com.stethome.home.cert.sample
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <aol: long g()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <nw: boolean a(nw$a,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<asy: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: chx sha1(chx)>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_123[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<chx: chx d()>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<aol: java.security.MessageDigest i()>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<vo: java.lang.String a(java.lang.String,vh,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<chx: chx c()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://logs.dev.stethome.com"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=return "http://logs.dev.stethome.com", method='<auv: java.lang.String b()>'}]
=======================================
Analyzing APK: com.swaymedical.Sway.apk
*** Base package: com.swaymedical.Sway
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.utils.UUIDUtils: void initFailOver(java.lang.SecurityException)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: com.tactio.AXA1000.apk
*** Base package: com.tactio.AXA1000
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzbq: void zza(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzbj)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzej: com.google.android.gms.internal.zzbp zzu(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzl: void zzk(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.zzaor,java.lang.String,com.google.android.gms.internal.zzaqi)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_49[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_126[1] = "SHA-1", method='<org.greenrobot.essentials.StringUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1533[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_135[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_187[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzaof: java.lang.String zzdl(java.lang.String)>'}, UnitContainer{unit=$r7 = "MD5", method='<com.google.android.gms.tagmanager.zzbw: com.google.android.gms.internal.zzbp zzu(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_54[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_116[1] = "MD5", method='<org.greenrobot.essentials.StringUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_140[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1528[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_102[1] = "SHA-1", method='<org.greenrobot.essentials.io.IoUtils: java.lang.String getSha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_96[1] = "MD5", method='<org.greenrobot.essentials.io.IoUtils: java.lang.String getMd5(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["ISO-8859-1", "ISO-8859-1"]
[UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESDecrypter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://www.google-analytics.com"]
[UnitContainer{unit=$fakeLocal_71[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_31[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_46[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.zzaqb: com.google.android.gms.internal.zzaqb zzc(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.zzaqa: void <clinit>()>'}]
=======================================
Analyzing APK: com.tevapharm.proairdigihaler.apk
*** Base package: com.tevapharm.proairdigihaler
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding", "AES/ECB/NoPadding", "x-amz-matdesc"]
[UnitContainer{unit=$fakeLocal_35[0] = "AES/ECB/NoPadding", method='<com.tevapharm.devices.service.AESCryptor: void <init>(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_32[0] = "AES/ECB/NoPadding", method='<com.tevapharm.devices.service.AESCryptor: void <init>(java.lang.String)>'}, UnitContainer{unit=$r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromObjectMetadata0(com.amazonaws.services.s3.model.ObjectMetadata,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[],com.amazonaws.services.s3.model.ExtraMaterialsDescription,boolean,com.amazonaws.services.kms.AWSKMSClient)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.perf.internal.zzq: boolean zza(boolean,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.remoteconfig.RemoteConfigComponent: void <clinit>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest newMD5()>'}, UnitContainer{unit=$fakeLocal_59[0] = "SHA-1", method='<com.google.firebase.perf.internal.zzs: long zzh(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_117[0] = "SHA-1", method='<com.google.firebase.perf.internal.RemoteConfigManager: java.lang.String zzi(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1641[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [1, ":", "PASSWORD_VERIFIER", -1, "PASSWORD_VERIFIER"]
[UnitContainer{unit=$b7 = 1, method='<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>'}, UnitContainer{unit=$r2 = ":", method='<com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$AuthenticationHelper: byte[] getPasswordAuthenticationKey(java.lang.String,java.lang.String,java.math.BigInteger,java.math.BigInteger)>'}, UnitContainer{unit=$r4 = "PASSWORD_VERIFIER", method='<com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$24: void run()>'}, UnitContainer{unit=$b7 = -1, method='<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>'}, UnitContainer{unit=$r3 = "PASSWORD_VERIFIER", method='<com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser$25: void run()>'}]
=======================================
Analyzing APK: com.theranica.nerviomigra.apk
*** Base package: com.theranica.nerviomigra
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES/ECB/NoPadding", "DES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_470[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_392[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcfw: long zzazy()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.theranica.nerviomigra.BlueTooth.RandomProgram: void shuffle()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=============================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1, 0] used in org.apache.http.conn.ssl.AbstractVerifier
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "MD5", "MD5", "SHA", "MD5", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcfw: long zzah(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1239[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_269[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$r9 = "MD5", method='<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>'}, UnitContainer{unit=$fakeLocal_273[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcay: long zza(com.google.android.gms.internal.zzcgk)>'}, UnitContainer{unit=$fakeLocal_359[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] getNTLM2SessionResponse(java.lang.String,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_277[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$r11 = "MD5", method='<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials)>'}, UnitContainer{unit=$fakeLocal_280[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_94[0] = "SHA", method='<com.theranica.nerviomigra.activities.LoginActivity: void facebookTest()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcch: java.lang.String zzji(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_239[0] = "MD5", method='<com.theranica.nerviomigra.BlueTooth.ProgramsFileParser: java.lang.String getMd5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_747[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["sianosch"]
[UnitContainer{unit=$r3 = "sianosch", method='<com.theranica.nerviomigra.BlueTooth.ServerConnection$SslHttpClient: org.apache.http.conn.ssl.SSLSocketFactory newSslSocketFactory()>'}]
=======================================
Analyzing APK: com.triowave.triouser.apk
*** Base package: com.triowave.triouser
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.loopj.android.http.SimpleMultipartEntity: void <init>(com.loopj.android.http.ResponseHandlerInterface)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.loopj.android.http.MySSLSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.loopj.android.http.MySSLSocketFactory$1
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://think.triowave.net/individualver-debug.apk", "http://192.168.16.37:8000"]
[UnitContainer{unit=$fakeLocal_<com.triowave.triouser.activity.HttpsRequestActivity: java.lang.String path> = "http://think.triowave.net/individualver-debug.apk", method='<com.triowave.triouser.activity.HttpsRequestActivity: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_121[0] = "http://192.168.16.37:8000", method='<com.triowave.triouser.utils.HttpsRequest$ThreadHttp: void run()>'}]
=======================================
Analyzing APK: com.tytocare.apk
*** Base package: com.tytocare
=======================================
***Violated Rule 5: Used export grade public Key ***Constants: [1024]
[UnitContainer{unit=$fakeLocal_347[0] = 1024, method='<org.bouncycastle.mail.smime.examples.ValidateSignedMail: java.security.cert.TrustAnchor getDummyTrustAnchor()>'}]
=======================================
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_22[0] = "AES/ECB/NoPadding", method='<fm.icelink.AesCounterContext: void <init>(fm.icelink.DataBuffer)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.bouncycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement sqrt()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int[],long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.raw.Mod: int[] random(int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fm.icelink.Randomizer: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tytocare.ui.widget.ColorGenerator: void <init>(java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.upstream.cache.CachedContentIndex: void writeFile()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <nucleus.factory.PresenterStorage: void add(nucleus.presenter.Presenter)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[],long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.github.sarxos.webcam.ds.dummy.WebcamDummyDevice: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amulyakhare.textdrawable.util.ColorGenerator: void <init>(java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.asn1.ua.DSTU4145PointEncoder: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fm.icelink.WebSocket: void <init>(java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fm.Randomizer: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECCurve$AbstractF2m: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.github.sarxos.webcam.ds.dummy.WebcamDummyDevice: void drawRect(java.awt.Graphics2D,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkm: long zzg()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fm.WebSocket: void <init>(java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <fm.TcpSocket: void <init>(boolean,boolean,boolean)>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <fm.icelink.TcpSocket: void <init>(boolean,boolean,boolean)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.americanwell.sdk.internal.util.APIUtil$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.americanwell.sdk.internal.util.APIUtil$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.americanwell.sdk.internal.util.APIUtil$a
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA1", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_55[0] = "SHA1", method='<org.bouncycastle.openpgp.operator.jcajce.JcaKeyFingerprintCalculator: byte[] calculateFingerprint(org.bouncycastle.bcpg.PublicKeyPacket)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_358[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_30[0] = "MD5", method='<org.bouncycastle.openpgp.operator.jcajce.JcaKeyFingerprintCalculator: byte[] calculateFingerprint(org.bouncycastle.bcpg.PublicKeyPacket)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkm: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA1", method='<org.bouncycastle.cert.jcajce.JcaX509ExtensionUtils: void <init>()>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$r3 = "MD5", method='<fm.icelink.HashContext: void <init>(fm.icelink.HashType)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_19[0] = "SHA-1", method='<fm.Crypto: byte[] sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA1", method='<org.bouncycastle.openpgp.operator.jcajce.SHA1PGPDigestCalculator: void <init>()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$r3 = "SHA-1", method='<fm.icelink.HashContext: void <init>(fm.icelink.HashType)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [1]
[UnitContainer{unit=$fakeLocal_254[2] = 1, method='<org.bouncycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.bouncycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[],boolean)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$r0.<org.bouncycastle.pkcs.jcajce.JcePKCSPBEOutputEncryptorBuilder: int iterationCount>, $r1, $r0.<org.bouncycastle.asn1.pkcs.MacData: java.math.BigInteger iterationCount>, @parameter1: java.security.Key, new org.bouncycastle.jcajce.PKCS12Key, lengthof $r6, 1024, $i0, i3 << 0, (org.bouncycastle.asn1.ASN1Set) $r0, @parameter4: int, null, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), $r4, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r3, @parameter0: byte[], $r0.<org.bouncycastle.asn1.ASN1InputStream: int limit>, $r2, $i0, $r3, specialinvoke $r3.<org.bouncycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), @parameter4: int, interfaceinvoke $r13.<org.bouncycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r14), $r3.<org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom random>, $r1, $r0, $i0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), $i0, @this: org.bouncycastle.asn1.pkcs.AuthenticatedSafe, (org.bouncycastle.asn1.ASN1Encodable) $r2, $r0.<org.bouncycastle.asn1.pkcs.Pfx: org.bouncycastle.asn1.pkcs.ContentInfo contentInfo>, @parameter2: int, $r3, @this: org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, @parameter0: java.lang.Object, @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, @parameter2: org.bouncycastle.asn1.x509.AlgorithmIdentifier, $i0 & 1023, $i0, @this: org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, $r2, $r2, @parameter0: int, $r0.<org.bouncycastle.asn1.pkcs.PBKDF2Params: org.bouncycastle.asn1.ASN1Integer iterationCount>, $r0.<org.bouncycastle.jcajce.PBKDF1KeyWithParameters: int iterationCount>, @parameter1: org.bouncycastle.asn1.x509.AlgorithmIdentifier, r1, $i0, null, r1, $r0.<org.bouncycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder: org.bouncycastle.jcajce.util.JcaJceHelper helper>, $r7, $i0, virtualinvoke $r4.<org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>(), virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: int read()>(), new org.bouncycastle.asn1.DERExternalParser, $r0.<org.bouncycastle.asn1.pkcs.PBES2Parameters: org.bouncycastle.asn1.pkcs.KeyDerivationFunc func>, r56, (javax.crypto.SecretKey) $r1, $r0.<org.bouncycastle.asn1.pkcs.KeyDerivationFunc: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, $r12, @this: org.bouncycastle.asn1.x509.DigestInfo, @parameter0: org.bouncycastle.asn1.x509.AlgorithmIdentifier, $i2, $r3, $r4, specialinvoke $r4.<org.bouncycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.bouncycastle.asn1.ASN1StreamParser)>($i2, $r3), @parameter0: char[], $r0, $i0, null, new org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, (org.bouncycastle.asn1.pkcs.AuthenticatedSafe) $r1, $r3, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @parameter1: org.bouncycastle.asn1.x509.AlgorithmIdentifier, -1, $r0.<org.bouncycastle.asn1.pkcs.SafeBag: org.bouncycastle.asn1.ASN1Encodable bagValue>, $r1, @parameter0: java.lang.Object, (org.bouncycastle.asn1.pkcs.PKCS12PBEParams) $r1, virtualinvoke $r6.<org.bouncycastle.asn1.BERTaggedObjectParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), (org.bouncycastle.asn1.ASN1Sequence) $r36, @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $r3, $i10 + $i9, (org.bouncycastle.asn1.pkcs.PBKDF2Params) $r3, @this: org.bouncycastle.asn1.x509.AlgorithmIdentifier, @this: org.bouncycastle.asn1.pkcs.KeyDerivationFunc, $r1, @this: org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, $i1, @parameter4: byte[], $i0, (javax.crypto.interfaces.PBEKey) $r1, $i0, (org.bouncycastle.asn1.pkcs.EncryptedData) $r1, virtualinvoke $r7.<org.bouncycastle.asn1.BERSetParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), $i0, @this: org.bouncycastle.asn1.pkcs.PBES2Parameters, $r3, $r8, specialinvoke $r8.<org.bouncycastle.asn1.BERSequenceParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), i0, @this: org.bouncycastle.asn1.pkcs.Pfx, $i1, @parameter1: java.security.Key, $i0, @this: org.bouncycastle.pkcs.jcajce.JcePKCSPBEOutputEncryptorBuilder, i0, $r0.<org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int type>, (org.bouncycastle.jcajce.PBKDF1Key) $r1, $r0.<org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder: int iterationCount>, r1, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: int readLength()>(), r1, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @parameter0: org.bouncycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.bouncycastle.jcajce.util.JcaJceHelper helper>, @parameter0: org.bouncycastle.asn1.x509.AlgorithmIdentifier, $r3, (org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) $r4, @parameter0: java.security.Key, virtualinvoke $r2.<java.io.InputStream: int read()>(), $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @this: org.bouncycastle.asn1.pkcs.SafeBag, $i1, @parameter2: org.bouncycastle.asn1.x509.AlgorithmIdentifier, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @this: org.bouncycastle.asn1.pkcs.ContentInfo, $b4 & 255, r0.<java.io.DataInputStream: java.io.InputStream in>, @parameter0: byte[], $i0, $i0, virtualinvoke r0.<java.util.Random: int next(int)>(32), new org.bouncycastle.asn1.pkcs.PKCS12PBEParams, (javax.crypto.interfaces.PBEKey) $r5, $r4, r1, 1, $i2, $r3, $r6, specialinvoke $r6.<org.bouncycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.bouncycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), $r1, specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), (org.bouncycastle.jcajce.PKCS12Key) $r2, virtualinvoke $r4.<org.bouncycastle.asn1.BERApplicationSpecificParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), @this: org.bouncycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder, $i0, (org.bouncycastle.asn1.ASN1Encodable) $r2, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PBKDF2Params: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), i0, @this: org.bouncycastle.asn1.ASN1Set, $r0.<org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>, $i0, @this: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>(), null, new org.bouncycastle.asn1.IndefiniteLengthInputStream, $r0.<org.bouncycastle.asn1.pkcs.Pfx: org.bouncycastle.asn1.pkcs.MacData macData>, $i0, r1, $r0.<org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.bouncycastle.asn1.pkcs.PBKDF2Params params>, new org.bouncycastle.asn1.ASN1InputStream, $r1, $r2, specialinvoke $r2.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r1), @this: org.bouncycastle.asn1.ASN1Sequence, (org.bouncycastle.asn1.ASN1Encodable) $r0, $i1, $i0, new org.bouncycastle.asn1.pkcs.AuthenticatedSafe, $r2, (org.bouncycastle.asn1.ASN1Sequence) $r6, null, @this: org.bouncycastle.jcajce.PBKDF1KeyWithParameters, @parameter0: java.lang.Object, @parameter0: int, virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), @parameter2: int, @this: org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, staticinvoke <org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r12, r1, $r0.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1Encodable parameters>, $r0.<org.bouncycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder: int saltLength>, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), virtualinvoke $r2.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1Encodable getParameters()>(), $r0.<org.bouncycastle.asn1.x509.DigestInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, $r2, $r6, virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), $r3, $i1, @parameter1: char[], $r0.<org.bouncycastle.jcajce.PKCS12KeyWithParameters: int iterationCount>, @parameter1: java.security.Key, new org.bouncycastle.asn1.pkcs.PBES2Parameters, (org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, @parameter0: java.lang.Object, $r3, $r7, specialinvoke $r7.<org.bouncycastle.asn1.BERSetParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), @this: org.bouncycastle.asn1.ASN1Set, @this: org.bouncycastle.asn1.x509.DigestInfo, null, $r1[$i2], staticinvoke <org.bouncycastle.asn1.ASN1OctetString: org.bouncycastle.asn1.ASN1OctetString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), @parameter0: int, @this: org.bouncycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilderProvider$1, $r3, r0.<java.io.DataInputStream: java.io.InputStream in>, $r3, $r0.<org.bouncycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilderProvider$1: org.bouncycastle.asn1.x509.AlgorithmIdentifier val$algorithmIdentifier>, i2 << 8, $i1 & 32, virtualinvoke $r13.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r2, (org.bouncycastle.asn1.ASN1Sequence) $r6, $r3, $r10, specialinvoke $r10.<org.bouncycastle.asn1.BEROctetStringParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), $i0, interfaceinvoke $r9.<org.bouncycastle.asn1.ASN1Encodable: org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>(), null, null, (org.bouncycastle.asn1.pkcs.Pfx) $r1, (org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r32, null, $i0, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.SafeBag: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), interfaceinvoke $r11.<org.bouncycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r12), $r2, $r0.<org.bouncycastle.asn1.pkcs.ContentInfo: org.bouncycastle.asn1.ASN1Encodable content>, staticinvoke <org.bouncycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r0, $i1), (org.bouncycastle.asn1.ASN1Sequence) $r2, interfaceinvoke $r5.<org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r0), r1, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r2), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.bouncycastle.asn1.ASN1OctetString: byte[] string>, r1, $r37, new org.bouncycastle.asn1.pkcs.Pfx, $r5, (org.bouncycastle.asn1.pkcs.PBES2Parameters) $r1, @this: org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder, $r1, $i0, new org.bouncycastle.asn1.pkcs.PKCS12PBEParams, @parameter0: java.lang.Object, $r3, $r9, specialinvoke $r9.<org.bouncycastle.asn1.DERExternalParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), $r12, $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), $r2, $r2, @this: org.bouncycastle.jcajce.PKCS12KeyWithParameters, @parameter0: byte[], (java.security.PrivateKey) $r15, $r2, r0.<java.io.DataInputStream: java.io.InputStream in>, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1OctetString: byte[] getOctets()>(), virtualinvoke $r8.<org.bouncycastle.asn1.BERSequenceParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), (org.bouncycastle.asn1.ASN1OctetString) $r15, $r0.<org.bouncycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder: int iterationCount>, virtualinvoke $r1.<java.io.InputStream: int read()>(), $r1, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $r0.<org.bouncycastle.asn1.pkcs.AuthenticatedSafe: org.bouncycastle.asn1.pkcs.ContentInfo[] info>, @parameter1: java.security.Key, @this: org.bouncycastle.asn1.pkcs.PBKDF2Params, new org.bouncycastle.asn1.BEROctetStringParser, r1, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PBES2Parameters: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), (org.bouncycastle.asn1.ASN1Encodable) $r0, @this: org.bouncycastle.asn1.pkcs.MacData, $i0, r0.<java.io.DataInputStream: java.io.InputStream in>, @parameter0: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, $r2, new org.bouncycastle.asn1.BERSetParser, $r0.<org.bouncycastle.asn1.ASN1Set: java.util.Vector set>, staticinvoke <org.bouncycastle.asn1.pkcs.PKCS12PBEParams: org.bouncycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r6), specialinvoke $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.bouncycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), $r0, new org.bouncycastle.asn1.ASN1StreamParser, (org.bouncycastle.asn1.ASN1Sequence) $r0, r1, $i0, (org.bouncycastle.asn1.ASN1Sequence) $r36, interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3), $s5, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @parameter0: java.lang.Object, new java.io.DataInputStream, $r0, r1, new org.bouncycastle.asn1.pkcs.PBKDF2Params, $i12 + $i11, $i0, null, @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, (org.bouncycastle.asn1.ASN1Primitive) $r15, $r0.<org.bouncycastle.asn1.pkcs.MacData: org.bouncycastle.asn1.x509.DigestInfo digInfo>, @parameter0: java.lang.Object, null, $r2, (javax.crypto.interfaces.PBEKey) $r19, $r0.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>(), @parameter2: int, r1, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive readObject()>(), $r0.<org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec pbeKeySpec>, $i0, @this: org.bouncycastle.asn1.ASN1OctetString, $r2, new org.bouncycastle.asn1.BERSequenceParser, new org.bouncycastle.asn1.pkcs.EncryptedData, @parameter0: java.lang.Object, $r0.<org.bouncycastle.asn1.pkcs.SafeBag: org.bouncycastle.asn1.ASN1Set bagAttributes>, @this: org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), (org.bouncycastle.asn1.ASN1Set) $r2, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i1, $i2, $i0), @this: org.bouncycastle.asn1.pkcs.MacData, $i0, virtualinvoke $r9.<org.bouncycastle.asn1.DERExternalParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), (org.bouncycastle.jcajce.PKCS12KeyWithParameters) $r5, new org.bouncycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.bouncycastle.asn1.x509.DigestInfo: byte[] digest>, virtualinvoke $r10.<org.bouncycastle.asn1.BEROctetStringParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), @this: org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher, virtualinvoke $r2.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>(), $i1, $r29[$i0], interfaceinvoke $r9.<org.bouncycastle.asn1.ASN1Encodable: org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>(), @this: org.bouncycastle.asn1.pkcs.PKCS12PBEParams, $r16, new org.bouncycastle.asn1.ASN1InputStream, $i1, $i1, $i0, @parameter0: java.lang.Object, r1, $r0.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: org.bouncycastle.asn1.ASN1Integer iterations>, new java.io.BufferedInputStream, <org.bouncycastle.jce.provider.BouncyCastleProvider: java.util.Map keyInfoConverters>, new org.bouncycastle.asn1.BERApplicationSpecificParser, $i0, $i0, @parameter2: org.bouncycastle.asn1.pkcs.PKCS12PBEParams, $i0 + 1024, null, specialinvoke $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.bouncycastle.asn1.x509.AlgorithmIdentifier)>($b0, $r3, $r2), (javax.crypto.SecretKey) $r3, (org.bouncycastle.asn1.pkcs.PBKDF2Params) $r1, $i0, $r1, i1 << 16, (org.bouncycastle.asn1.ASN1Set) $r15, i0 << 24, @this: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, (org.bouncycastle.asn1.ASN1OctetString) $r6, new org.bouncycastle.asn1.pkcs.SafeBag, $r0.<org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.bouncycastle.asn1.pkcs.PKCS12PBEParams params>, $i1, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), $i1, $i0, null, new org.bouncycastle.asn1.BERTaggedObjectParser, $i13, @parameter1: java.security.Key, $r0.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.bouncycastle.asn1.ASN1OctetString data>, virtualinvoke $r3.<java.io.InputStream: int read()>(), virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.EncryptedData: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @this: org.bouncycastle.asn1.ASN1InputStream, $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.bouncycastle.jcajce.util.JcaJceHelper helper>, virtualinvoke $r1.<javax.crypto.MacSpi: int engineGetMacLength()>(), $r13, $i0, (org.bouncycastle.jcajce.PBKDF1KeyWithParameters) $r9, @parameter1: java.security.Key, $r1, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.bouncycastle.asn1.pkcs.SafeBag) $r1, staticinvoke <org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object)>($r2), r0.<javax.crypto.Mac: javax.crypto.MacSpi spi>, @this: org.bouncycastle.asn1.pkcs.Pfx, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.bouncycastle.asn1.ASN1Set: java.util.Vector set>, r57, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @parameter1: org.bouncycastle.asn1.x509.AlgorithmIdentifier, staticinvoke <org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r2), @parameter0: java.lang.Object, $i1, @this: org.bouncycastle.asn1.pkcs.SafeBag, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.Pfx: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), $r0.<org.bouncycastle.asn1.ASN1Sequence: java.util.Vector seq>, $r1]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r8 = "www.bouncycastle.org", method='<org.bouncycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.vivalnk.feverscout.apk
*** Base package: com.vivalnk.feverscout
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.bugly.proguard.s: byte[] a(java.lang.String,byte[],com.tencent.bugly.proguard.v,java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.android.pushservice.d$4: void a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.android.pushservice.f: void k()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.a.a.b.b.j: java.lang.String d()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.android.pushservice.g.k$1: void a()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of b.b.a.d.c.g.a
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of b.b.a.d.c.g.a
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in b.b.a.d.c.e.c$a
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.r: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.baidu.android.common.a.c: java.lang.String a(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.tencent.bugly.crashreport.common.info.AppInfo: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.baidu.android.pushservice.j.d: java.lang.String a(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.baidu.android.pushservice.j.f: byte[] a(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [77, 70, 49, 120, 73, 89, 65, 68, 79, 90, 51, 107, 51, 90, 77, 73, "utf-8", 65, 105, 122, 67, 100, 82, 72, 73, 108, 81, 79, 105, 75, 52, 77, 61, 81, 77, 76, 122, 76, 116, 86, 53, 121, 90, 107, 72, 103, 83, 69, 77, "utf-8", 104, 84, 68, 121, 121, 101, 61, 81]
[UnitContainer{unit=$r1[0] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 70, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 49, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 120, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 73, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 89, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 65, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 68, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 79, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 51, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 107, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 51, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 73, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "utf-8"), method='<com.baidu.android.pushservice.jni.BaiduAppSSOJni: byte[] getDecrypted(android.content.Context,java.lang.String,byte[])>'}, UnitContainer{unit=$r1[6] = 65, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 105, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 122, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 67, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 100, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 82, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 72, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 73, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 108, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 79, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 105, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 75, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 52, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 77, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 61, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 76, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 122, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 76, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 116, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 86, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 53, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 121, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 107, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 72, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 103, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 83, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 69, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 77, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "utf-8"), method='<com.baidu.android.pushservice.jni.BaiduAppSSOJni: byte[] getEncrypted(android.content.Context,java.lang.String,byte[])>'}, UnitContainer{unit=$r1[2] = 104, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 84, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 68, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 121, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 121, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 101, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 61, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [77, 70, 49, 120, 73, 89, 65, 68, 79, 90, 51, 107, 51, 90, 77, 73, "utf-8", 65, 105, 122, 67, 82, 100, 72, 73, 108, 81, 79, 105, 75, 52, 77, 61, 81, 77, 122, 76, 76, 116, 86, 53, 121, 90, 107, 72, 103, 83, 69, 77, "utf-8", 104, 84, 68, 101, 121, 121, 61, 81]
[UnitContainer{unit=$r1[0] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 70, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 49, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 120, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 73, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 89, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 65, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 68, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 79, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 51, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 107, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 51, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 73, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "utf-8"), method='<com.baidu.android.pushservice.jni.BaiduAppSSOJni: byte[] getDecrypted(android.content.Context,java.lang.String,byte[])>'}, UnitContainer{unit=$r1[6] = 65, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 105, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 122, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 67, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 82, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 100, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 72, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 73, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 108, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 79, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 105, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 75, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 52, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 77, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 61, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 122, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 76, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 76, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 116, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 86, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 53, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 121, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 107, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 72, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 103, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 83, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 69, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 77, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "utf-8"), method='<com.baidu.android.pushservice.jni.BaiduAppSSOJni: byte[] getEncrypted(android.content.Context,java.lang.String,byte[])>'}, UnitContainer{unit=$r1[2] = 104, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 84, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 68, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 101, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 121, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 121, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 61, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://", "http://10.95.41.15:8080"]
[UnitContainer{unit=$r8 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("http://", ""), method='<com.baidu.android.pushservice.g: void b(android.content.Context)>'}, UnitContainer{unit=virtualinvoke $r9.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("http_server", "http://10.95.41.15:8080"), method='<com.baidu.android.pushservice.g: void b(android.content.Context)>'}]
=======================================
Analyzing APK: com.voluntis.txo.oleena.apk
*** Base package: com.voluntis.txo.oleena
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.openudid.OpenUDID_manager: void <init>(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.voluntis.smdfcore.synchronization.service.ServerGateway: void init()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_345[0] = "SHA-1", method='<ly.count.android.sdk.ConnectionProcessor: java.lang.String sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_57[0] = "MD5", method='<com.voluntis.smdfcore.utils.helpers.HashHelper: java.lang.String mdFive(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_100[0] = "MD5", method='<com.voluntis.smdfcore.utils.helpers.HashHelper: java.lang.String mdFive(byte[])>'}, UnitContainer{unit=$fakeLocal_184[0] = "SHA-1", method='<com.voluntis.smdfcore.utils.helpers.HashHelper: java.lang.String shaOne(byte[])>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_145[0] = "SHA-1", method='<com.voluntis.smdfcore.utils.helpers.HashHelper: java.lang.String shaOne(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["fifteenDaysFailed", "temporaryAccessCode", "secondTimeBp", "firstTimeBp", "preferencesDateOfTheMostRecentArticle", "isUserLocked", "isUserLocked", "isUserLocked", "preferencesDateOfTheMostRecentArticle", "preferencesDisplayFailedSynchronizationMessage", "preferencesIsFirstLaunch", "firstAuthentication", "secondTimeBp", "preferencesDisplayFailedSynchronizationMessage", "blockingStatus", "preferencesHasOstomy", "preferencesIsFirstLaunch", "preferencesDailyFailedSynchronization", "numberReminder", "blockingStatus", "preferencesDateSynchronizationFailed", "secondTimeBp", "userEmail", "preferencesIsFirstLaunch", "BloodPressureMode", "preferencesIsFirstSynchronizationFinished", "lastFailedTime", "userEmail", "firstTimeBp", "secondTimeBp", "firstTimeBp", "fifteenDaysFailed", "userEmail", "preferencesIsFirstSynchronizationFinished", "preferencesDailyFailedSynchronization", "firstAuthentication", "numberReminder", "preferencesDateSynchronizationFailed", "lastFailedTime", "preferencesIsFirstAccessToArticles", "BloodPressureMode", "preferencesIsFirstAccessToArticles", "preferencesIsFirstSynchronizationFinished", "firstTimeBp", "preferencesHasOstomy", "preferencesIsFirstSynchronizationFailed", "numberReminder", "true", "temporaryAccessCode", "firstAuthentication", "preferencesAuthenticationStatus", "blockingScreen", "preferencesIsFirstLaunch", "firstTimeBp", "goToTutorial", "preferencesIsFirstSynchronizationFinished", "firstAuthentication", "preferencesAuthenticationStatus", "blockingStatus", "secondTimeBp", "preferencesIsFirstSynchronizationFailed", "blockingStatus", "blockingScreen", "preferencesIsFirstSynchronizationFailed", "false"]
[UnitContainer{unit=$fakeLocal_99[0] = "fifteenDaysFailed", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: boolean isFifteenDaysSynchronizationFailed()>'}, UnitContainer{unit=$fakeLocal_77[0] = "temporaryAccessCode", method='<com.voluntis.txo.nmd.accesscode.data.GreenjayAccessCodeRepository: void saveTemporaryAccessCode(int)>'}, UnitContainer{unit=$fakeLocal_63[0, 1] = "secondTimeBp", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: void saveTime(boolean,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_69[0] = "firstTimeBp", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: java.lang.String getTime(boolean)>'}, UnitContainer{unit=$fakeLocal_44[0] = "preferencesDateOfTheMostRecentArticle", method='<com.voluntis.txo.nmd.mycare.data.ArticlesSerializer: long getMostRecentArticleDate()>'}, UnitContainer{unit=$fakeLocal_31[0] = "isUserLocked", method='<com.voluntis.txo.nmd.common.data.AccessCodeHandler: void setUserLocked(boolean)>'}, UnitContainer{unit=$fakeLocal_29[0] = "isUserLocked", method='<com.voluntis.txo.nmd.common.data.AccessCodeHandler: boolean isUserLocked()>'}, UnitContainer{unit=$fakeLocal_26[0] = "isUserLocked", method='<com.voluntis.txo.nmd.launch.platform.GreenjayApplication: void makeUserLocked()>'}, UnitContainer{unit=$fakeLocal_50[0] = "preferencesDateOfTheMostRecentArticle", method='<com.voluntis.txo.nmd.mycare.data.ArticlesSerializer: void saveTheDateOfTheMostRecentArticle(long)>'}, UnitContainer{unit=$fakeLocal_62[0] = "preferencesDisplayFailedSynchronizationMessage", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void saveShouldDisplayFailedSynchronizationMessage(boolean)>'}, UnitContainer{unit=$fakeLocal_200[0] = "preferencesIsFirstLaunch", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void setFirstLaunch()>'}, UnitContainer{unit=$fakeLocal_153[0, 1] = "firstAuthentication", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void saveDateFirstAuthentication(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_78[0] = "secondTimeBp", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: java.lang.String getTime(boolean)>'}, UnitContainer{unit=$fakeLocal_69[0] = "preferencesDisplayFailedSynchronizationMessage", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: boolean shouldDisplayFailedSynchronizationMessage()>'}, UnitContainer{unit=$fakeLocal_52[0, 1] = "blockingStatus", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void saveBlockingStatus(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_40[0] = "preferencesHasOstomy", method='<com.voluntis.txo.md.mycare.data.GreenjayMyCareRepository: boolean hasOstomy()>'}, UnitContainer{unit=$fakeLocal_196[0] = "preferencesIsFirstLaunch", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: boolean isFirstLaunch()>'}, UnitContainer{unit=$fakeLocal_75[0, 1] = "preferencesDailyFailedSynchronization", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void saveFailedDailySynchronizationDate(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[0] = "numberReminder", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: void saveNumberReminder(int)>'}, UnitContainer{unit=$fakeLocal_51[0, 1] = "blockingStatus", method='<com.voluntis.txo.nmd.main.data.GreenjayMainRepository: void saveTimeBlockingStatus()>'}, UnitContainer{unit=$fakeLocal_131[0, 1] = "preferencesDateSynchronizationFailed", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void saveLastDateSynchronizationSuccess(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[0, 1] = "secondTimeBp", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: void saveReminderFirstTime(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_99[0, 1] = "userEmail", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void login(java.lang.String,java.lang.String,com.voluntis.txo.nmd.launch.domain.LaunchInteractor$AuthenticationStatusCallback)>'}, UnitContainer{unit=$fakeLocal_208[0] = "preferencesIsFirstLaunch", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void removeFirstLaunchDone()>'}, UnitContainer{unit=$fakeLocal_22[0] = "BloodPressureMode", method='<com.voluntis.txo.nmd.bloodpressure.data.GreenjayBloodPressureRepository: void saveMode(boolean)>'}, UnitContainer{unit=$fakeLocal_187[0] = "preferencesIsFirstSynchronizationFinished", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: boolean isFirstSynchroFinished()>'}, UnitContainer{unit=$fakeLocal_38[0] = "lastFailedTime", method='<com.voluntis.txo.nmd.accesscode.data.GreenjayAccessCodeRepository: java.lang.String getDateLockedUser()>'}, UnitContainer{unit=$fakeLocal_129[0] = "userEmail", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: com.voluntis.txo.nmd.profile.domain.Profile loadDemographicProfile()>'}, UnitContainer{unit=$fakeLocal_61[0, 1] = "firstTimeBp", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: void saveTime(boolean,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_75[0] = "secondTimeBp", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: java.lang.String getTime(boolean)>'}, UnitContainer{unit=$fakeLocal_72[0] = "firstTimeBp", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: java.lang.String getTime(boolean)>'}, UnitContainer{unit=$fakeLocal_95[0] = "fifteenDaysFailed", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void saveFifteenDaysSynchronizationFailed(boolean)>'}, UnitContainer{unit=$fakeLocal_46[0] = "userEmail", method='<com.voluntis.txo.nmd.profile.data.GreenjayProfileRepository: com.voluntis.txo.nmd.profile.domain.Profile loadDemographicProfile()>'}, UnitContainer{unit=$fakeLocal_123[0] = "preferencesIsFirstSynchronizationFinished", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void registerFirstSynchronizationFinished()>'}, UnitContainer{unit=$fakeLocal_79[0] = "preferencesDailyFailedSynchronization", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: java.lang.String getLastFailedDailyDateSynchronization()>'}, UnitContainer{unit=$fakeLocal_73[0] = "firstAuthentication", method='<com.voluntis.txo.nmd.accesscode.data.GreenjayAccessCodeRepository: java.lang.String getDateFirstAuthentication()>'}, UnitContainer{unit=$fakeLocal_81[0] = "numberReminder", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void saveNumberReminder(int)>'}, UnitContainer{unit=$fakeLocal_127[0] = "preferencesDateSynchronizationFailed", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: java.lang.String getDateLastSynchronizationSuccess()>'}, UnitContainer{unit=$fakeLocal_31[0, 1] = "lastFailedTime", method='<com.voluntis.txo.nmd.accesscode.data.GreenjayAccessCodeRepository: void saveLockedTime(long)>'}, UnitContainer{unit=$fakeLocal_32[0] = "preferencesIsFirstAccessToArticles", method='<com.voluntis.txo.nmd.mycare.data.ArticlesSerializer: boolean hasAlreadyAccessedToArticles()>'}, UnitContainer{unit=$fakeLocal_26[0] = "BloodPressureMode", method='<com.voluntis.txo.nmd.bloodpressure.data.GreenjayBloodPressureRepository: boolean isAutomatic()>'}, UnitContainer{unit=$fakeLocal_38[0] = "preferencesIsFirstAccessToArticles", method='<com.voluntis.txo.nmd.mycare.data.ArticlesSerializer: void saveFirstAccessToArticles(boolean)>'}, UnitContainer{unit=$fakeLocal_103[0] = "preferencesIsFirstSynchronizationFinished", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: boolean isFirstSynchronizationFinished()>'}, UnitContainer{unit=$fakeLocal_51[0, 1] = "firstTimeBp", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: void saveReminderFirstTime(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_34[0] = "preferencesHasOstomy", method='<com.voluntis.txo.md.mycare.data.GreenjayMyCareRepository: void saveOstomyState(boolean)>'}, UnitContainer{unit=$fakeLocal_109[0] = "preferencesIsFirstSynchronizationFailed", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: boolean isFirstSynchronizationFailed()>'}, UnitContainer{unit=$fakeLocal_56[0] = "numberReminder", method='<com.voluntis.txo.md.bloodpressure.data.GreenjayRecurrentReminderRepository: int getNumberLocalReminder()>'}, UnitContainer{unit=$r0 = "true", method='<java.lang.String: java.lang.String valueOf(boolean)>'}, UnitContainer{unit=$fakeLocal_81[0] = "temporaryAccessCode", method='<com.voluntis.txo.nmd.accesscode.data.GreenjayAccessCodeRepository: int getAccessCodeTemporary()>'}, UnitContainer{unit=$fakeLocal_157[0] = "firstAuthentication", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: java.lang.String getDateFirstAuthentication()>'}, UnitContainer{unit=$fakeLocal_161[0] = "preferencesAuthenticationStatus", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void setAuthenticationStatus(com.voluntis.txo.nmd.launch.domain.AuthenticationStatus)>'}, UnitContainer{unit=$fakeLocal_168[0, 1] = "blockingScreen", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void saveBlockingSynchronization(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_83[0] = "preferencesIsFirstLaunch", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: boolean isFirstLaunch()>'}, UnitContainer{unit=$fakeLocal_58[0, 1] = "firstTimeBp", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void saveReminderFirstTime(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_219[0] = "goToTutorial", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void removeShowTutorial()>'}, UnitContainer{unit=$fakeLocal_212[0] = "preferencesIsFirstSynchronizationFinished", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void removeFirstSynchroFinished()>'}, UnitContainer{unit=$fakeLocal_69[0, 1] = "firstAuthentication", method='<com.voluntis.txo.nmd.accesscode.data.GreenjayAccessCodeRepository: void saveDateFirstAuthentication(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_147[0] = "preferencesAuthenticationStatus", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: com.voluntis.txo.nmd.launch.domain.AuthenticationStatus getAuthenticationStatus()>'}, UnitContainer{unit=$fakeLocal_323[0] = "blockingStatus", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: java.lang.String getBlockingStatus()>'}, UnitContainer{unit=$fakeLocal_59[0, 1] = "secondTimeBp", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void saveReminderFirstTime(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_119[0] = "preferencesIsFirstSynchronizationFailed", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void removeFirstSynchronizationFailed()>'}, UnitContainer{unit=$fakeLocal_56[0] = "blockingStatus", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: java.lang.String getBlockingStatus()>'}, UnitContainer{unit=$fakeLocal_319[0, 1] = "blockingScreen", method='<com.voluntis.txo.nmd.launch.data.GreenjayLaunchRepository: void saveBlockingSynchro(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_115[0] = "preferencesIsFirstSynchronizationFailed", method='<com.voluntis.txo.nmd.synchronization.data.GreenjaySynchronizationRepository: void registerFirstSynchronizationFailed()>'}, UnitContainer{unit=$r0 = "false", method='<java.lang.String: java.lang.String valueOf(boolean)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1324, 1324]
=======================================
Analyzing APK: com.welldoc.platform.android.apk
*** Base package: com.welldoc.platform.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding", "AES/ECB/NoPadding", "AES/ECB/NoPadding", "AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<c.a.b.d.a: java.lang.String a(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<com.lifescan.devicesync.h.a: byte[] d(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<com.lifescan.devicesync.a.a.a.a: byte[] c(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<c.a.b.d.a: java.lang.String b(java.lang.String,java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.c.t: void <init>(d.a.a.a.n.c.o.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.socketio.SocketIOConnection: long nextReconnectDelay(long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.a.m4: long s()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.a.b.b.a.a.f: void a(byte[],int,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.b.a.o.q.g.g: c.b.a.o.h j()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.welldoc.platform.android.ui.home.y: int f(int,int)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of d.a.a.a.n.e.h
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<f.d0.c: g.f a(g.f)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.r: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<d.a.a.a.n.b.i: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<f.d0.c: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.koushikdutta.async.http.spdy.ByteString: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.a.m4: java.security.MessageDigest w()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<h.a.a.a.a.w.r.e: byte[] c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<d.a.a.a.n.b.i: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.b0: java.lang.String a(java.lang.String,com.google.android.gms.common.t,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<d.a.a.a.n.e.h: boolean a(java.security.cert.X509Certificate)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [107, -12, -62, -45, 108, -43, 125, -20, 87, 77, -4, 69, -116, -67, -26, -108, 4, -76, 22, -85, 13, -14, -53, 69, -33, -116, 99, 109, 50, 0, 72, 59]
[UnitContainer{unit=$r0[11] = 107, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -12, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -62, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[2] = -45, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 108, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[12] = -43, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 125, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[4] = -20, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 87, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 77, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[12] = -4, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 69, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[9] = -116, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[6] = -67, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[11] = -26, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -108, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 4, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -76, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 22, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[15] = -85, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 13, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[10] = -14, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[4] = -53, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 69, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[5] = -33, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[15] = -116, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 99, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 109, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 50, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 72, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 59, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?", "http://www.", "http://"]
[UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean b()>'}, UnitContainer{unit=$r0[0] = "http://www.", method='<c.g.a.a.a.k: void <clinit>()>'}, UnitContainer{unit=$r0[2] = "http://", method='<c.g.a.a.a.k: void <clinit>()>'}]
=======================================
Analyzing APK: com.withings.wiscale2.apk
*** Base package: com.withings.wiscale2
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/PKCS7Padding"]
[UnitContainer{unit=$fakeLocal_659[0] = "AES/ECB/PKCS7Padding", method='<io.fabric.sdk.android.services.b.m: javax.crypto.Cipher a(int,java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smack.ReconnectionManager: void <init>(org.jivesoftware.smack.AbstractXMPPConnection)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.comm.network.b.h: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration b(com.withings.comm.network.b.f)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.g: void a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.qf: long x()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.p: void <init>(com.google.android.gms.internal.up,java.lang.String,com.google.android.gms.internal.wg)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smack.util.StringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.ew: java.util.Random a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smack.util.DNSUtil: java.util.List a(java.util.List)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.cc: java.util.Random a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.stepcounter.counter.a: void k()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.dm: java.util.Random a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.a.a.a: void a(com.google.android.gms.a.a.c,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.a.a,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.filetransfer.FileTransferNegotiator: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.ec: java.util.Random a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.l: void a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.a.a: java.lang.String d(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.gr: java.util.Random a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.user.a: java.lang.String b()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.gc: java.util.Random a()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.jivesoftware.smack.util.TLSUtils$AcceptAllTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.jivesoftware.smack.util.TLSUtils$AcceptAllTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.amazon.identity.auth.device.c.g
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.amazon.identity.auth.device.c.g
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.n
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.withings.comm.network.b.a
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in org.jivesoftware.smack.util.TLSUtils$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: b.k sha1(b.k)>'}, UnitContainer{unit=$fakeLocal_31[0] = "MD5", method='<org.jivesoftware.smack.util.MD5: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r0.<com.amazon.identity.auth.device.h.b: void <init>(java.lang.String,int,java.lang.String)>("MD5", 0, "MD5"), method='<com.amazon.identity.auth.device.h.b: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.internal.sj: int a(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_305[0] = "SHA-1", method='<io.fabric.sdk.android.services.b.m: java.lang.String a(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[0] = "MD5", method='<com.withings.wiscale2.utils.a: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_108[0] = "SHA-1", method='<com.withings.comm.a.a: byte[] b(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.my: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.qf: long d(byte[])>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.uf: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_120[0] = "SHA-1", method='<org.jivesoftware.smackx.caps.EntityCapsManager: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<b.k: b.k c()>'}, UnitContainer{unit=$fakeLocal_513[0] = "SHA-1", method='<org.jivesoftware.smackx.vcardtemp.packet.VCard: java.lang.String getAvatarHash()>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA1", method='<io.fabric.sdk.android.services.network.n: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_31[0] = "SHA-1", method='<org.jivesoftware.smack.util.SHA1: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_170[0] = "MD5", method='<com.withings.devicesetup.upgrade.conversation.BluetoothUpgradeConversation: java.lang.String a(java.nio.ByteBuffer)>'}, UnitContainer{unit=$fakeLocal_292[1] = "SHA-1", method='<io.fabric.sdk.android.services.b.m: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_99[0] = "SHA1", method='<com.withings.comm.wpp.a.c: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_54[0] = "MD5", method='<com.withings.util.ak: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.qf: long b(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.a: java.lang.String a(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/releasenotes/fw/model_%d/%s/%s/index.html", "http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("http://%s/releasenotes/fw/model_%d/%s/%s/index.html", $r2), method='<com.withings.wiscale2.device.common.model.k: java.lang.String a(java.lang.String,int,long)>'}, UnitContainer{unit=$r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.ac: boolean f()>'}]
=======================================
Analyzing APK: cymedica.com.evive.apk
*** Base package: cymedica.com.evive
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.vending.expansion.downloader.Helpers: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer.chunk.FormatEvaluator$RandomEvaluator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer.chunk.FormatEvaluator$RandomEvaluator: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_191[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [-29, 0, -47, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 16, 0, 0, 74, 70, 74, 71, 117, 101, -12, 0, 32, -14, 65, -80, 0, 0, 0]
[UnitContainer{unit=$r0[11] = -29, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[6] = -47, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 72, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 16, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 74, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 70, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 74, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 71, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 117, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 101, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -12, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 32, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[9] = -14, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 65, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -80, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1024]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["changeit"]
[UnitContainer{unit=return "changeit", method='<ch.qos.logback.core.net.ssl.KeyStoreFactoryBean: java.lang.String getPassword()>'}]
=======================================
Analyzing APK: de.avetana.apps.spiro.apk
java.lang.ArrayIndexOutOfBoundsException: 777
	at android.content.res.StringBlock.getShort(StringBlock.java:231)
	at android.content.res.StringBlock.getString(StringBlock.java:91)
	at android.content.res.AXmlResourceParser.getName(AXmlResourceParser.java:140)
	at main.util.manifest.ProcessManifest.loadClassesFromBinaryManifest(ProcessManifest.java:115)
	at main.util.manifest.ProcessManifest$1.handleManifest(ProcessManifest.java:97)
	at main.util.manifest.ProcessManifest.handleAndroidManifestFile(ProcessManifest.java:74)
	at main.util.manifest.ProcessManifest.loadManifestFile(ProcessManifest.java:93)
	at main.util.Utils.getBasePackageNameFromApk(Utils.java:71)
	at main.rule.engine.RuleEngine.main(RuleEngine.java:57)
*** Base package: 
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcfw: long zzazx()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.sun.mail.util.SocketFetcher: java.net.Socket startTLS(java.net.Socket,java.util.Properties,java.lang.String)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcfw: long zzah(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD5", method='<com.sun.mail.pop3.Protocol: java.lang.String getDigest(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcch: java.lang.String zzji(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_83[0] = "MD5", method='<com.sun.mail.smtp.DigestMD5: byte[] authClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcay: long zza(com.google.android.gms.internal.zzcgk)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: dental.beam.beamapp.apk
*** Base package: dental.beam.beamapp
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_30[0] = "AES/ECB/NoPadding", method='<dmu: void <init>()>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dental.beam.game.models.Section: void addRandomStar(dnl)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dox: void a(int,int,float,float[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <cdz: biu a(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dental.beam.game.models.Section: int getRandomStarType()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ccb: void c(cba,bim)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dok: void a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dnl: void k()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dnl: void b(dok)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dyp: java.lang.String e()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dnl: void j()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dnl: void a(dnz)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dental.beam.beamapp.activities.profiles.GameRewardFragment: void R()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dkq: void b()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dental.beam.beamapp.events.LoadFromAPIEvent: void <init>(dental.beam.beamapp.events.LoadFromAPIEvent$LoadType)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <anc: void <init>(aoj,java.lang.String,anp)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dental.beam.beamapp.activities.setup.freebrush.SetupFreeBrushFragment: void T()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <bif: void a(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dental.beam.beamapp.views.TimerView: void a(long,long,long,long,long,dental.beam.beamapp.models.BrushState)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dyo: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dyp: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dnl: void m()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dov: void b(float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(dsh,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <don: void a(float,float[],float[],float)>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <cnk: void <init>(java.net.URI,cnx)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of dtj
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_300[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String a(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$r6 = "MD5", method='<cch: biu a(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<bxy: java.lang.String o()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<bhw: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<anj: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1396[0] = "MD5", method='<duw: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<bxm: void a()>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_287[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_57[0] = "MD5", method='<dyp: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_109[0] = "MD5", method='<okio.ByteString: okio.ByteString c()>'}, UnitContainer{unit=$fakeLocal_180[0] = "SHA1", method='<org.java_websocket.drafts.Draft_10: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_329[0] = "MD5", method='<dental.beam.beamapp.activities.setup.freebrush.SetupFreeBrushActivity: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA1", method='<dtj: boolean a(java.security.cert.X509Certificate)>'}]
=======================================
Analyzing APK: healthwatch.activites.apk
*** Base package: healthwatch.activites
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.tagmanager.RandomMacro: com.google.analytics.midtier.proto.containertag.TypeSystem$Value evaluate(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.filetransfer.FileTransferNegotiator: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.ai: void c(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.c$d)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <healthwatch.activities.Plotter: void createImage_Temp(int,java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <healthwatch.activities.Plotter: void createImage(int,java.lang.String,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.tagmanager.ExperimentMacroHelper: void setRandomValues(com.google.tagmanager.DataLayer,com.google.analytics.containertag.proto.Serving$GaExperimentSupplemental)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smack.util.StringUtils: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.ag: boolean eS()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <healthwatch.activities.Plotter_temp: android.graphics.Bitmap SetDisplayPage(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(java.lang.String,com.google.android.gms.analytics.TrackerHandler,com.google.android.gms.analytics.h,com.google.android.gms.analytics.ad,com.google.android.gms.analytics.g,com.google.android.gms.analytics.ac,android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.itextpdf.text.pdf.BaseFont: java.lang.String createSubsetPrefix()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.twilio.sdk.examples.RestExamples: void main(java.lang.String[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.cf: com.google.android.gms.internal.d$a C(java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <healthwatch.activities.PatientDetailList: void onActivityResult(int,int,android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=============================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.sun.mail.util.SocketFetcher: java.net.Socket startTLS(java.net.Socket,java.util.Properties,java.lang.String)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.jivesoftware.smack.ServerTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.jivesoftware.smack.ServerTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.jivesoftware.smack.OpenTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.jivesoftware.smack.OpenTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_99[0] = "MD5", method='<com.itextpdf.text.ImgJBIG2: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_191[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PRStream)>'}, UnitContainer{unit=$fakeLocal_1257[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfPKCS7: byte[] getEncodedPKCS7(byte[],java.util.Calendar,com.itextpdf.text.pdf.TSAClient,byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.gr: java.lang.String R(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.h: java.lang.String a(byte[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_143[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: void <init>()>'}, UnitContainer{unit=$fakeLocal_670[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfPKCS7: boolean verifyTimestampImprint()>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD5", method='<com.sun.mail.pop3.Protocol: java.lang.String getDigest(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ao: java.security.MessageDigest ba()>'}, UnitContainer{unit=$fakeLocal_493[0] = "SHA-1", method='<org.jivesoftware.smackx.packet.VCard: java.lang.String getAvatarHash()>'}, UnitContainer{unit=$fakeLocal_444[0] = "MD5", method='<com.novell.sasl.client.DigestMD5SaslClient: char[] DigestCalcHA1(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_512[0] = "MD5", method='<com.novell.sasl.client.DigestMD5SaslClient: char[] DigestCalcResponse(char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.gj: java.lang.String do()>'}, UnitContainer{unit=$fakeLocal_371[0] = "SHA-1", method='<org.jivesoftware.smack.util.StringUtils: java.lang.String hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_107[0] = "SHA-1", method='<org.jivesoftware.smackx.entitycaps.EntityCapsManager: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_618[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfEncryption: com.itextpdf.text.pdf.PdfDictionary getEncryptionDictionary()>'}, UnitContainer{unit=$r7 = "MD5", method='<com.google.tagmanager.HashMacro: com.google.analytics.midtier.proto.containertag.TypeSystem$Value evaluate(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_759[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfReader: void readDecryptedDocObj()>'}, UnitContainer{unit=$fakeLocal_83[0] = "MD5", method='<com.sun.mail.smtp.DigestMD5: byte[] authClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.analytics.a: java.lang.String aa(java.lang.String)>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.tagmanager.ao: com.google.android.gms.internal.d$a C(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_481[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: byte[] createDocumentId()>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["pass@word1"]
[UnitContainer{unit=$r5 = "pass@word1", method='<healthwatch.networkutilies.HttpClientFactory: org.apache.http.conn.ssl.SSLSocketFactory mySSLSocketFactory()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com/collect", "http://", "http:", "http://", "http://www.google-analytics.com/collect"]
[UnitContainer{unit=$r4 = "http://www.google-analytics.com/collect", method='<com.google.analytics.tracking.android.SimpleNetworkDispatcher: java.net.URL getUrl(com.google.analytics.tracking.android.Hit)>'}, UnitContainer{unit=$r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://"), method='<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()>'}, UnitContainer{unit=$r2 = "http:", method='<com.google.android.gms.analytics.ag: java.net.URL a(com.google.android.gms.analytics.w)>'}, UnitContainer{unit=$r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://"), method='<org.apache.log4j.helpers.SyslogWriter: void <init>(java.lang.String)>'}, UnitContainer{unit=$r2 = "http://www.google-analytics.com/collect", method='<com.google.android.gms.analytics.ag: java.net.URL a(com.google.android.gms.analytics.w)>'}]
=======================================
Analyzing APK: iHealthMyVitals.V2.apk
*** Base package: iHealthMyVitals.V2
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES", "DES/CBC/PKCS5Padding", "DES/CBC/PKCS5Padding", "DES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_-1[0] = "DES", method='<com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_19[0] = "DES/CBC/PKCS5Padding", method='<com.tencent.bugly.proguard.af: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_33[0] = "DES/CBC/PKCS5Padding", method='<com.tencent.bugly.proguard.af: byte[] b(byte[])>'}, UnitContainer{unit=$fakeLocal_113[0] = "DES/ECB/NoPadding", method='<org.apache.commons.httpclient.auth.NTLM: javax.crypto.Cipher getCipher(byte[])>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.connect.auth.b: java.lang.String c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] generateMultipartBoundary()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.mm.sdk.platformtools.Util: int getIntRandom(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.weibo.sdk.android.api.BaseAPI: com.tencent.weibo.sdk.android.network.ReqParam refreshToken(android.content.Context)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.a.f.c.d: void c()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.Bg1Control: boolean m()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.weibo.sdk.android.component.sso.AuthHelper: boolean auth(android.content.Context,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.x: okhttp3.ag a(okhttp3.aa,okhttp3.ah)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.ji: void b(com.flurry.sdk.ji)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.weibo.sdk.android.component.sso.tools.Cryptor: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.test.bp.customview.BPMeasureView: void drawHeart(int,boolean)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.open.b.g: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.Bg1Control: boolean l()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.ins.IdentifyIns: byte[] a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.main.hs.controller.common.HsDataController: java.lang.String generateDataId(java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.d.a.e.c: java.lang.String f()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <d.a.a.a: long a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.base.statistical.okhttp3.OkHttpClient: com.ihealth.communication.base.statistical.okhttp3.WebSocket newWebSocket(com.ihealth.communication.base.statistical.okhttp3.Request,com.ihealth.communication.base.statistical.okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.bugly.proguard.s: byte[] a(java.lang.String,byte[],com.tencent.bugly.proguard.v,java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.weibo.sdk.android.component.Authorize: void onCreate(android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.a$17: void a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.ins.IdentifyIns2: byte[] a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.test.po.controller.PoDataController: java.lang.String generateDataId(java.lang.String,int)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactoryForBPM1$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactoryForBPM1$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.myvitals.customers.EU.ZendeskApiHttpsPost$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.myvitals.customers.EU.ZendeskApiHttpsPost$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.crash.httpsPost$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.crash.httpsPost$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactoryForBPM1$MyX509TrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.myvitals.customers.ZendeskHttpsPost$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.myvitals.customers.ZendeskHttpsPost$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.push.connect.SocketUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.push.connect.SocketUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactory$MyX509TrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.communication.cloud.a.h$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.communication.cloud.a.h$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.cloud.tools.eu.EuropeHttpsPost$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.EuropeHttpsPost$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.utils.Method$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.utils.Method$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.a.f.b.a$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.a.f.b.a$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.communication.utils.OkHttpClientManager$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.communication.utils.OkHttpClientManager$2
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.ihealth.utils.Method$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.ihealth.communication.utils.OkHttpClientManager$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_29[0] = "MD5", method='<com.ihealth.communication.utils.MD5: byte[] md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_2374[0] = "MD5", method='<com.ihealth.cloud.tools.CommCloudUserV5: java.lang.String MD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_370[0] = "MD5", method='<org.apache.commons.httpclient.auth.DigestScheme: java.lang.String createDigest(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_695[0] = "MD5", method='<com.tencent.open.utils.i: java.lang.String f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_58[1] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.HashingSink: com.ihealth.communication.base.statistical.okio.HashingSink sha1(com.ihealth.communication.base.statistical.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_46[0] = "MD5", method='<com.sina.weibo.sdk.utils.MD5: java.lang.String hexdigest(byte[])>'}, UnitContainer{unit=$fakeLocal_81[0] = "MD5", method='<com.ihealth.communication.base.statistical.litepal.util.cipher.CipherUtil: java.lang.String md5Encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_214[0] = "MD5", method='<com.liulishuo.filedownloader.g.f: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_624[0] = "SHA-1", method='<com.facebook.Settings: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_364[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_139[0] = "MD5", method='<com.ihealth.communication.base.statistical.okio.ByteString: com.ihealth.communication.base.statistical.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_541[0] = "MD5", method='<com.tencent.weibo.sdk.android.component.sso.tools.MD5Tools: java.lang.String getMD5String(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<a.a.a.a.a.e.d: java.lang.String b(byte[])>'}, UnitContainer{unit=$fakeLocal_1946[0] = "SHA1", method='<com.ihealth.utils.Method: void checkOfficial()>'}, UnitContainer{unit=$fakeLocal_368[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_682[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudHS6: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[0] = "MD5", method='<org.a.b.b.f: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_62[0] = "MD5", method='<com.ihealth.communication.utils.AppUtils: java.lang.String getOurPackageName(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_557[0] = "MD5", method='<org.apache.commons.httpclient.auth.DigestScheme: java.lang.String createCnonce()>'}, UnitContainer{unit=$fakeLocal_511[0] = "SHA", method='<com.ihealth.login_async.ThirdLogin: void facebookLogin()>'}, UnitContainer{unit=$fakeLocal_1089[0] = "MD5", method='<com.ihealth.communication.manager.iHealthDevicesUpgradeManager: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_618[0] = "SHA-1", method='<com.d.a.e.ay: com.d.a.e.au d()>'}, UnitContainer{unit=$fakeLocal_144[0] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.ByteString: com.ihealth.communication.base.statistical.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1085[0] = "MD5", method='<com.ihealth.main.hs.controller.common.HsDataController: java.lang.String encodeDataId(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_481[0] = "MD5", method='<com.d.a.e.ay: byte[] c()>'}, UnitContainer{unit=$fakeLocal_587[0] = "MD5", method='<com.tencent.weibo.sdk.android.component.sso.tools.MD5Tools: java.lang.String getFileMD5(java.io.File)>'}, UnitContainer{unit=$fakeLocal_527[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudSDK: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.f.d.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1556[0] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.Buffer: com.ihealth.communication.base.statistical.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<f.f: f.f c()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.tencent.mm.algorithm.MD5: byte[] getRawDigest(byte[])>'}, UnitContainer{unit=$fakeLocal_99[0] = "MD5", method='<com.d.a.t: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.tencent.mm.algorithm.MD5: java.lang.String getMessageDigest(byte[])>'}, UnitContainer{unit=$fakeLocal_263[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudCenter: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_849[0] = "MD5", method='<com.ihealth.communication.control.UpgradeControl: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<f.f: f.f d()>'}, UnitContainer{unit=$fakeLocal_166[0] = "MD5", method='<com.tencent.open.utils.g: java.lang.String b(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_542[0] = "MD5", method='<com.tencent.open.utils.i: boolean f(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_2798[0] = "MD5", method='<com.ihealth.communication.control.Bg1Control: java.lang.String h(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_441[0] = "SHA-1", method='<com.tencent.bugly.proguard.z: java.lang.String b(byte[])>'}, UnitContainer{unit=$fakeLocal_339[0] = "SHA1", method='<com.tencent.bugly.crashreport.common.info.AppInfo: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_36[0] = "MD5", method='<com.ihealth.communication.manager.e: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_53[1] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.HashingSource: com.ihealth.communication.base.statistical.okio.HashingSource sha1(com.ihealth.communication.base.statistical.okio.Source)>'}, UnitContainer{unit=$fakeLocal_53[1] = "MD5", method='<com.ihealth.communication.base.statistical.okio.HashingSink: com.ihealth.communication.base.statistical.okio.HashingSink md5(com.ihealth.communication.base.statistical.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_48[1] = "MD5", method='<com.ihealth.communication.base.statistical.okio.HashingSource: com.ihealth.communication.base.statistical.okio.HashingSource md5(com.ihealth.communication.base.statistical.okio.Source)>'}, UnitContainer{unit=$fakeLocal_349[0] = "MD5", method='<com.tencent.bugly.crashreport.common.info.AppInfo: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_1551[0] = "MD5", method='<com.ihealth.communication.base.statistical.okio.Buffer: com.ihealth.communication.base.statistical.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_423[0] = "MD5", method='<com.ihealth.cloud.tools.CommCloudCenter: java.lang.String MD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_372[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [36, 37, 0, 9223372036854775807L, 71, 0, 0, 64, 33, "device_key", 83, 35, 75]
[UnitContainer{unit=$r4[6] = 36, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[7] = 37, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r5[$i3] = 0, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=specialinvoke $r4.<a.a.a.a.a.a.a.b: void <init>(java.lang.String,java.lang.String,java.lang.String,long)>($r1, $r2, $r3, 9223372036854775807L), method='<a.a.a.a.a.a.a.e: a.a.a.a.a.a.a.b a()>'}, UnitContainer{unit=$r4[1] = 71, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r6[$i2] = 0, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r4[4] = 64, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[3] = 33, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r3 = "device_key", method='<com.ihealth.communication.ins.HS6InsSet: boolean setWifi(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r4[2] = 83, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[5] = 35, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[0] = 75, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[UnitContainer{unit=$r0[5] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r0[1] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: [0]
[UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$i1, <com.ihealth.utils.encode.aes.Crypto: int ITERATION_COUNT>, $i0, <com.ihealth.utils.encode.aes.Crypto: int ITERATION_COUNT>, $i0, <com.ihealth.utils.encode.aes.Crypto: int ITERATION_COUNT>, <com.ihealth.utils.encode.aes.Crypto: int ITERATION_COUNT>, 4096, 1000, $i0, 10000]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["passphrase", "ckpwwWMb", "cnquTGXv"]
[UnitContainer{unit=$r5 = "passphrase", method='<com.tencent.open.utils.HttpUtils$b: void <init>()>'}, UnitContainer{unit=$r1 = "ckpwwWMb", method='<com.ihealth.cloud.tools.eu.SSLCustomSocketFactory: javax.net.ssl.SSLSocketFactory getOTPSocketFactory(android.content.Context)>'}, UnitContainer{unit=$r2 = "cnquTGXv", method='<com.ihealth.cloud.tools.eu.SSLCustomSocketFactory: javax.net.ssl.SSLSocketFactory getOTPSocketFactory(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://qzs.qq.com/open/mobile/invite/sdk_invite.html?", "http://test.ihealthlabs.com:8000/applog/availabilitystatisticsinfoupload.htm", "http://", "http://qzs.qq.com/open/mobile/request/sdk_request.html?", "http://", "http://test.ihealthlabs.com:8000/applog/appdailylogupload.htm", "http://qzs.qq.com/open/mobile/sendstory/sdk_sendstory_v1.3.html?", "http://qzs.qq.com", "http://www.andykhan.com/jexcelapi/index.html", "http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", "http://", "http://openmobile.qq.com/oauth2.0/m_authorize?", "http://hub.samsungapps.com/product/appCheck.as?", "http://www.andykhan.com/jexcelapi/index.html"]
[UnitContainer{unit=$fakeLocal_127[1] = "http://qzs.qq.com/open/mobile/invite/sdk_invite.html?", method='<com.tencent.open.SocialApiIml: void invite(android.app.Activity,android.os.Bundle,com.tencent.tauth.IUiListener)>'}, UnitContainer{unit=$fakeLocal_83[0] = "http://test.ihealthlabs.com:8000/applog/availabilitystatisticsinfoupload.htm", method='<com.ihealth.crash.CommCloudLogcatV5: boolean usabilityUpload(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("auth://", "http://"), method='<com.tencent.open.utils.i: org.json.JSONObject c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_101[1] = "http://qzs.qq.com/open/mobile/request/sdk_request.html?", method='<com.tencent.open.SocialApiIml: void a(android.app.Activity,java.lang.String,android.os.Bundle,com.tencent.tauth.IUiListener)>'}, UnitContainer{unit=$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("auth://", "http://"), method='<com.tencent.open.utils.i: android.os.Bundle b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_142[0] = "http://test.ihealthlabs.com:8000/applog/appdailylogupload.htm", method='<com.ihealth.crash.CommCloudLogcatV5: boolean logUpload(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_147[1] = "http://qzs.qq.com/open/mobile/sendstory/sdk_sendstory_v1.3.html?", method='<com.tencent.open.SocialApiIml: void story(android.app.Activity,android.os.Bundle,com.tencent.tauth.IUiListener)>'}, UnitContainer{unit=$fakeLocal_345[1] = "http://qzs.qq.com", method='<com.tencent.open.SocialApiIml: void writeEncryToken(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_232[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<e.c.a.af: void <init>(e.c.a.bd,e.t,e.x)>'}, UnitContainer{unit=$r2 = "http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", method='<com.ihealth.communication.cloud.a.c: com.ihealth.communication.cloud.a.c$a a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://"), method='<com.flurry.sdk.ly: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_270[1] = "http://openmobile.qq.com/oauth2.0/m_authorize?", method='<com.tencent.connect.auth.AuthAgent: int a(boolean,com.tencent.tauth.IUiListener)>'}, UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}, UnitContainer{unit=$fakeLocal_211[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<e.c.a.af: void <init>(e.c.a.bd,e.t,e.x)>'}]
=======================================
Analyzing APK: insulia.diabetes.us.apk
*** Base package: insulia.diabetes.us
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES", "AES/ECB/PKCS7Padding"]
[UnitContainer{unit=$fakeLocal_191[0] = "AES", method='<com.voluntis.smdf.utils.CryptoHelper: boolean uncipherByteArray(byte[],byte[],byte[],int)>'}, UnitContainer{unit=$fakeLocal_83[0] = "AES", method='<com.voluntis.smdf.utils.CryptoHelper: boolean cipherByteArray(byte[],byte[],byte[],int)>'}, UnitContainer{unit=$fakeLocal_658[0] = "AES/ECB/PKCS7Padding", method='<io.fabric.sdk.android.services.common.CommonUtils: javax.crypto.Cipher createCipher(int,java.lang.String)>'}]
=======================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.voluntis.smdf.synchronization.gateway.ServerGateway: void init(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.voluntis.smdf.ui.adapters.QuestionnaireAdapter: void <init>(android.content.Context,java.util.ArrayList,com.voluntis.smdf.database.entity.instance_uuid_database_object.database_object.uuid_database_object.auditrail.SMDFRecord,java.util.HashMap,com.voluntis.smdf.database.dao.instance_uuid_database_object.database_object.uuid.auditrail.DynamicListDao,com.voluntis.smdf.questionnaires.listeners.IQuestionnaireListener$IOnQuestionClickListener,com.voluntis.smdf.questionnaires.listeners.IQuestionnaireListener$IOnRemoveIteration)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.HttpRequest$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of io.fabric.sdk.android.services.network.HttpRequest$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in io.fabric.sdk.android.services.network.HttpRequest$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_94[0] = "MD5", method='<com.voluntis.smdf.utils.HashHelper: java.lang.String mdFive(byte[])>'}, UnitContainer{unit=$fakeLocal_184[0] = "SHA-1", method='<insulia.diabetes.utils.SecurePreferences: java.lang.String hashKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_287[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(byte[])>'}, UnitContainer{unit=$fakeLocal_181[0] = "SHA-1", method='<com.voluntis.smdf.utils.CryptoHelper: boolean uncipherByteArray(byte[],byte[],byte[],int)>'}, UnitContainer{unit=$fakeLocal_98[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_304[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_73[0] = "SHA-1", method='<com.voluntis.smdf.utils.CryptoHelper: boolean cipherByteArray(byte[],byte[],byte[],int)>'}, UnitContainer{unit=$fakeLocal_295[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(byte[])>'}, UnitContainer{unit=$fakeLocal_283[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.voluntis.smdf.utils.HashHelper: java.lang.String mdFive(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_291[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_145[0] = "SHA-1", method='<com.voluntis.smdf.utils.HashHelper: java.lang.String shaOne(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_187[0] = "SHA-1", method='<com.voluntis.smdf.utils.HashHelper: java.lang.String shaOne(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["pref_authentication_key_definition_date", "pref_activity_need_reload_after_culture_changed", "first_synchronization_is_successful", "pref_license_expiration_date", "number_of_remaining_attempts", "access_code_background_time", "first_synchronization_is_successful", "pref_unaccepted_consent_uuid", "navigation_drawer_learned", "access_code_background_time", "date_displayed_one_of_coaching_message", "pref_authentication_key_definition_date", "pref_product_expiration_date", "culture", "date_displayed_one_of_coaching_message", "application_background_time", "concentration_unit", "nb_days_since_last_synchronization", "access_code", "suggested_dose_hypo", "pref_time_changed_manually", "pref_license_expiration_date", "new_treatment_is_received", "date_time_application_gone_background", "application_background_time", "a1c_unit", "first_synchronization_is_successful", "concentration_unit", "concentration_unit", "prefixes_url", "date_displayed_one_of_coaching_message", "first_synchronization_is_successful", "a1c_unit", "concentration_unit", "concentration_unit", "pref_email", "application_background_time", "number_of_remaining_attempts", "culture", "first_synchronization_is_successful", "first_synchronization_is_successful", "concentration_unit", "concentration_unit", "new_treatment_is_received", "culture", "date_displayed_one_of_coaching_message", "date_time_application_gone_background", "pref_time_changed_manually", "a1c_unit", "a1c_unit", "access_code_background_time", "date_time_application_gone_background", "access_code", "pref_activity_need_reload_after_culture_changed", 0, "pref_activity_need_reload_after_culture_changed", "pref_authentication_key_definition_date", "pref_license_expiration_date", "concentration_unit", "navigation_drawer_learned", "nb_days_since_last_synchronization", "access_code", "a1c_unit", "pref_license_expiration_date", "pref_unaccepted_consent_uuid", "nb_days_since_last_synchronization", "pref_license_expiration_date", "titrationStatusFullTitration", "culture", "navigation_drawer_learned", "application_background_time", "languages_available", "culture", "a1c_unit", "pref_password", "culture", "new_treatment_is_received", "first_synchronization_is_successful", "pref_email", "access_code_definition_date", "first_synchronization_is_successful", "a1c_unit", "concentration_unit", "pref_password", "access_code_definition_date", "pref_activity_need_reload_after_culture_changed", "titrationStatusSteadyState", "access_code_background_time", "first_synchronization_is_successful", "pref_product_expiration_date", "concentration_unit", "first_synchronization_is_successful", "navigation_drawer_learned", "culture", "first_synchronization_is_successful", "culture", "culture", "pref_activity_need_reload_after_culture_changed", "pref_license_expiration_date", "application_background_time", "suggested_dose_hypo", "pref_license_expiration_date", "new_treatment_is_received", "concentration_unit", "pref_product_expiration_date", "first_synchronization_is_successful", "pref_product_expiration_date", "culture", "concentration_unit", "languages_available", "height_value", "new_treatment_is_received", "first_synchronization_is_successful", "application_background_time", "access_code", "first_synchronization_is_successful", "pref_time_changed_manually"]
[UnitContainer{unit=$fakeLocal_82[0] = "pref_authentication_key_definition_date", method='<insulia.diabetes.synchronization.SynchronizationFirstActivity: void synchronizationEnded(int)>'}, UnitContainer{unit=$fakeLocal_299[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.navigation.NavigationActivity: void onResume()>'}, UnitContainer{unit=$fakeLocal_361[0] = "first_synchronization_is_successful", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: void checkForBlockingScreen()>'}, UnitContainer{unit=$fakeLocal_245[0] = "pref_license_expiration_date", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: boolean isLicenseExpired()>'}, UnitContainer{unit=$fakeLocal_400[0] = "number_of_remaining_attempts", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void setNumberOfRemainingAttempts(int)>'}, UnitContainer{unit=$fakeLocal_433[0] = "access_code_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void saveAccessCodeBackgrounTime()>'}, UnitContainer{unit=$fakeLocal_283[0] = "first_synchronization_is_successful", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: boolean isDoseProposalRecommendationShouldBeDisplayed(insulia.diabetes.database.record.BgRecord,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)>'}, UnitContainer{unit=$fakeLocal_229[0] = "pref_unaccepted_consent_uuid", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}, UnitContainer{unit=$fakeLocal_90[0] = "navigation_drawer_learned", method='<insulia.diabetes.account.AccountWeightActivity: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_345[0] = "access_code_background_time", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_695[0] = "date_displayed_one_of_coaching_message", method='<insulia.diabetes.logbook.ui.LogbookFragment: void onActivityResult(int,int,android.content.Intent)>'}, UnitContainer{unit=$fakeLocal_326[0] = "pref_authentication_key_definition_date", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_504[0] = "pref_product_expiration_date", method='<insulia.diabetes.synchronization.SynchronizationSingleton: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_547[0] = "culture", method='<insulia.diabetes.synchronization.SynchronizationSingleton$1: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_95[0] = "date_displayed_one_of_coaching_message", method='<insulia.diabetes.services.SetAlertsReadDate: void processResponse(byte[])>'}, UnitContainer{unit=$fakeLocal_342[0] = "application_background_time", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_250[0] = "concentration_unit", method='<insulia.diabetes.wizard.WizardPresenter: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_92[0] = "nb_days_since_last_synchronization", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage loadInBackground()>'}, UnitContainer{unit=$fakeLocal_248[0] = "access_code", method='<insulia.diabetes.authentication.LoginActivity: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_251[0] = "suggested_dose_hypo", method='<insulia.diabetes.wizard.steps.suggested_dose.SuggestedDoseActivity: void storeDateTimeAskRecentHypoExperience(long)>'}, UnitContainer{unit=$fakeLocal_194[0] = "pref_time_changed_manually", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}, UnitContainer{unit=$fakeLocal_288[0] = "pref_license_expiration_date", method='<insulia.diabetes.blocking_screen.interactor.BlockingScreenInteractor: void onReceive(android.app.Activity,insulia.diabetes.blocking_screen.interactor.IBlockingScreenInteractor$BlockingScreenCallbacks,int,com.voluntis.smdf.synchronization.service.SMDFService$ISMDFService,int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_526[0] = "new_treatment_is_received", method='<insulia.diabetes.synchronization.SynchronizationSingleton: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_444[0] = "date_time_application_gone_background", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_213[0] = "application_background_time", method='<insulia.diabetes.Redwing: void onCreate()>'}, UnitContainer{unit=$fakeLocal_128[0] = "a1c_unit", method='<insulia.diabetes.other_data.OtherDataListActivity$1: void onLoadFinished(android.content.Loader,insulia.diabetes.database.record.PatientTreatmentRecord)>'}, UnitContainer{unit=$fakeLocal_200[0] = "first_synchronization_is_successful", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}, UnitContainer{unit=$fakeLocal_144[0] = "concentration_unit", method='<insulia.diabetes.treatment.TreatmentFragment: void onLoadFinished(android.content.Loader,insulia.diabetes.database.record.PatientTreatmentRecord)>'}, UnitContainer{unit=$fakeLocal_79[0] = "concentration_unit", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: boolean isThereRecommendation(int,int)>'}, UnitContainer{unit=$fakeLocal_254[0] = "prefixes_url", method='<insulia.diabetes.Redwing: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_282[0] = "date_displayed_one_of_coaching_message", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage coachingMessageToBeDisplayedInLogbookScreen()>'}, UnitContainer{unit=$fakeLocal_188[0] = "first_synchronization_is_successful", method='<insulia.diabetes.blocking_screen.interactor.BlockingScreenInteractor: void onButtonCheckAgainClick(android.app.Activity,boolean,boolean,int,insulia.diabetes.blocking_screen.interactor.IBlockingScreenInteractor$BlockingScreenCallbacks)>'}, UnitContainer{unit=$fakeLocal_553[0] = "a1c_unit", method='<insulia.diabetes.synchronization.SynchronizationSingleton$1: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_551[0] = "concentration_unit", method='<insulia.diabetes.synchronization.SynchronizationSingleton$1: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_26[0] = "concentration_unit", method='<insulia.diabetes.utils.CheckTreatmentIntegrity: boolean isValidTreatment(android.content.Context,insulia.diabetes.database.record.PatientTreatmentRecord,java.lang.Boolean)>'}, UnitContainer{unit=$fakeLocal_78[0] = "pref_email", method='<insulia.diabetes.authentication.LoginFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_256[0] = "application_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_304[0] = "number_of_remaining_attempts", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_613[0] = "culture", method='<insulia.diabetes.synchronization.SynchronizationSingleton: boolean checkIfNewCultureIsReceived()>'}, UnitContainer{unit=$fakeLocal_122[0] = "first_synchronization_is_successful", method='<insulia.diabetes.authentication.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_117[0] = "first_synchronization_is_successful", method='<insulia.diabetes.navigation.NavigationActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_57[0] = "concentration_unit", method='<insulia.diabetes.logbook.ui.LogBookAdapter: void <init>(android.content.Context,java.util.ArrayList)>'}, UnitContainer{unit=$fakeLocal_78[0] = "concentration_unit", method='<insulia.diabetes.statistics.StatisticsFragment: void onResume()>'}, UnitContainer{unit=$fakeLocal_525[0] = "new_treatment_is_received", method='<insulia.diabetes.synchronization.SynchronizationSingleton: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_101[0] = "culture", method='<insulia.diabetes.database.dao.RegionPhoneNumberDao: java.util.List getRegionalPhoneNumbersFromType(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_66[0] = "date_displayed_one_of_coaching_message", method='<insulia.diabetes.services.SetAlertsReadDate: void processResponse(byte[])>'}, UnitContainer{unit=$fakeLocal_443[0] = "date_time_application_gone_background", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_174[0] = "pref_time_changed_manually", method='<insulia.diabetes.blocking_screen.ui.BlockingScreenActivity: void onDialogDialogButtonWasClicked(int,int)>'}, UnitContainer{unit=$fakeLocal_45[0] = "a1c_unit", method='<insulia.diabetes.other_data.OtherDataListAdapter: void <init>(android.content.Context,int)>'}, UnitContainer{unit=$fakeLocal_124[0] = "a1c_unit", method='<insulia.diabetes.other_data.OtherDataFragment: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_337[0] = "access_code_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_191[0] = "date_time_application_gone_background", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}, UnitContainer{unit=$fakeLocal_301[0] = "access_code", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_266[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.Redwing: void onActivityResumed(android.app.Activity)>'}, UnitContainer{unit=$b4 = 0, method='<insulia.diabetes.utils.SecurePreferences: byte[] buildKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_276[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.navigation.NavigationActivity: void onNavigationDrawerItemSelected(int)>'}, UnitContainer{unit=$fakeLocal_368[0] = "pref_authentication_key_definition_date", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_235[0] = "pref_license_expiration_date", method='<insulia.diabetes.about_and_help.AboutAndHelpFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_421[0] = "concentration_unit", method='<insulia.diabetes.logbook.ui.LogbookFragment: void displayCoachingMessage(insulia.diabetes.database.message.DialogMessage,boolean)>'}, UnitContainer{unit=$fakeLocal_94[0] = "navigation_drawer_learned", method='<insulia.diabetes.account.AccountHeightActivity: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_474[0] = "nb_days_since_last_synchronization", method='<insulia.diabetes.logbook.ui.LogbookFragment: void displayCoachingMessage(insulia.diabetes.database.message.DialogMessage,boolean)>'}, UnitContainer{unit=$fakeLocal_358[0] = "access_code", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_221[0] = "a1c_unit", method='<insulia.diabetes.other_data.OtherDataChartActivity: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_428[0] = "pref_license_expiration_date", method='<insulia.diabetes.logbook.ui.LogbookFragment: void displayCoachingMessage(insulia.diabetes.database.message.DialogMessage,boolean)>'}, UnitContainer{unit=$fakeLocal_185[0] = "pref_unaccepted_consent_uuid", method='<insulia.diabetes.blocking_screen.interactor.BlockingScreenInteractor: void onButtonCheckAgainClick(android.app.Activity,boolean,boolean,int,insulia.diabetes.blocking_screen.interactor.IBlockingScreenInteractor$BlockingScreenCallbacks)>'}, UnitContainer{unit=$fakeLocal_199[0] = "nb_days_since_last_synchronization", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage checkIfTimeLastSynchronizationIsTooOld()>'}, UnitContainer{unit=$fakeLocal_236[0] = "pref_license_expiration_date", method='<insulia.diabetes.authentication.LoginActivity: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_299[0] = "titrationStatusFullTitration", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage coachingMessageToBeDisplayedInLogbookScreen()>'}, UnitContainer{unit=$fakeLocal_616[0] = "culture", method='<insulia.diabetes.synchronization.SynchronizationSingleton: boolean checkIfNewCultureIsReceived()>'}, UnitContainer{unit=$fakeLocal_64[0] = "navigation_drawer_learned", method='<insulia.diabetes.navigation.NavigationDrawerFragment: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_187[0] = "application_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_79[0] = "languages_available", method='<insulia.diabetes.services.GetRegionInfoByUser: void processResponse(byte[])>'}, UnitContainer{unit=$fakeLocal_119[0] = "culture", method='<insulia.diabetes.account.AccountLoader: java.util.List loadInBackground()>'}, UnitContainer{unit=$fakeLocal_139[0] = "a1c_unit", method='<insulia.diabetes.treatment.TreatmentFragment: void onLoadFinished(android.content.Loader,insulia.diabetes.database.record.PatientTreatmentRecord)>'}, UnitContainer{unit=$fakeLocal_79[0] = "pref_password", method='<insulia.diabetes.authentication.LoginFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_54[0] = "culture", method='<insulia.diabetes.wizard.steps.WizardFragment: void onConfigurationChanged(android.content.res.Configuration)>'}, UnitContainer{unit=$fakeLocal_73[0] = "new_treatment_is_received", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage loadInBackground()>'}, UnitContainer{unit=$fakeLocal_363[0] = "first_synchronization_is_successful", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_40[0] = "pref_email", method='<insulia.diabetes.SplashScreenActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_255[0] = "access_code_definition_date", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_73[0] = "first_synchronization_is_successful", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isSynchronizationError()>'}, UnitContainer{unit=$fakeLocal_79[0] = "a1c_unit", method='<insulia.diabetes.wizard.other_data.a1c.WizardA1cPresenter: int getUnit()>'}, UnitContainer{unit=$fakeLocal_40[0] = "concentration_unit", method='<insulia.diabetes.wizard.steps.suggested_dose.hypo.SuggestedDoseHypoFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_41[0] = "pref_password", method='<insulia.diabetes.SplashScreenActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_325[0] = "access_code_definition_date", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_298[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.navigation.NavigationActivity: void onResume()>'}, UnitContainer{unit=$fakeLocal_298[0] = "titrationStatusSteadyState", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage coachingMessageToBeDisplayedInLogbookScreen()>'}, UnitContainer{unit=$fakeLocal_323[0] = "access_code_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_161[0] = "first_synchronization_is_successful", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: void checkIfThereAreCoachingMessage(boolean)>'}, UnitContainer{unit=$fakeLocal_289[0] = "pref_product_expiration_date", method='<insulia.diabetes.blocking_screen.interactor.BlockingScreenInteractor: void onReceive(android.app.Activity,insulia.diabetes.blocking_screen.interactor.IBlockingScreenInteractor$BlockingScreenCallbacks,int,com.voluntis.smdf.synchronization.service.SMDFService$ISMDFService,int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_45[0] = "concentration_unit", method='<insulia.diabetes.wizard.HypoglycemiaManager: void <init>(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_442[0] = "first_synchronization_is_successful", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_124[0] = "navigation_drawer_learned", method='<insulia.diabetes.account.AccountLanguageActivity: void setCultureInSMDFPreferenceProfile(android.app.Activity,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_172[0] = "culture", method='<insulia.diabetes.Redwing: void updateLocaleIfNeeded(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_369[0] = "first_synchronization_is_successful", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_152[0] = "culture", method='<insulia.diabetes.Redwing: java.lang.String getCulture()>'}, UnitContainer{unit=$fakeLocal_153[0] = "culture", method='<insulia.diabetes.about_and_help.AboutAndHelpFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_546[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.synchronization.SynchronizationSingleton$1: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_167[0] = "pref_license_expiration_date", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage checkIfLicenseSoonExpired()>'}, UnitContainer{unit=$fakeLocal_434[0] = "application_background_time", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_102[0] = "suggested_dose_hypo", method='<insulia.diabetes.wizard.steps.suggested_dose.SuggestedDoseActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_503[0] = "pref_license_expiration_date", method='<insulia.diabetes.synchronization.SynchronizationSingleton: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_81[0] = "new_treatment_is_received", method='<insulia.diabetes.synchronization.SynchronizationFirstActivity: void synchronizationEnded(int)>'}, UnitContainer{unit=$fakeLocal_61[0] = "concentration_unit", method='<insulia.diabetes.titration.CalculationDetails: void <init>(boolean,int,android.content.Context,int)>'}, UnitContainer{unit=$fakeLocal_319[0] = "pref_product_expiration_date", method='<insulia.diabetes.about_and_help.AboutAndHelpFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_265[0] = "first_synchronization_is_successful", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_237[0] = "pref_product_expiration_date", method='<insulia.diabetes.authentication.LoginActivity: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_122[0] = "culture", method='<insulia.diabetes.account.AccountLanguageActivity: void setCultureInSMDFPreferenceProfile(android.app.Activity,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_292[0] = "concentration_unit", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: boolean isDoseProposalRecommendationShouldBeDisplayed(insulia.diabetes.database.record.BgRecord,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)>'}, UnitContainer{unit=$fakeLocal_159[0] = "languages_available", method='<insulia.diabetes.account.AccountLanguageActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_85[0] = "height_value", method='<insulia.diabetes.account.profile.ProfileDetailActivity: void updateDetails()>'}, UnitContainer{unit=$fakeLocal_634[0] = "new_treatment_is_received", method='<insulia.diabetes.logbook.ui.LogbookFragment: void onActivityResult(int,int,android.content.Intent)>'}, UnitContainer{unit=$fakeLocal_80[0] = "first_synchronization_is_successful", method='<insulia.diabetes.synchronization.SynchronizationFirstActivity: void synchronizationEnded(int)>'}, UnitContainer{unit=$fakeLocal_439[0] = "application_background_time", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_253[0] = "access_code", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_278[0] = "first_synchronization_is_successful", method='<insulia.diabetes.navigation.NavigationActivity: void onNavigationDrawerItemSelected(int)>'}, UnitContainer{unit=$fakeLocal_192[0] = "pref_time_changed_manually", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["pref_authentication_key_definition_date", "pref_activity_need_reload_after_culture_changed", "first_synchronization_is_successful", "pref_license_expiration_date", "number_of_remaining_attempts", "access_code_background_time", "first_synchronization_is_successful", "pref_unaccepted_consent_uuid", "navigation_drawer_learned", "access_code_background_time", "date_displayed_one_of_coaching_message", "pref_authentication_key_definition_date", "pref_product_expiration_date", "culture", "date_displayed_one_of_coaching_message", "application_background_time", "concentration_unit", "nb_days_since_last_synchronization", "access_code", "suggested_dose_hypo", "pref_time_changed_manually", "pref_license_expiration_date", "new_treatment_is_received", "date_time_application_gone_background", "application_background_time", "a1c_unit", "first_synchronization_is_successful", "concentration_unit", "concentration_unit", "prefixes_url", "date_displayed_one_of_coaching_message", "first_synchronization_is_successful", "a1c_unit", "concentration_unit", "concentration_unit", "pref_email", "application_background_time", "number_of_remaining_attempts", "culture", "first_synchronization_is_successful", "first_synchronization_is_successful", "concentration_unit", "concentration_unit", "new_treatment_is_received", "culture", "date_displayed_one_of_coaching_message", "date_time_application_gone_background", "pref_time_changed_manually", "a1c_unit", "a1c_unit", "access_code_background_time", "date_time_application_gone_background", "access_code", "pref_activity_need_reload_after_culture_changed", 0, "pref_activity_need_reload_after_culture_changed", "pref_authentication_key_definition_date", "pref_license_expiration_date", "concentration_unit", "navigation_drawer_learned", "nb_days_since_last_synchronization", "access_code", "a1c_unit", "pref_license_expiration_date", "pref_unaccepted_consent_uuid", "nb_days_since_last_synchronization", "pref_license_expiration_date", "titrationStatusFullTitration", "culture", "navigation_drawer_learned", "application_background_time", "languages_available", "culture", "a1c_unit", "pref_password", "culture", "new_treatment_is_received", "first_synchronization_is_successful", "pref_email", "access_code_definition_date", "first_synchronization_is_successful", "a1c_unit", "concentration_unit", "pref_password", "access_code_definition_date", "pref_activity_need_reload_after_culture_changed", "titrationStatusSteadyState", "access_code_background_time", "first_synchronization_is_successful", "pref_product_expiration_date", "concentration_unit", "first_synchronization_is_successful", "navigation_drawer_learned", "culture", "first_synchronization_is_successful", "culture", "culture", "pref_activity_need_reload_after_culture_changed", "pref_license_expiration_date", "application_background_time", "suggested_dose_hypo", "pref_license_expiration_date", "new_treatment_is_received", "concentration_unit", "pref_product_expiration_date", "first_synchronization_is_successful", "pref_product_expiration_date", "culture", "concentration_unit", "languages_available", "height_value", "new_treatment_is_received", "first_synchronization_is_successful", "application_background_time", "access_code", "first_synchronization_is_successful", "pref_time_changed_manually"]
[UnitContainer{unit=$fakeLocal_82[0] = "pref_authentication_key_definition_date", method='<insulia.diabetes.synchronization.SynchronizationFirstActivity: void synchronizationEnded(int)>'}, UnitContainer{unit=$fakeLocal_299[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.navigation.NavigationActivity: void onResume()>'}, UnitContainer{unit=$fakeLocal_361[0] = "first_synchronization_is_successful", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: void checkForBlockingScreen()>'}, UnitContainer{unit=$fakeLocal_245[0] = "pref_license_expiration_date", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: boolean isLicenseExpired()>'}, UnitContainer{unit=$fakeLocal_400[0] = "number_of_remaining_attempts", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void setNumberOfRemainingAttempts(int)>'}, UnitContainer{unit=$fakeLocal_433[0] = "access_code_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void saveAccessCodeBackgrounTime()>'}, UnitContainer{unit=$fakeLocal_283[0] = "first_synchronization_is_successful", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: boolean isDoseProposalRecommendationShouldBeDisplayed(insulia.diabetes.database.record.BgRecord,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)>'}, UnitContainer{unit=$fakeLocal_229[0] = "pref_unaccepted_consent_uuid", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}, UnitContainer{unit=$fakeLocal_90[0] = "navigation_drawer_learned", method='<insulia.diabetes.account.AccountWeightActivity: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_345[0] = "access_code_background_time", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_695[0] = "date_displayed_one_of_coaching_message", method='<insulia.diabetes.logbook.ui.LogbookFragment: void onActivityResult(int,int,android.content.Intent)>'}, UnitContainer{unit=$fakeLocal_326[0] = "pref_authentication_key_definition_date", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_504[0] = "pref_product_expiration_date", method='<insulia.diabetes.synchronization.SynchronizationSingleton: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_547[0] = "culture", method='<insulia.diabetes.synchronization.SynchronizationSingleton$1: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_95[0] = "date_displayed_one_of_coaching_message", method='<insulia.diabetes.services.SetAlertsReadDate: void processResponse(byte[])>'}, UnitContainer{unit=$fakeLocal_342[0] = "application_background_time", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_250[0] = "concentration_unit", method='<insulia.diabetes.wizard.WizardPresenter: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_92[0] = "nb_days_since_last_synchronization", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage loadInBackground()>'}, UnitContainer{unit=$fakeLocal_248[0] = "access_code", method='<insulia.diabetes.authentication.LoginActivity: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_251[0] = "suggested_dose_hypo", method='<insulia.diabetes.wizard.steps.suggested_dose.SuggestedDoseActivity: void storeDateTimeAskRecentHypoExperience(long)>'}, UnitContainer{unit=$fakeLocal_194[0] = "pref_time_changed_manually", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}, UnitContainer{unit=$fakeLocal_288[0] = "pref_license_expiration_date", method='<insulia.diabetes.blocking_screen.interactor.BlockingScreenInteractor: void onReceive(android.app.Activity,insulia.diabetes.blocking_screen.interactor.IBlockingScreenInteractor$BlockingScreenCallbacks,int,com.voluntis.smdf.synchronization.service.SMDFService$ISMDFService,int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_526[0] = "new_treatment_is_received", method='<insulia.diabetes.synchronization.SynchronizationSingleton: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_444[0] = "date_time_application_gone_background", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_213[0] = "application_background_time", method='<insulia.diabetes.Redwing: void onCreate()>'}, UnitContainer{unit=$fakeLocal_128[0] = "a1c_unit", method='<insulia.diabetes.other_data.OtherDataListActivity$1: void onLoadFinished(android.content.Loader,insulia.diabetes.database.record.PatientTreatmentRecord)>'}, UnitContainer{unit=$fakeLocal_200[0] = "first_synchronization_is_successful", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}, UnitContainer{unit=$fakeLocal_144[0] = "concentration_unit", method='<insulia.diabetes.treatment.TreatmentFragment: void onLoadFinished(android.content.Loader,insulia.diabetes.database.record.PatientTreatmentRecord)>'}, UnitContainer{unit=$fakeLocal_79[0] = "concentration_unit", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: boolean isThereRecommendation(int,int)>'}, UnitContainer{unit=$fakeLocal_254[0] = "prefixes_url", method='<insulia.diabetes.Redwing: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_282[0] = "date_displayed_one_of_coaching_message", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage coachingMessageToBeDisplayedInLogbookScreen()>'}, UnitContainer{unit=$fakeLocal_188[0] = "first_synchronization_is_successful", method='<insulia.diabetes.blocking_screen.interactor.BlockingScreenInteractor: void onButtonCheckAgainClick(android.app.Activity,boolean,boolean,int,insulia.diabetes.blocking_screen.interactor.IBlockingScreenInteractor$BlockingScreenCallbacks)>'}, UnitContainer{unit=$fakeLocal_553[0] = "a1c_unit", method='<insulia.diabetes.synchronization.SynchronizationSingleton$1: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_551[0] = "concentration_unit", method='<insulia.diabetes.synchronization.SynchronizationSingleton$1: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_26[0] = "concentration_unit", method='<insulia.diabetes.utils.CheckTreatmentIntegrity: boolean isValidTreatment(android.content.Context,insulia.diabetes.database.record.PatientTreatmentRecord,java.lang.Boolean)>'}, UnitContainer{unit=$fakeLocal_78[0] = "pref_email", method='<insulia.diabetes.authentication.LoginFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_256[0] = "application_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_304[0] = "number_of_remaining_attempts", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_613[0] = "culture", method='<insulia.diabetes.synchronization.SynchronizationSingleton: boolean checkIfNewCultureIsReceived()>'}, UnitContainer{unit=$fakeLocal_122[0] = "first_synchronization_is_successful", method='<insulia.diabetes.authentication.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_117[0] = "first_synchronization_is_successful", method='<insulia.diabetes.navigation.NavigationActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_57[0] = "concentration_unit", method='<insulia.diabetes.logbook.ui.LogBookAdapter: void <init>(android.content.Context,java.util.ArrayList)>'}, UnitContainer{unit=$fakeLocal_78[0] = "concentration_unit", method='<insulia.diabetes.statistics.StatisticsFragment: void onResume()>'}, UnitContainer{unit=$fakeLocal_525[0] = "new_treatment_is_received", method='<insulia.diabetes.synchronization.SynchronizationSingleton: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_101[0] = "culture", method='<insulia.diabetes.database.dao.RegionPhoneNumberDao: java.util.List getRegionalPhoneNumbersFromType(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_66[0] = "date_displayed_one_of_coaching_message", method='<insulia.diabetes.services.SetAlertsReadDate: void processResponse(byte[])>'}, UnitContainer{unit=$fakeLocal_443[0] = "date_time_application_gone_background", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_174[0] = "pref_time_changed_manually", method='<insulia.diabetes.blocking_screen.ui.BlockingScreenActivity: void onDialogDialogButtonWasClicked(int,int)>'}, UnitContainer{unit=$fakeLocal_45[0] = "a1c_unit", method='<insulia.diabetes.other_data.OtherDataListAdapter: void <init>(android.content.Context,int)>'}, UnitContainer{unit=$fakeLocal_124[0] = "a1c_unit", method='<insulia.diabetes.other_data.OtherDataFragment: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_337[0] = "access_code_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_191[0] = "date_time_application_gone_background", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}, UnitContainer{unit=$fakeLocal_301[0] = "access_code", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_266[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.Redwing: void onActivityResumed(android.app.Activity)>'}, UnitContainer{unit=$b4 = 0, method='<insulia.diabetes.utils.SecurePreferences: byte[] buildKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_276[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.navigation.NavigationActivity: void onNavigationDrawerItemSelected(int)>'}, UnitContainer{unit=$fakeLocal_368[0] = "pref_authentication_key_definition_date", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_235[0] = "pref_license_expiration_date", method='<insulia.diabetes.about_and_help.AboutAndHelpFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_421[0] = "concentration_unit", method='<insulia.diabetes.logbook.ui.LogbookFragment: void displayCoachingMessage(insulia.diabetes.database.message.DialogMessage,boolean)>'}, UnitContainer{unit=$fakeLocal_94[0] = "navigation_drawer_learned", method='<insulia.diabetes.account.AccountHeightActivity: void onClick(android.view.View)>'}, UnitContainer{unit=$fakeLocal_474[0] = "nb_days_since_last_synchronization", method='<insulia.diabetes.logbook.ui.LogbookFragment: void displayCoachingMessage(insulia.diabetes.database.message.DialogMessage,boolean)>'}, UnitContainer{unit=$fakeLocal_358[0] = "access_code", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_221[0] = "a1c_unit", method='<insulia.diabetes.other_data.OtherDataChartActivity: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_428[0] = "pref_license_expiration_date", method='<insulia.diabetes.logbook.ui.LogbookFragment: void displayCoachingMessage(insulia.diabetes.database.message.DialogMessage,boolean)>'}, UnitContainer{unit=$fakeLocal_185[0] = "pref_unaccepted_consent_uuid", method='<insulia.diabetes.blocking_screen.interactor.BlockingScreenInteractor: void onButtonCheckAgainClick(android.app.Activity,boolean,boolean,int,insulia.diabetes.blocking_screen.interactor.IBlockingScreenInteractor$BlockingScreenCallbacks)>'}, UnitContainer{unit=$fakeLocal_199[0] = "nb_days_since_last_synchronization", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage checkIfTimeLastSynchronizationIsTooOld()>'}, UnitContainer{unit=$fakeLocal_236[0] = "pref_license_expiration_date", method='<insulia.diabetes.authentication.LoginActivity: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_299[0] = "titrationStatusFullTitration", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage coachingMessageToBeDisplayedInLogbookScreen()>'}, UnitContainer{unit=$fakeLocal_616[0] = "culture", method='<insulia.diabetes.synchronization.SynchronizationSingleton: boolean checkIfNewCultureIsReceived()>'}, UnitContainer{unit=$fakeLocal_64[0] = "navigation_drawer_learned", method='<insulia.diabetes.navigation.NavigationDrawerFragment: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_187[0] = "application_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_79[0] = "languages_available", method='<insulia.diabetes.services.GetRegionInfoByUser: void processResponse(byte[])>'}, UnitContainer{unit=$fakeLocal_119[0] = "culture", method='<insulia.diabetes.account.AccountLoader: java.util.List loadInBackground()>'}, UnitContainer{unit=$fakeLocal_139[0] = "a1c_unit", method='<insulia.diabetes.treatment.TreatmentFragment: void onLoadFinished(android.content.Loader,insulia.diabetes.database.record.PatientTreatmentRecord)>'}, UnitContainer{unit=$fakeLocal_79[0] = "pref_password", method='<insulia.diabetes.authentication.LoginFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_54[0] = "culture", method='<insulia.diabetes.wizard.steps.WizardFragment: void onConfigurationChanged(android.content.res.Configuration)>'}, UnitContainer{unit=$fakeLocal_73[0] = "new_treatment_is_received", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage loadInBackground()>'}, UnitContainer{unit=$fakeLocal_363[0] = "first_synchronization_is_successful", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_40[0] = "pref_email", method='<insulia.diabetes.SplashScreenActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_255[0] = "access_code_definition_date", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_73[0] = "first_synchronization_is_successful", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isSynchronizationError()>'}, UnitContainer{unit=$fakeLocal_79[0] = "a1c_unit", method='<insulia.diabetes.wizard.other_data.a1c.WizardA1cPresenter: int getUnit()>'}, UnitContainer{unit=$fakeLocal_40[0] = "concentration_unit", method='<insulia.diabetes.wizard.steps.suggested_dose.hypo.SuggestedDoseHypoFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_41[0] = "pref_password", method='<insulia.diabetes.SplashScreenActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_325[0] = "access_code_definition_date", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_298[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.navigation.NavigationActivity: void onResume()>'}, UnitContainer{unit=$fakeLocal_298[0] = "titrationStatusSteadyState", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage coachingMessageToBeDisplayedInLogbookScreen()>'}, UnitContainer{unit=$fakeLocal_323[0] = "access_code_background_time", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onResume(boolean,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_161[0] = "first_synchronization_is_successful", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: void checkIfThereAreCoachingMessage(boolean)>'}, UnitContainer{unit=$fakeLocal_289[0] = "pref_product_expiration_date", method='<insulia.diabetes.blocking_screen.interactor.BlockingScreenInteractor: void onReceive(android.app.Activity,insulia.diabetes.blocking_screen.interactor.IBlockingScreenInteractor$BlockingScreenCallbacks,int,com.voluntis.smdf.synchronization.service.SMDFService$ISMDFService,int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_45[0] = "concentration_unit", method='<insulia.diabetes.wizard.HypoglycemiaManager: void <init>(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_442[0] = "first_synchronization_is_successful", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_124[0] = "navigation_drawer_learned", method='<insulia.diabetes.account.AccountLanguageActivity: void setCultureInSMDFPreferenceProfile(android.app.Activity,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_172[0] = "culture", method='<insulia.diabetes.Redwing: void updateLocaleIfNeeded(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_369[0] = "first_synchronization_is_successful", method='<insulia.diabetes.Redwing: void applicationGoesToForeground(android.app.Activity)>'}, UnitContainer{unit=$fakeLocal_152[0] = "culture", method='<insulia.diabetes.Redwing: java.lang.String getCulture()>'}, UnitContainer{unit=$fakeLocal_153[0] = "culture", method='<insulia.diabetes.about_and_help.AboutAndHelpFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_546[0] = "pref_activity_need_reload_after_culture_changed", method='<insulia.diabetes.synchronization.SynchronizationSingleton$1: void onLoadFinished(android.content.Loader,java.util.List)>'}, UnitContainer{unit=$fakeLocal_167[0] = "pref_license_expiration_date", method='<insulia.diabetes.logbook.loader.LogbookMessagesLoader: insulia.diabetes.database.message.DialogMessage checkIfLicenseSoonExpired()>'}, UnitContainer{unit=$fakeLocal_434[0] = "application_background_time", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_102[0] = "suggested_dose_hypo", method='<insulia.diabetes.wizard.steps.suggested_dose.SuggestedDoseActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_503[0] = "pref_license_expiration_date", method='<insulia.diabetes.synchronization.SynchronizationSingleton: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_81[0] = "new_treatment_is_received", method='<insulia.diabetes.synchronization.SynchronizationFirstActivity: void synchronizationEnded(int)>'}, UnitContainer{unit=$fakeLocal_61[0] = "concentration_unit", method='<insulia.diabetes.titration.CalculationDetails: void <init>(boolean,int,android.content.Context,int)>'}, UnitContainer{unit=$fakeLocal_319[0] = "pref_product_expiration_date", method='<insulia.diabetes.about_and_help.AboutAndHelpFragment: void onViewCreated(android.view.View,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_265[0] = "first_synchronization_is_successful", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_237[0] = "pref_product_expiration_date", method='<insulia.diabetes.authentication.LoginActivity: void onEventReceived(int,java.lang.Object[])>'}, UnitContainer{unit=$fakeLocal_122[0] = "culture", method='<insulia.diabetes.account.AccountLanguageActivity: void setCultureInSMDFPreferenceProfile(android.app.Activity,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_292[0] = "concentration_unit", method='<insulia.diabetes.logbook.presenter.LogbookPresenter: boolean isDoseProposalRecommendationShouldBeDisplayed(insulia.diabetes.database.record.BgRecord,java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Boolean)>'}, UnitContainer{unit=$fakeLocal_159[0] = "languages_available", method='<insulia.diabetes.account.AccountLanguageActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_85[0] = "height_value", method='<insulia.diabetes.account.profile.ProfileDetailActivity: void updateDetails()>'}, UnitContainer{unit=$fakeLocal_634[0] = "new_treatment_is_received", method='<insulia.diabetes.logbook.ui.LogbookFragment: void onActivityResult(int,int,android.content.Intent)>'}, UnitContainer{unit=$fakeLocal_80[0] = "first_synchronization_is_successful", method='<insulia.diabetes.synchronization.SynchronizationFirstActivity: void synchronizationEnded(int)>'}, UnitContainer{unit=$fakeLocal_439[0] = "application_background_time", method='<insulia.diabetes.Redwing$1: void run()>'}, UnitContainer{unit=$fakeLocal_253[0] = "access_code", method='<insulia.diabetes.authentication.access_code.interactor.AccessCodeInteractor: void onKeyBoardItemClick(android.app.Activity,int,boolean,insulia.diabetes.authentication.access_code.interactor.IAccessCodeInteractor$AccessCodeCallbacks)>'}, UnitContainer{unit=$fakeLocal_278[0] = "first_synchronization_is_successful", method='<insulia.diabetes.navigation.NavigationActivity: void onNavigationDrawerItemSelected(int)>'}, UnitContainer{unit=$fakeLocal_192[0] = "pref_time_changed_manually", method='<insulia.diabetes.blocking_screen.BlockingScreenLoader: int isBlockingData()>'}]
=======================================
Analyzing APK: io.healthy.dip.e2e.apk
*** Base package: io.healthy.dip.e2e
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e70: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <p50: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <jm: void <init>(cd0,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <r50: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pf0: void <init>(java.util.HashMap,java.lang.String,java.lang.String,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e70: void a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <s50: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <s50: java.lang.String d()>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA-1", "SHA-1", "MD5", "SHA1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_56[0] = "SHA1", method='<p50: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<jp0: jp0 w()>'}, UnitContainer{unit=$fakeLocal_26[1] = "SHA-1", method='<dn: void <init>(kc0)>'}, UnitContainer{unit=$fakeLocal_19[0] = "MD5", method='<s50: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_23[0] = "SHA-1", method='<bc0: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_40[1] = "SHA-1", method='<bc0: java.lang.String a(java.lang.String[])>'}]
=======================================
Analyzing APK: jiuan.androidBg.start.apk
*** Base package: jiuan.androidBg.start
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.igluco.utils.i: int h()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.bugly.proguard.s: byte[] a(java.lang.String,byte[],com.tencent.bugly.proguard.v,java.util.Map)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.e.g: boolean p()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.igluco.service.notification.NotificationService: void b(com.ihealth.igluco.db.ReminderDataClass)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ey: long y()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.hb: java.lang.String r()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.a.a.a: boolean a(com.google.android.gms.a.a.a$a,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.itextpdf.text.pdf.BaseFont: java.lang.String createSubsetPrefix()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.ins.be: byte[] a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.igluco.utils.i: int i()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.e.g: boolean o()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.c.b$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.c.b$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.customers.EU.g$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.customers.EU.g$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.communication.cloud.a.p
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.communication.cloud.a.p
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.newapi.NetManager$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.newapi.NetManager$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.c.d$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.c.d$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.tools.d$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.tools.d$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "MD5", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.bg: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.tencent.bugly.crashreport.common.info.AppInfo: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.itextpdf.text.ImgJBIG2: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: byte[] createDocumentId()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.e.aj: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.v: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfPKCS7: boolean verifyTimestampImprint()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.igluco.net.tools.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.igluco.net.newapi.NetManager: java.lang.String MD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PRStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.e.g: java.lang.String i(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.flurry.sdk.jn: byte[] f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.cloud.a: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.ihealth.igluco.utils.i: void l()>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: void <init>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfPKCS7: byte[] getEncodedPKCS7(byte[],java.util.Calendar,com.itextpdf.text.pdf.TSAClient,byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ey: long b(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.f.x: java.lang.String o(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.utils.l: byte[] a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.z: long a(com.google.android.gms.internal.fm)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["ckpwwWMb", "mg", "u"]
[UnitContainer{unit=$r4 = "ckpwwWMb", method='<com.ihealth.igluco.net.c.d: javax.net.ssl.SSLSocketFactory a()>'}, UnitContainer{unit=$r7 = "mg", method='<com.ihealth.igluco.net.b: int a(java.lang.String,java.lang.String,java.util.ArrayList)>'}, UnitContainer{unit=$r7 = "u", method='<com.ihealth.igluco.net.b: int a(java.lang.String,java.lang.String,java.util.ArrayList)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", "http://www.andykhan.com/jexcelapi/index.html", "http://test.ihealthlabs.com:8000/apicenter/ServiceHostListByCountry_get.htm", "http://test.ihealthlabs.com:8000/apicenter/ServiceHostListByCountry_get.htm", "http://testnop.ihealthlabs.com/cate.htm", "http://test.ihealthlabs.com:8000/applog/appdailylogupload.htm", "http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=$r1 = "http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", method='<com.ihealth.communication.cloud.a.g: com.ihealth.communication.cloud.a.h a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<e.c.a.af: void <init>(e.c.a.bd,e.t,e.x)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://test.ihealthlabs.com:8000/apicenter/ServiceHostListByCountry_get.htm", method='<com.ihealth.igluco.net.d: int a()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://test.ihealthlabs.com:8000/apicenter/ServiceHostListByCountry_get.htm", method='<com.ihealth.igluco.net.d: int a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://testnop.ihealthlabs.com/cate.htm", method='<com.ihealth.igluco.ui.settings.shop.ShopActivity: java.lang.String b()>'}, UnitContainer{unit=$r0.<com.ihealth.igluco.net.e: java.lang.String e> = "http://test.ihealthlabs.com:8000/applog/appdailylogupload.htm", method='<com.ihealth.igluco.net.e: boolean a(java.lang.String,java.lang.String)>'}, UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}]
=======================================
Analyzing APK: md.reset.reSET.apk
*** Base package: md.reset.reSET
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerServiceGcm: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotification: void <init>(com.facebook.react.bridge.ReactApplicationContext)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "MD5", "sha1", "SHA-1", "md5", "MD5", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_221[0] = "MD5", method='<com.tonyodev.fetch2core.FetchCoreUtils: java.lang.String getFileMd5String(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzam: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_202[0] = "MD5", method='<com.tonyodev.fetch2core.FetchCoreUtils: java.lang.String getMd5String(byte[],int,int)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: md.reset.reSETO.apk
*** Base package: md.reset.reSETO
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerServiceGcm: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotification: void <init>(com.facebook.react.bridge.ReactApplicationContext)>
=============================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "MD5", "sha1", "SHA-1", "md5", "MD5", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_221[0] = "MD5", method='<com.tonyodev.fetch2core.FetchCoreUtils: java.lang.String getFileMd5String(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzam: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_202[0] = "MD5", method='<com.tonyodev.fetch2core.FetchCoreUtils: java.lang.String getMd5String(byte[],int,int)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: me.clarius.clarius.apk
*** Base package: me.clarius.clarius
Analyzing APK: microlife.a6p2.bluetooth.app.apk
*** Base package: microlife.a6p2.bluetooth.app
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.Wd: long u()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.a.a.a.c.e.Hf: long a()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.A: void <init>(d.a.a.a.a.c.a.a,double)>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of d.a.a.a.a.e.k
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<d.a.a.a.a.e.k: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<d.a.a.a.a.b.l: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<d.a.a.a.a.b.l: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.p: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA-1", method='<com.google.android.gms.common.z: java.lang.String a(java.lang.String,com.google.android.gms.common.r,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.internal.Wd: java.security.MessageDigest t()>'}]
=======================================
Analyzing APK: net.learn2act.apk
*** Base package: net.learn2act
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzc: void zzea(java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "MD5", "MD5", "SHA1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_207[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_287[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1396[0] = "MD5", method='<okio.Buffer: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzt: java.lang.String zzfi(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_291[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(byte[])>'}, UnitContainer{unit=$fakeLocal_300[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzn: void zziJ()>'}, UnitContainer{unit=$fakeLocal_196[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_283[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzaj: long zzr(byte[])>'}, UnitContainer{unit=$fakeLocal_109[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_279[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_218[0] = "SHA-1", method='<okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_71[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_31[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_46[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}]
=======================================
Analyzing APK: nl.euforea.sinusitishealth.apk
*** Base package: nl.euforea.sinusitishealth
Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded
	at soot.jimple.toolkits.typing.fast.TypeResolver.applyAssignmentConstraints(TypeResolver.java:488)
	at soot.jimple.toolkits.typing.fast.TypeResolver.inferTypes(TypeResolver.java:144)
	at soot.jimple.toolkits.typing.TypeAssigner.internalTransform(TypeAssigner.java:121)
	at soot.BodyTransformer.transform(BodyTransformer.java:55)
	at soot.BodyTransformer.transform(BodyTransformer.java:59)
	at soot.dexpler.DexBody.jimplify(DexBody.java:660)
	at soot.dexpler.DexMethod$1.getBody(DexMethod.java:119)
	at soot.SootMethod.retrieveActiveBody(SootMethod.java:402)
	at main.util.NamedMethodMap.buildCallerCalleeRelation(NamedMethodMap.java:93)
	at main.analyzer.BaseAnalyzer.analyzeSliceInternal(BaseAnalyzer.java:60)
	at main.analyzer.ApkAnalyzer.analyzeSlices(ApkAnalyzer.java:64)
	at main.rule.base.BaseRuleChecker.checkRule(BaseRuleChecker.java:55)
	at main.rule.InsecureAssymCryptoFinder.checkAssym(InsecureAssymCryptoFinder.java:52)
	at main.rule.InsecureAssymCryptoFinder.checkRule(InsecureAssymCryptoFinder.java:34)
	at main.rule.engine.RuleEngine.main(RuleEngine.java:61)
Analyzing APK: smartbag.a11health.com.smartbag_android.apk
*** Base package: smartbag.a11health.com.smartbag_android
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,pl.edu.icm.jlargearrays.FloatLargeArray)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.Benchmark: double[][] benchmarkJavaArraysDoubleRandom(long[],int[],int,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,double[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,float[][])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,pl.edu.icm.jlargearrays.DoubleLargeArray)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,double[][][])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_1D(long,pl.edu.icm.jlargearrays.DoubleLargeArray)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_1D(long,double[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,pl.edu.icm.jlargearrays.DoubleLargeArray)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,pl.edu.icm.jlargearrays.FloatLargeArray)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.LargeArrayUtils: pl.edu.icm.jlargearrays.LargeArray generateRandom(pl.edu.icm.jlargearrays.LargeArrayType,long)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_1D(long,float[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_1D(long,pl.edu.icm.jlargearrays.FloatLargeArray)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,double[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.Benchmark: double[][] benchmarkJLargeArraysByteRandom(long[],int[],int,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.Benchmark: double[][] benchmarkJLargeArraysDoubleRandom(long[],int[],int,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,double[][])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,float[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.Benchmark: double[][] benchmarkJavaArraysByteRandom(long[],int[],int,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,float[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,float[][][])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: today.onedrop.android.apk
*** Base package: today.onedrop.android
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.ParsePushBroadcastReceiver: androidx.core.app.NotificationCompat$Builder getNotification(android.content.Context,android.content.Intent)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.ParseRequest: bolts.Task executeAsync(com.parse.ParseHttpClient,com.parse.http.ParseHttpRequest,com.parse.ProgressCallback,bolts.Task)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.raw.Mod: int[] random(int[])>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfy: long zzmj()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jsoup.helper.DataUtil: java.lang.String mimeBoundary()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.spongycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <today.onedrop.android.common.GenericObject: java.lang.String randomStringWithLength(int)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <today.onedrop.android.log.food.search.FatSecretRestClient: java.lang.String nonce()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECFieldElement)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.LocalIdManager: void <init>(java.io.File)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.perf.internal.zzt: boolean zza(boolean,float)>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=============================================
=============================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement sqrt()>
=============================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "SHA1", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_30[0] = "MD5", method='<org.spongycastle.openpgp.operator.jcajce.JcaKeyFingerprintCalculator: byte[] calculateFingerprint(org.spongycastle.bcpg.PublicKeyPacket)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_276[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_54[0] = "MD5", method='<today.onedrop.android.network.CryptoUtils: byte[] md5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_281[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_55[0] = "SHA1", method='<org.spongycastle.openpgp.operator.jcajce.JcaKeyFingerprintCalculator: byte[] calculateFingerprint(org.spongycastle.bcpg.PublicKeyPacket)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_156[0] = "MD5", method='<com.pubnub.api.vendor.Crypto: byte[] md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfy: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA1", method='<org.spongycastle.cert.jcajce.JcaX509ExtensionUtils: void <init>()>'}, UnitContainer{unit=$fakeLocal_767[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_110[0] = "SHA-1", method='<com.google.firebase.perf.internal.RemoteConfigManager: java.lang.String zzh(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_272[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_56[0] = "SHA-1", method='<com.google.firebase.perf.internal.zzv: long zzg(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA1", method='<org.spongycastle.openpgp.operator.jcajce.SHA1PGPDigestCalculator: void <init>()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_28[0] = "MD5", method='<com.parse.ParseDigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_280[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_380[0] = "MD5", method='<io.branch.indexing.ContentDiscoverer$HashHelper: void <init>(io.branch.indexing.ContentDiscoverer)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["method=recipes.search", "method=recipe.get", "max_results=50", "3d4ed80d2ab0423c9151c64c98d9f3df&", "max_results=50", "method=recipes.search"]
[UnitContainer{unit=$r4[0] = "method=recipes.search", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipesAtPageNumber(java.lang.String,int)>'}, UnitContainer{unit=$r2[0] = "method=recipe.get", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipe(long)>'}, UnitContainer{unit=$r3[1] = "max_results=50", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipes(java.lang.String)>'}, UnitContainer{unit=$r2 = "3d4ed80d2ab0423c9151c64c98d9f3df&", method='<today.onedrop.android.log.food.search.FatSecretRestClient: java.lang.String sign(java.lang.String,java.lang.String,java.lang.String[])>'}, UnitContainer{unit=$r4[1] = "max_results=50", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipesAtPageNumber(java.lang.String,int)>'}, UnitContainer{unit=$r3[0] = "method=recipes.search", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipes(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [1]
[UnitContainer{unit=$fakeLocal_254[2] = 1, method='<org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[],boolean)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$i0, $i1 & 32, $r0.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.ASN1Integer iterations>, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), (org.spongycastle.asn1.pkcs.Pfx) $r1, (org.spongycastle.asn1.ASN1Encodable) $r2, new org.spongycastle.asn1.ASN1StreamParser, $r0.<org.spongycastle.asn1.pkcs.PBKDF2Params: org.spongycastle.asn1.ASN1Integer iterationCount>, $r3, i3 << 0, $r3, $r9, specialinvoke $r9.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $r2, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), @this: org.spongycastle.asn1.pkcs.PBKDF2Params, $r14, @parameter0: byte[], @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>, $i0, (org.spongycastle.jcajce.PKCS12Key) $r2, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.SafeBag: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $i1, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.ContentInfo contentInfo>, virtualinvoke $r14.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, r1, @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier, (org.spongycastle.asn1.pkcs.PKCS12PBEParams) $r1, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: int itCount>, $r0.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1Encodable content>, (org.spongycastle.jcajce.PKCS12KeyWithParameters) $r5, @this: org.spongycastle.asn1.x509.DigestInfo, $r1, @parameter1: char[], $r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>, (org.spongycastle.asn1.ASN1OctetString) $r6, $i0, $r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Vector seq>, null, 1, $i2, $r3, $r6, specialinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>(), $r2, @parameter0: java.lang.Object, virtualinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $i0 & 1023, $r2, @this: org.spongycastle.asn1.pkcs.KeyDerivationFunc, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>(), (org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: int saltLength>, @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, i0, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $i0, $r12, $r3, @this: org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder, $r16, virtualinvoke $r2.<java.math.BigInteger: int intValue()>(), $r2, lengthof $r6, @parameter2: int, (org.spongycastle.asn1.ASN1Sequence) $r6, $i0, staticinvoke <org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r2), @this: org.spongycastle.asn1.ASN1InputStream, @parameter0: byte[], -1, @parameter0: byte[], null, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $i10 + $i9, $i0, (javax.crypto.SecretKey) $r4, $r2, $i0, r1, $i0, $i1, null, $r1, $i0, $r1, $r2, @this: org.spongycastle.asn1.pkcs.Pfx, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedData: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>($b0, $r3, $r2), (org.spongycastle.asn1.ASN1Set) $r0, staticinvoke <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter getAsymmetricKeyInfoConverter(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r2), $i0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $i1, $i0, i0, $r0.<org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.KeyDerivationFunc func>, r1, @parameter4: int, @this: org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilderProvider$1, $r0.<org.spongycastle.asn1.x509.DigestInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, r1, $i0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r2), @this: org.spongycastle.asn1.pkcs.MacData, virtualinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), @parameter0: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r2.<java.io.InputStream: int read()>(), staticinvoke <org.spongycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0), virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int readLength()>(), (org.spongycastle.asn1.ASN1Sequence) $r2, @this: org.spongycastle.asn1.pkcs.SafeBag, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $b4 & 255, r0.<java.io.DataInputStream: java.io.InputStream in>, r1, @parameter2: int, $r3, null, r53, new java.io.BufferedInputStream, $r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder: int iterationCount>, (java.security.PrivateKey) $r15, @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams, @parameter1: java.security.Key, virtualinvoke r0.<java.util.Random: int next(int)>(32), @parameter0: int, @parameter1: java.security.Key, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), new org.spongycastle.asn1.BERApplicationSpecificParser, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.spongycastle.asn1.pkcs.AuthenticatedSafe) $r1, r1, new org.spongycastle.asn1.pkcs.Pfx, (org.spongycastle.asn1.pkcs.PBKDF2Params) $r1, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: int itCount>, specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), virtualinvoke $r7.<org.spongycastle.asn1.BERSetParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), r1, i0, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBES2Parameters: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.spongycastle.asn1.pkcs.PBKDF2Params) $r3, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, $r1, $i1, $r0, $i0, $r2, specialinvoke $r2.<org.spongycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), $r3, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.Pfx: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @this: org.spongycastle.asn1.x509.AlgorithmIdentifier, @parameter0: java.lang.Object, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r1, null, $r3, $r8, specialinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $r37, $r4, $i0, r1, $i1, null, r1, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.spongycastle.asn1.pkcs.PBKDF2Params params>, $r0.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: org.spongycastle.asn1.pkcs.ContentInfo[] info>, $r2, (org.spongycastle.asn1.ASN1OctetString) $r15, new org.spongycastle.asn1.BERSetParser, (org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r32, new org.spongycastle.asn1.BEROctetStringParser, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams: org.spongycastle.asn1.pkcs.PBEParameter params>, @this: org.spongycastle.asn1.pkcs.MacData, r1, (org.spongycastle.jcajce.PBKDF1Key) $r1, staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1), $i0, new org.spongycastle.asn1.DERExternalParser, new org.spongycastle.asn1.pkcs.PBES2Parameters, r1, $r0, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Set bagAttributes>, null, $r0.<org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder: org.spongycastle.jcajce.util.JcaJceHelper helper>, @this: org.spongycastle.asn1.pkcs.MacData, @this: org.spongycastle.asn1.x509.DigestInfo, @parameter0: int, new org.spongycastle.asn1.pkcs.SafeBag, $r0, $i0, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, (org.spongycastle.asn1.ASN1Set) $r2, $i0, $r0.<org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder: int iterationCount>, $r1[$i2], $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable parameters>, r0.<java.io.DataInputStream: java.io.InputStream in>, $r0.<org.spongycastle.jcajce.PBKDF1KeyWithParameters: int iterationCount>, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), null, @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.asn1.x509.DigestInfo: byte[] digest>, @this: org.spongycastle.asn1.pkcs.PBES2Parameters, i2 << 8, new org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, (org.spongycastle.asn1.ASN1Encodable) $r0, $r7, @this: org.spongycastle.jcajce.PBKDF1KeyWithParameters, $r0.<org.spongycastle.asn1.ASN1InputStream: int limit>, null, null, staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), $r2, virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), (org.spongycastle.jcajce.PBKDF1KeyWithParameters) $r11, lengthof $r13, $i1, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), $r3.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom random>, (org.spongycastle.asn1.pkcs.PBES2Parameters) $r1, (org.spongycastle.asn1.ASN1Encodable) $r0, $r29[$i0], @this: org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, (javax.crypto.SecretKey) $r1, new org.spongycastle.asn1.x509.AlgorithmIdentifier, $i0, @parameter4: int, $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), new org.spongycastle.asn1.pkcs.PBKDF2Params, $r2, $i0, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), $r3, virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>(), @parameter0: int, @parameter0: java.lang.Object, r0.<java.io.DataInputStream: java.io.InputStream in>, virtualinvoke $r2.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>(), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBKDF2Params: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $i0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i1, $i2, $i0), new org.spongycastle.asn1.pkcs.AuthenticatedSafe, $r3, @this: org.spongycastle.jcajce.PKCS12KeyWithParameters, @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r1.<java.io.InputStream: int read()>(), @this: org.spongycastle.asn1.pkcs.SafeBag, @this: org.spongycastle.asn1.pkcs.AuthenticatedSafe, (javax.crypto.interfaces.PBEKey) $r1, $i0, @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher, new org.spongycastle.asn1.IndefiniteLengthInputStream, r0.<java.io.DataInputStream: java.io.InputStream in>, $i0, $i0, (org.spongycastle.asn1.pkcs.EncryptedData) $r1, staticinvoke <org.spongycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r0, $i1), @parameter1: char[], virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>(), virtualinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec pbeKeySpec>, @parameter0: java.lang.Object, $r0, $i0, $s5, new org.spongycastle.asn1.pkcs.EncryptedData, @this: org.spongycastle.pkcs.jcajce.JcePKCSPBEOutputEncryptorBuilder, $i0, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>(), @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, $r0.<org.spongycastle.asn1.pkcs.PBEParameter: org.spongycastle.asn1.ASN1Integer iterations>, @this: org.spongycastle.asn1.pkcs.PKCS12PBEParams, interfaceinvoke $r12.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r13), (org.spongycastle.asn1.ASN1Sequence) $r0, specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r2, $i12 + $i11, (org.spongycastle.asn1.ASN1Sequence) $r36, $i0, r1, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r0, $r0.<org.spongycastle.asn1.pkcs.MacData: byte[] salt>, (org.spongycastle.asn1.ASN1Sequence) $r36, @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, $r0.<org.spongycastle.asn1.ASN1OctetString: byte[] string>, @this: org.spongycastle.asn1.ASN1Set, new org.spongycastle.jcajce.PKCS12Key, @parameter2: int, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams params>, virtualinvoke $r13.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), (org.spongycastle.asn1.ASN1Sequence) $r6, @this: org.spongycastle.asn1.ASN1Sequence, $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector set>, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int read()>(), $r1, @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, $i1, $r11, $r1, @this: org.spongycastle.asn1.pkcs.PBEParameter, $i1, null, $r3, staticinvoke <org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r6), new org.spongycastle.asn1.ASN1InputStream, $i1, (org.spongycastle.asn1.ASN1Set) $r15, @parameter4: byte[], @this: org.spongycastle.asn1.pkcs.ContentInfo, virtualinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r2, $i0, @parameter0: java.math.BigInteger, @parameter0: java.lang.Object, $i0, (javax.crypto.interfaces.PBEKey) $r21, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.MacData macData>, $r0.<org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder: int saltLength>, (org.spongycastle.asn1.ASN1Primitive) $r15, $r0.<org.spongycastle.asn1.pkcs.MacData: org.spongycastle.asn1.x509.DigestInfo digInfo>, $r0.<org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilderProvider$1: org.spongycastle.asn1.x509.AlgorithmIdentifier val$algorithmIdentifier>, @parameter2: org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r1, @parameter0: char[], $i0, @parameter0: java.lang.Object, $r3, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $i0, $r4, $i1, $r1, $i0 + 1024, (org.spongycastle.asn1.ASN1Encodable) $r2, @parameter1: java.security.Key, interfaceinvoke $r3.<org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r0), @this: org.spongycastle.asn1.ASN1OctetString, $r1, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector set>, $r1, @parameter0: java.security.Key, $r2, $r0.<org.spongycastle.jcajce.PKCS12KeyWithParameters: int iterationCount>, lengthof $r2, null, $r0, $r12, @parameter0: java.lang.Object, i1 << 16, i0 << 24, $i2, $r3, $r4, specialinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.spongycastle.asn1.ASN1StreamParser)>($i2, $r3), $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.asn1.x509.AlgorithmIdentifier macAlgorithm>, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, virtualinvoke $r4.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>(), @parameter1: java.security.Key, $i0, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), @parameter0: java.lang.Object, @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @this: org.spongycastle.asn1.pkcs.Pfx, $i0, null, @parameter0: java.lang.Object, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, @this: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, $i13, $r0.<org.spongycastle.asn1.pkcs.KeyDerivationFunc: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, @parameter1: java.security.Key, $i0, r1, $i0, r52, @this: org.spongycastle.asn1.ASN1Set, virtualinvoke $r3.<java.io.InputStream: int read()>(), $r0.<org.spongycastle.pkcs.jcajce.JcePKCSPBEOutputEncryptorBuilder: int iterationCount>, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.ASN1OctetString data>, virtualinvoke $r1.<javax.crypto.MacSpi: int engineGetMacLength()>(), staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set getInstance(java.lang.Object)>($r2), $r12, $i0, $r5, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Encodable bagValue>, $r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int type>, r1, new org.spongycastle.asn1.BERSequenceParser, $r12, new java.io.DataInputStream, r0.<javax.crypto.Mac: javax.crypto.MacSpi spi>, interfaceinvoke $r11.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r12), new org.spongycastle.asn1.BERTaggedObjectParser, virtualinvoke $r2.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>(), $i1, (javax.crypto.interfaces.PBEKey) $r6, new org.spongycastle.asn1.ASN1InputStream, @parameter1: java.security.Key, $r2, @parameter0: java.lang.Object, virtualinvoke $r9.<org.spongycastle.asn1.DERExternalParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r3, $r7, specialinvoke $r7.<org.spongycastle.asn1.BERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), (org.spongycastle.asn1.pkcs.SafeBag) $r1, $r1, $r2, specialinvoke $r2.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r1), $r1, $r0.<org.spongycastle.asn1.pkcs.MacData: java.math.BigInteger iterationCount>, $r3, $r10, specialinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $i0, @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r8 = "www.bouncycastle.org", method='<org.spongycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://maps.googleapis.com/maps/api/geocode/json?latlng=%1$f,%2$f&sensor=true&language=%3$s", "http://localhost/", "http://localhost/", "http://192.168.101.1", "http://localhost/"]
[UnitContainer{unit=$r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "http://maps.googleapis.com/maps/api/geocode/json?latlng=%1$f,%2$f&sensor=true&language=%3$s", $r3), method='<pl.charmas.android.reactivelocation.observables.geocode.FallbackReverseGeocodeObservable: java.util.List alternativeReverseGeocodeQuery()>'}, UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_134[0] = "http://192.168.101.1", method='<today.onedrop.android.injection.NetworkModule: today.onedrop.android.scale.BlipScaleClient provideBlipScaleClient(okhttp3.logging.HttpLoggingInterceptor)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
