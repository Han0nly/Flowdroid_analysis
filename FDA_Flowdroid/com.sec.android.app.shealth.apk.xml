<?xml version="1.0" encoding="UTF-8"?><DataFlowResults FileFormatVersion="102" TerminationState="Success"><Results><Result><Sink Statement="staticinvoke &lt;android.util.Log: int e(java.lang.String,java.lang.String)&gt;($r7, $r2)" Method="&lt;com.samsung.android.app.shealth.app.state.TermsOfUseManager: void clearInfoIfFeatureChanged()&gt;"><AccessPath Value="$r2" Type="java.lang.String" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r2 = interfaceinvoke $r7.&lt;android.database.Cursor: java.lang.String getString(int)&gt;(0)" Method="&lt;com.samsung.android.app.shealth.app.helper.MultiprocessSharedPreferences: java.lang.String getString(java.lang.String,java.lang.String,boolean,boolean)&gt;"><AccessPath Value="$r2" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="virtualinvoke r0.&lt;android.app.Activity: void setResult(int,android.content.Intent)&gt;(-1, $r8)" Method="&lt;com.samsung.android.app.shealth.bandsettings.ui.activity.BandSettingsTrackerPedometerTargetConfigActivity: void saveData()&gt;"><AccessPath Value="r0" Type="com.samsung.android.app.shealth.bandsettings.ui.activity.BandSettingsTrackerPedometerTargetConfigActivity" TaintSubFields="true"><Fields><Field Value="&lt;androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate mDelegate&gt;" Type="androidx.appcompat.app.AppCompatDelegateImpl"></Field><Field Value="&lt;androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager mAutoNightModeManager&gt;" Type="androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager"></Field><Field Value="&lt;androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: androidx.appcompat.app.TwilightManager mTwilightManager&gt;" Type="androidx.appcompat.app.TwilightManager"></Field><Field Value="&lt;androidx.appcompat.app.TwilightManager: androidx.appcompat.app.TwilightManager$TwilightState mTwilightState&gt;" Type="androidx.appcompat.app.TwilightManager$TwilightState"></Field><Field Value="&lt;androidx.appcompat.app.TwilightManager$TwilightState: long todaySunset&gt;" Type="long"></Field></Fields></AccessPath></Sink><Sources><Source Statement="$d0 = virtualinvoke $r1.&lt;android.location.Location: double getLatitude()&gt;()" Method="&lt;androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)&gt;"><AccessPath Value="$d0" Type="double" TaintSubFields="true"></AccessPath></Source><Source Statement="$d1 = virtualinvoke $r1.&lt;android.location.Location: double getLongitude()&gt;()" Method="&lt;androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)&gt;"><AccessPath Value="$d1" Type="double" TaintSubFields="true"></AccessPath></Source><Source Statement="$d1 = virtualinvoke $r1.&lt;android.location.Location: double getLongitude()&gt;()" Method="&lt;androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)&gt;"><AccessPath Value="$d1" Type="double" TaintSubFields="true"></AccessPath></Source><Source Statement="$d0 = virtualinvoke $r1.&lt;android.location.Location: double getLatitude()&gt;()" Method="&lt;androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)&gt;"><AccessPath Value="$d0" Type="double" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="virtualinvoke $r5.&lt;android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)&gt;($r3, &quot;com.samsung.android.app.shealth.home.dashboard.HomeSppProgressActivity&quot;)" Method="&lt;com.samsung.android.app.shealth.app.state.SppDownloadManager: void startProgressActivity(android.app.Activity)&gt;"><AccessPath Value="$r3" Type="com.samsung.android.app.shealth.home.dashboard.HomeSppInstallGuideActivity" TaintSubFields="true"><Fields><Field Value="&lt;androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate mDelegate&gt;" Type="androidx.appcompat.app.AppCompatDelegateImpl"></Field><Field Value="&lt;androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager mAutoNightModeManager&gt;" Type="androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager"></Field><Field Value="&lt;androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: androidx.appcompat.app.TwilightManager mTwilightManager&gt;" Type="androidx.appcompat.app.TwilightManager"></Field><Field Value="&lt;androidx.appcompat.app.TwilightManager: androidx.appcompat.app.TwilightManager$TwilightState mTwilightState&gt;" Type="androidx.appcompat.app.TwilightManager$TwilightState"></Field><Field Value="&lt;androidx.appcompat.app.TwilightManager$TwilightState: long tomorrowSunrise&gt;" Type="long"></Field></Fields></AccessPath></Sink><Sources><Source Statement="$d0 = virtualinvoke $r1.&lt;android.location.Location: double getLatitude()&gt;()" Method="&lt;androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)&gt;"><AccessPath Value="$d0" Type="double" TaintSubFields="true"></AccessPath></Source><Source Statement="$d1 = virtualinvoke $r1.&lt;android.location.Location: double getLongitude()&gt;()" Method="&lt;androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)&gt;"><AccessPath Value="$d1" Type="double" TaintSubFields="true"></AccessPath></Source><Source Statement="$d1 = virtualinvoke $r1.&lt;android.location.Location: double getLongitude()&gt;()" Method="&lt;androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)&gt;"><AccessPath Value="$d1" Type="double" TaintSubFields="true"></AccessPath></Source><Source Statement="$d0 = virtualinvoke $r1.&lt;android.location.Location: double getLatitude()&gt;()" Method="&lt;androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)&gt;"><AccessPath Value="$d0" Type="double" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="staticinvoke &lt;android.util.Log: int d(java.lang.String,java.lang.String)&gt;($r6, $r3)" Method="&lt;com.samsung.android.app.shealth.app.state.TermsOfUseManager: void loadAndSavePreloadVersionFromJson()&gt;"><AccessPath Value="$r3" Type="java.lang.String" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r2 = interfaceinvoke $r7.&lt;android.database.Cursor: java.lang.String getString(int)&gt;(0)" Method="&lt;com.samsung.android.app.shealth.app.helper.MultiprocessSharedPreferences: java.lang.String getString(java.lang.String,java.lang.String,boolean,boolean)&gt;"><AccessPath Value="$r2" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="virtualinvoke $r5.&lt;java.io.File: boolean delete()&gt;()" Method="&lt;com.samsung.android.app.shealth.app.state.SppDownloadManager$SppDownloadCompleteReceiver$ValidationCheckTask: boolean moveFile(java.lang.String,java.lang.String)&gt;"><AccessPath Value="$r5" Type="java.io.File" TaintSubFields="true"><Fields><Field Value="&lt;java.io.File: java.lang.String fileName&gt;" Type="java.lang.String"></Field></Fields></AccessPath></Sink><Sources><Source Statement="$r10 = interfaceinvoke $r8.&lt;android.database.Cursor: java.lang.String getString(int)&gt;($i2)" Method="&lt;com.samsung.android.app.shealth.app.state.SppDownloadManager: java.lang.String getDownloadLocalUri(android.content.Context,long)&gt;"><AccessPath Value="$r10" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result></Results><PerformanceData><PerformanceEntry Name="CallgraphConstructionSeconds" Value="39"></PerformanceEntry><PerformanceEntry Name="TaintPropagationSeconds" Value="255"></PerformanceEntry><PerformanceEntry Name="PathReconstructionSeconds" Value="1"></PerformanceEntry><PerformanceEntry Name="TotalRuntimeSeconds" Value="297"></PerformanceEntry><PerformanceEntry Name="MaxMemoryConsumption" Value="3887"></PerformanceEntry><PerformanceEntry Name="SourceCount" Value="26"></PerformanceEntry><PerformanceEntry Name="SinkCount" Value="306"></PerformanceEntry></PerformanceData></DataFlowResults>