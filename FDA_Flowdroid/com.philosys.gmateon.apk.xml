<?xml version="1.0" encoding="UTF-8"?><DataFlowResults FileFormatVersion="102" TerminationState="DataFlowOutOfMemory"><Results><Result><Sink Statement="virtualinvoke $r33.&lt;java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)&gt;($r12)" Method="&lt;com.philosys.gmateon.DisclosureActivity: void sendEmail(java.lang.String)&gt;"><AccessPath Value="$r33" Type="java.io.OutputStreamWriter" TaintSubFields="true"><Fields><Field Value="&lt;java.io.OutputStreamWriter: java.io.OutputStream innerStream&gt;" Type="java.io.OutputStream"></Field></Fields></AccessPath></Sink><Sources><Source Statement="$r4 = interfaceinvoke $r3.&lt;android.database.Cursor: java.lang.String getString(int)&gt;($i0)" Method="&lt;com.philosys.gmateon.DisclosureActivity: java.lang.String getDBString(int,int)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="staticinvoke &lt;android.util.Log: int i(java.lang.String,java.lang.String)&gt;($r0, $r1)" Method="&lt;com.philosys.gmateon.co.PHLib: void LOG(java.lang.String,java.lang.String,java.lang.String)&gt;"><AccessPath Value="$r1" Type="java.lang.String" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = interfaceinvoke $r3.&lt;android.database.Cursor: java.lang.String getString(int)&gt;($i0)" Method="&lt;com.philosys.gmateon.DisclosureActivity: java.lang.String getDBString(int,int)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="staticinvoke &lt;android.util.Log: int e(java.lang.String,java.lang.String)&gt;(&quot;My Tag&quot;, $r6)" Method="&lt;com.philosys.gmateon.DisclosureActivity: void sendSMS()&gt;"><AccessPath Value="$r6" Type="java.lang.String" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r4 = interfaceinvoke $r3.&lt;android.database.Cursor: java.lang.String getString(int)&gt;($i0)" Method="&lt;com.philosys.gmateon.DisclosureActivity: java.lang.String getDBString(int,int)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="staticinvoke &lt;android.util.Log: int e(java.lang.String,java.lang.String)&gt;($r0, $r1)" Method="&lt;com.philosys.gmateon.co.PHLib: void LOG(java.lang.String,java.lang.String,java.lang.String)&gt;"><AccessPath Value="$r1" Type="java.lang.String" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = interfaceinvoke $r3.&lt;android.database.Cursor: java.lang.String getString(int)&gt;($i0)" Method="&lt;com.philosys.gmateon.DisclosureActivity: java.lang.String getDBString(int,int)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="virtualinvoke $r1.&lt;java.io.OutputStream: void write(byte[],int,int)&gt;($r2, 0, $i1)" Method="&lt;com.itextpdf.text.pdf.PdfImage: void transferBytes(java.io.InputStream,java.io.OutputStream,int)&gt;"><AccessPath Value="$r2" Type="byte[]" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r22 = virtualinvoke $r21.&lt;java.net.URL: java.io.InputStream openStream()&gt;()" Method="&lt;com.itextpdf.text.pdf.PdfImage: void &lt;init&gt;(com.itextpdf.text.Image,java.lang.String,com.itextpdf.text.pdf.PdfIndirectReference)&gt;"><AccessPath Value="$r22" Type="java.io.InputStream" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="virtualinvoke $r1.&lt;java.io.OutputStream: void write(int)&gt;(60)" Method="&lt;com.itextpdf.text.pdf.PdfDictionary: void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream)&gt;"><AccessPath Value="$r1" Type="com.itextpdf.text.pdf.ByteBuffer" TaintSubFields="true"><Fields><Field Value="&lt;com.itextpdf.text.pdf.ByteBuffer: byte[] buf&gt;" Type="byte[]"></Field></Fields></AccessPath></Sink><Sources><Source Statement="$r4 = virtualinvoke $r3.&lt;java.net.URL: java.io.InputStream openStream()&gt;()" Method="&lt;com.itextpdf.text.io.RandomAccessSourceFactory: com.itextpdf.text.io.RandomAccessSource createSource(java.net.URL)&gt;"><AccessPath Value="$r4" Type="java.io.InputStream" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="staticinvoke &lt;android.util.Log: int v(java.lang.String,java.lang.String)&gt;($r0, $r1)" Method="&lt;com.philosys.gmateon.co.PHLib: void LOG(java.lang.String,java.lang.String,java.lang.String)&gt;"><AccessPath Value="$r1" Type="java.lang.String" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = interfaceinvoke $r3.&lt;android.database.Cursor: java.lang.String getString(int)&gt;($i0)" Method="&lt;com.philosys.gmateon.DisclosureActivity: java.lang.String getDBString(int,int)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="staticinvoke &lt;android.util.Log: int d(java.lang.String,java.lang.String)&gt;($r0, $r1)" Method="&lt;com.philosys.gmateon.co.PHLib: void LOG(java.lang.String,java.lang.String,java.lang.String)&gt;"><AccessPath Value="$r1" Type="java.lang.String" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = interfaceinvoke $r3.&lt;android.database.Cursor: java.lang.String getString(int)&gt;($i0)" Method="&lt;com.philosys.gmateon.DisclosureActivity: java.lang.String getDBString(int,int)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="virtualinvoke $r1.&lt;java.io.OutputStream: void write(int)&gt;(32)" Method="&lt;com.itextpdf.text.pdf.PdfDictionary: void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream)&gt;"><AccessPath Value="$r1" Type="com.itextpdf.text.pdf.ByteBuffer" TaintSubFields="true"><Fields><Field Value="&lt;com.itextpdf.text.pdf.ByteBuffer: int count&gt;" Type="int"></Field></Fields></AccessPath></Sink><Sources><Source Statement="$r4 = virtualinvoke $r3.&lt;java.net.URL: java.io.InputStream openStream()&gt;()" Method="&lt;com.itextpdf.text.io.RandomAccessSourceFactory: com.itextpdf.text.io.RandomAccessSource createSource(java.net.URL)&gt;"><AccessPath Value="$r4" Type="java.io.InputStream" TaintSubFields="true"></AccessPath></Source></Sources></Result><Result><Sink Statement="staticinvoke &lt;android.util.Log: int w(java.lang.String,java.lang.String)&gt;($r0, $r1)" Method="&lt;com.philosys.gmateon.co.PHLib: void LOG(java.lang.String,java.lang.String,java.lang.String)&gt;"><AccessPath Value="$r1" Type="java.lang.String" TaintSubFields="true"></AccessPath></Sink><Sources><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = virtualinvoke $r5.&lt;java.util.Locale: java.lang.String getCountry()&gt;()" Method="&lt;com.philosys.gmateon.co.PHCommon: java.lang.String checkCountryCode(android.content.Context)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source><Source Statement="$r4 = interfaceinvoke $r3.&lt;android.database.Cursor: java.lang.String getString(int)&gt;($i0)" Method="&lt;com.philosys.gmateon.DisclosureActivity: java.lang.String getDBString(int,int)&gt;"><AccessPath Value="$r4" Type="java.lang.String" TaintSubFields="true"></AccessPath></Source></Sources></Result></Results><PerformanceData><PerformanceEntry Name="CallgraphConstructionSeconds" Value="45"></PerformanceEntry><PerformanceEntry Name="TaintPropagationSeconds" Value="443"></PerformanceEntry><PerformanceEntry Name="PathReconstructionSeconds" Value="5"></PerformanceEntry><PerformanceEntry Name="TotalRuntimeSeconds" Value="502"></PerformanceEntry><PerformanceEntry Name="MaxMemoryConsumption" Value="3910"></PerformanceEntry><PerformanceEntry Name="SourceCount" Value="30"></PerformanceEntry><PerformanceEntry Name="SinkCount" Value="182"></PerformanceEntry></PerformanceData></DataFlowResults>