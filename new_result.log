Analyzing APK: ai.medicus.android.apk
*** Base package: ai.medicus.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES/ECB/NoPadding", "RC4", "DES/ECB/NoPadding", "RC4", "DES/ECB/NoPadding", "DES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_629[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_826[0] = "RC4", method='<org.apache.http.impl.auth.NTLMEngineImpl$Handle: javax.crypto.Cipher initCipher()>'}, UnitContainer{unit=$fakeLocal_550[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_576[0] = "RC4", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_719[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_547[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.com.bumptech.glide.load.resource.gif.GifFrameLoader: io.intercom.com.bumptech.glide.load.Key getFrameSignature()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ai.medicus.android.controllers.inAppViews.pregnancy.viewHolder.TimelineInsightViewHolder: void bind(android.content.Context,ai.medicus.medicuscore.PatientPregnancyInsight)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <lecho.lib.hellocharts.util.ChartUtils: int pickColor()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkr: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ai.medicus.coaching.adapters.CoachingProgramAdapter$ProgramViewHolder: void bind(ai.medicus.medicuscore.PatientCoachingProgram,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzag: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.auth-api.zzal: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.socketio.SocketIOConnection: long nextReconnectDelay(long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ai.medicus.utils.NumbersUtils: int getRandomIntBetween(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.markdownj.CharacterProtector: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bugsee.library.util.ThreadUtils: boolean tryToRun(com.bugsee.library.util.ThreadUtils$ThrowingRunnable,int,int,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ai.medicus.coaching.viewHolders.stepDetails.StepProgramViewHolder: void configure()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ai.medicus.promotions.viewHolders.PromotionViewHolder: void bind(ai.medicus.medicuscore.PatientPromotion)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ai.medicus.curio.viewHolders.CurioArticleVH: void configure(ai.medicus.medicuscore.PatientCuratedContent,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.markdownj.MarkdownProcessor: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.nexus.NexusSocket: long calculateReconnectTimerInSeconds(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.api.HeaderInterceptor: io.intercom.android.sdk.api.HeaderInterceptor create(android.content.Context,io.intercom.android.sdk.identity.AppIdentity)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ai.medicus.coaching.adapters.StepDetailsImageCarouselPagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.FacebookException: void <init>(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.okhttp3.OkHttpClient: io.intercom.okhttp3.WebSocket newWebSocket(io.intercom.okhttp3.Request,io.intercom.okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.api.client.util.ExponentialBackOff: long nextBackOffMillis()>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(org.apache.http.HttpHost)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.google.api.client.util.SslUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.google.api.client.util.SslUtils$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.google.api.client.util.SslUtils$2
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in org.apache.http.conn.ssl.NoopHostnameVerifier
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD2", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "MD5", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA-1", method='<okiocopy.ByteString: okiocopy.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_262[0] = "MD5", method='<com.koushikdutta.async.http.spdy.ByteString: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_110[0] = "MD5", method='<okiocopy.ByteString: okiocopy.ByteString md5()>'}, UnitContainer{unit=$r10 = "MD5", method='<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_68[0] = "MD5", method='<com.koushikdutta.async.util.FileCache: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_207[0] = "SHA-1", method='<okhttp3copy.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_100[0] = "SHA-1", method='<com.bugsee.library.data.CrashInfo: java.lang.String getCrashSignature(com.bugsee.library.data.CrashInfo$ExceptionInfo)>'}, UnitContainer{unit=$fakeLocal_320[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_48[1] = "SHA-1", method='<okiocopy.HashingSource: okiocopy.HashingSource sha1(okiocopy.Source)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_85[0] = "MD2", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_112[0] = "SHA-1", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}, UnitContainer{unit=$fakeLocal_1842[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl: java.security.MessageDigest getMD5()>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<io.intercom.okio.HashingSink: io.intercom.okio.HashingSink md5(io.intercom.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_285[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_196[0] = "MD5", method='<okhttp3copy.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_43[1] = "MD5", method='<okiocopy.HashingSource: okiocopy.HashingSource md5(okiocopy.Source)>'}, UnitContainer{unit=$fakeLocal_218[0] = "SHA-1", method='<okhttp3copy.internal.Util: okiocopy.ByteString sha1(okiocopy.ByteString)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<io.intercom.okio.HashingSource: io.intercom.okio.HashingSource md5(io.intercom.okio.Source)>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<io.intercom.okio.HashingSource: io.intercom.okio.HashingSource sha1(io.intercom.okio.Source)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<io.intercom.okio.Buffer: io.intercom.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_279[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1518[0] = "MD5", method='<okiocopy.Buffer: okiocopy.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.google.firebase.iid.zzt: java.lang.String zza()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<io.intercom.okio.HashingSink: io.intercom.okio.HashingSink sha1(io.intercom.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_28[0] = "MD5", method='<com.facebook.appevents.internal.HashUtils: java.lang.String computeFileMd5(java.io.File)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_281[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<io.intercom.okio.ByteString: io.intercom.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_593[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkr: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_841[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzl: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zzd,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1523[0] = "SHA-1", method='<okiocopy.Buffer: okiocopy.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_50[1] = "SHA-1", method='<okiocopy.HashingSink: okiocopy.HashingSink sha1(okiocopy.Sink)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_271[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_45[1] = "MD5", method='<okiocopy.HashingSink: okiocopy.HashingSink md5(okiocopy.Sink)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<io.intercom.okio.Buffer: io.intercom.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$r9 = "MD5", method='<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_98[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_27[0] = "SHA1", method='<com.facebook.internal.security.CertificateUtil: java.lang.String getCertificateHash(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<io.intercom.okio.ByteString: io.intercom.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_277[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["ISO-8859-1", "ISO-8859-1"]
[UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESDecrypter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["notasecret", "notasecret", "notasecret"]
[UnitContainer{unit=$fakeLocal_759[2] = "notasecret", method='<com.google.api.client.googleapis.auth.oauth2.GoogleCredential$Builder: com.google.api.client.googleapis.auth.oauth2.GoogleCredential$Builder setServiceAccountPrivateKeyFromP12File(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_759[4] = "notasecret", method='<com.google.api.client.googleapis.auth.oauth2.GoogleCredential$Builder: com.google.api.client.googleapis.auth.oauth2.GoogleCredential$Builder setServiceAccountPrivateKeyFromP12File(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_76[2] = "notasecret", method='<com.google.api.client.googleapis.GoogleUtils: java.security.KeyStore getCertificateTrustStore()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://169.254.169.254", "http://google.com/", "http://www.google.com", "http://google.com/"]
[UnitContainer{unit=return "http://169.254.169.254", method='<com.google.api.client.googleapis.auth.oauth2.OAuth2Utils: java.lang.String getMetadataServerUrl(com.google.api.client.googleapis.auth.oauth2.SystemEnvironmentProvider)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://google.com/", method='<com.google.api.client.testing.http.HttpTesting: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_54[0] = "http://www.google.com", method='<com.bugsee.library.network.NetworkEventsCollector: void initialize()>'}, UnitContainer{unit=$fakeLocal_243[0] = "http://google.com/", method='<com.google.api.client.googleapis.batch.BatchUnparsedResponse: com.google.api.client.http.HttpResponse getFakeResponse(int,java.io.InputStream,java.util.List,java.util.List)>'}]
=======================================
Analyzing APK: ai.viz.notifier.apk
*** Base package: ai.viz.notifier
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzko: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzac: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.auth-api.zzal: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_279[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_76[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.google.firebase.iid.zzt: java.lang.String zza()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzl: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zzd,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_271[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_570[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzko: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_73[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["Viz key start"]
[UnitContainer{unit=$r3 = "Viz key start", method='<ai.viz.notifier.cache.VizImageSeriesCacheManager: byte[] generateIV()>'}]
=======================================
Analyzing APK: be.tdf_it.cancerrisk.apk
*** Base package: be.tdf_it.cancerrisk
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcn: java.util.Random zzz()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zztj: void onAdClosed()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzjj: void <init>()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzhf: java.security.MessageDigest zzcW()>'}, UnitContainer{unit=$fakeLocal_257[0] = "MD5", method='<name.ratson.cordova.admob.AdMob: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzaiy: java.lang.String zzaR(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzbx: void run()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzagz: java.lang.String zzhP()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["1489418796403"]
[UnitContainer{unit=$fakeLocal_-1[1] = "1489418796403", method='<com.google.android.gms.internal.zzdb: com.google.android.gms.internal.zzdb zza(android.content.Context,java.lang.String,java.lang.String,boolean)>'}]
=======================================
Analyzing APK: be.xelink.comunicare.apk
*** Base package: be.xelink.comunicare
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dsi.ant.plugins.antplus.pcc.AntPlusWeightScalePcc$UserProfile: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jitsi.meet.sdk.OngoingNotification: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dropbox.core.DbxRequestUtil: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <shaded.org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <de.appplant.cordova.plugin.notification.Builder: void <init>(de.appplant.cordova.plugin.notification.Options)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <shaded.org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dropbox.core.v2.DbxRawClientV2: void <clinit>()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD2", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "MD2", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<shaded.org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$r0[2] = "SHA-1", method='<shaded.org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$r0[1] = "MD5", method='<shaded.org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_189[0] = "MD5", method='<shaded.org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$r0[0] = "MD2", method='<shaded.org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD2", method='<shaded.org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["encrypt", "hY0wTq6xwc6ni01G", "generateSecureIV", "generateSecureKey", "decrypt", "hY0wTq6xwc6ni01G"]
[UnitContainer{unit=$r1 = "encrypt", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "hY0wTq6xwc6ni01G", method='<com.ideas2it.aes256.AES256: java.lang.String encrypt(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = "generateSecureIV", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "generateSecureKey", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "decrypt", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "hY0wTq6xwc6ni01G", method='<com.ideas2it.aes256.AES256: java.lang.String decrypt(java.lang.String,java.lang.String,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["encrypt", "hY0wTq6xwc6ni01G", "decrypt", "hY0wTq6xwc6ni01G"]
[UnitContainer{unit=$r1 = "encrypt", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "hY0wTq6xwc6ni01G", method='<com.ideas2it.aes256.AES256: java.lang.String encrypt(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = "decrypt", method='<com.ideas2it.aes256.AES256$1: void run()>'}, UnitContainer{unit=$r1 = "hY0wTq6xwc6ni01G", method='<com.ideas2it.aes256.AES256: java.lang.String decrypt(java.lang.String,java.lang.String,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [@parameter2: int, 1001, 1001, 1001, $i0, 1001]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: com.activ8rlives.activ8rlives4.apk
*** Base package: com.activ8rlives.activ8rlives4
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: com.agamatrix.nimbus.apk
*** Base package: com.agamatrix.nimbus
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.a.a.b.u: void a(android.content.res.Resources,java.lang.String,int,android.util.AttributeSet)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.c.a.b.m$b: void <clinit>()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_238[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: b.f sha1(b.f)>'}, UnitContainer{unit=$fakeLocal_1036[0] = "MD5", method='<b.c: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_227[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_258[0] = "MD5", method='<b.f: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_80[0] = "MD5", method='<com.localytics.android.Utils: java.lang.String getMD5CheckSum(java.io.File)>'}, UnitContainer{unit=$fakeLocal_216[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}]
=======================================
Analyzing APK: com.analyticamedical.pericoach.apk
*** Base package: com.analyticamedical.pericoach
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.analyticamedical.pericoach.Notifications.NotificationHelper: java.lang.String chooseMessage(android.content.Context,java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.analyticamedical.pericoach.Notifications.NotificationHelper: android.app.Notification getNotification(android.content.Context,java.lang.String,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.analyticamedical.pericoach.DataAccess.Entities.ExerciseProgramLevel: void <init>()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.acra.util.NaiveTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.acra.util.NaiveTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}]
=======================================
Analyzing APK: com.andaman7.android.apk
*** Base package: com.andaman7.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding", "RC4", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "DES/ECB/NoPadding", "DES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_78[0] = "AES/ECB/NoPadding", method='<com.helger.commons.system.CryptoPolicy: boolean _isUnlimitedStrengthAvailable()>'}, UnitContainer{unit=$fakeLocal_536[0] = "RC4", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_507[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_589[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_510[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_679[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ca.uhn.fhir.util.TestUtil: void randomizeLocale()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.logging.monitor.Monitor: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(double[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(boolean[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(char[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(java.lang.Object[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: int nextInt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: double nextDouble()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.wafflecopter.multicontactpicker.ColorUtils: int getRandomMaterialColor()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzko: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: float nextFloat()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(long[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(short[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(float[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.helger.commons.random.RandomHelper: java.util.Random getRandom()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: boolean nextBoolean()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.auth-api.zzal: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <ca.uhn.fhir.util.PortUtil: int getNextFreePort()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzac: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.wootric.androidsdk.utils.SHAUtil: java.lang.String randomString()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(byte[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.FacebookException: void <init>(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: long nextLong(long)>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(org.apache.http.HttpHost)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.helger.commons.ws.TrustManagerTrustAll
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.helger.commons.ws.TrustManagerTrustAll
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.helger.commons.ws.HostnameVerifierVerifyAll
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in org.apache.http.conn.ssl.NoopHostnameVerifier
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1", "MD5", "MD5", "MD5", "MD2", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD2", "SHA1", "MD5", "SHA1", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_175[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$r10 = "MD5", method='<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_196[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzl: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zzd,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_189[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_271[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_570[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzko: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_285[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$r0[2] = "SHA-1", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$r9 = "MD5", method='<org.apache.http.impl.auth.DigestScheme: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD2", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$r0[1] = "MD5", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_279[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_878[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_321[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$r0[0] = "MD2", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_27[0] = "SHA1", method='<com.facebook.internal.security.CertificateUtil: java.lang.String getCertificateHash(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.google.firebase.iid.zzt: java.lang.String zza()>'}, UnitContainer{unit=$fakeLocal_1566[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_28[0] = "MD5", method='<com.facebook.appevents.internal.HashUtils: java.lang.String computeFileMd5(java.io.File)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_555[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_281[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.zendesk.util.DigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_277[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://saxon.sf.net/ns/configuration", "http://localhost/", "http://saxon.sf.net/", "http://localhost/", "http://www.w3.org/1999/XSL/Transform", "http://build.fhir.org/template-comparison-set.html.template"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$r4 = "http://saxon.sf.net/ns/configuration", method='<net.sf.saxon.trans.ConfigurationReader: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=specialinvoke $r15.<net.sf.saxon.value.QNameValue: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "http://saxon.sf.net/", "configuration"), method='<net.sf.saxon.functions.TransformFn: net.sf.saxon.om.Sequence call(net.sf.saxon.expr.XPathContext,net.sf.saxon.om.Sequence[])>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=specialinvoke $r15.<net.sf.saxon.value.QNameValue: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "http://www.w3.org/1999/XSL/Transform", "initial-template"), method='<net.sf.saxon.functions.TransformFn: net.sf.saxon.om.Sequence call(net.sf.saxon.expr.XPathContext,net.sf.saxon.om.Sequence[])>'}, UnitContainer{unit=$fakeLocal_1252[1] = "http://build.fhir.org/template-comparison-set.html.template", method='<org.hl7.fhir.r4.conformance.ProfileComparer: java.lang.String summaryTemplate()>'}]
=======================================
Analyzing APK: com.asthmapolis.mobile.apk
*** Base package: com.asthmapolis.mobile
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzag: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkw: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.salesforce.android.service.common.liveagentlogging.internal.PodProvider: java.lang.String a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <bo.app.dp: void <init>(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.propellerhealth.android.ui.common.MapViewHelper: void <init>(android.app.Application)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.appboy.support.IntentUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA1", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA-1", method='<com.google.firebase.iid.GmsRpc: java.lang.String a()>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_593[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkw: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String a(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString d()>'}, UnitContainer{unit=$fakeLocal_218[0] = "MD5", method='<com.appboy.support.StringUtils: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString c()>'}]
=======================================
Analyzing APK: com.bluesparktechnologies.temptraq.apk
*** Base package: com.bluesparktechnologies.temptraq
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/PKCS7Padding"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/PKCS7Padding", method='<io.fabric.sdk.android.services.common.CommonUtils: javax.crypto.Cipher createCipher(int,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinvey.java.core.MediaHttpDownloader: int getRandom(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.kinvey.java.core.MediaHttpUploader: int getRandom(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzf: void zzkp(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.internal.client.zzn: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzc: void zzkp(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzao: java.util.Random zzav()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.api.client.util.ExponentialBackOff: long nextBackOffMillis()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.google.api.client.util.SslUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.google.api.client.util.SslUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.google.api.client.util.SslUtils$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcv: java.security.MessageDigest zzir()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzkr: java.lang.String zzui()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzal: long zzy(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzn: void zzym()>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String md5(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.kinvey.android.cache.ClassHash: java.lang.String getClassHash(java.lang.Class)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzam$zza: void run()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.ads.internal.util.client.zza: java.lang.String zzdc(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.localytics.android.Utils: java.lang.String getMD5CheckSum(java.io.File)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzt: java.lang.String zzmm(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String hash(java.io.InputStream,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["1468357373244"]
[UnitContainer{unit=return "1468357373244", method='<com.google.android.gms.internal.zzax: java.lang.String zzax()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://google.com/", "http://static.realm.io/update/java?3.2.1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "http://google.com/", method='<com.google.api.client.testing.http.HttpTesting: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://static.realm.io/update/java?3.2.1", method='<io.realm.processor.RealmVersionChecker: java.lang.String checkLatestVersion()>'}]
=======================================
Analyzing APK: com.cankado.apk
*** Base package: com.cankado
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerServiceGcm: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(float[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfk: long zzmc()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(double[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(boolean[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(char[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(byte[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(java.lang.Object[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotification: void <init>(com.facebook.react.bridge.ReactApplicationContext)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(long[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.ArrayUtils: void shuffle(short[])>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.RNFetchBlob.RNFetchBlobUtils$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "sha1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "md5", "MD5", "SHA-1", "SHA1", "MD5", "sha1", "SHA-1", "md5", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_45[0] = "SHA1", method='<com.google.firebase.iid.Metadata: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.RNFetchBlob.RNFetchBlobUtils: java.lang.String getMD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA-1", method='<com.google.firebase.iid.GmsRpc: java.lang.String getHashedFirebaseAppName()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_435[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfk: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: com.cardiacdesigns.ecgcheck_gen2.apk
*** Base package: com.cardiacdesigns.ecgcheck_gen2
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.zzamu,java.lang.String,com.google.android.gms.internal.zzaol)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzej: com.google.android.gms.internal.zzbp zzp(java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcfw: long zzazx()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzbq: void zza(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzbj)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "SHA1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzami: java.lang.String zzdk(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcfw: long zzah(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcch: java.lang.String zzji(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcay: long zza(com.google.android.gms.internal.zzcgk)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.tagmanager.zzbw: com.google.android.gms.internal.zzbp zzp(java.util.Map)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.zzaoe: com.google.android.gms.internal.zzaoe zzc(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.zzaod: void <clinit>()>'}]
=======================================
Analyzing APK: com.cardiocomm.hcpen.apk
*** Base package: com.cardiocomm.hcpen
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurosky.blecommunication.PelicanDevice: java.lang.String k()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurosky.blecommunication.PelicanDevice: java.lang.String deviceIdentify()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurosky.blecommunication.SeagullDevice: java.lang.String deviceIdentify()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.plugin.datepicker.DatePickerPlugin$1: void run()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurosky.blecommunication.SeagullDevice: java.lang.String J()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.silkimen.cordovahttp.CordovaServerTrust$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.silkimen.cordovahttp.CordovaServerTrust$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.silkimen.cordovahttp.CordovaServerTrust$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1602[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1607[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_321[0] = "MD5", method='<com.contec.healthy50k.DeviceCommand: byte[] GetCode(byte[])>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["SunX509"]
[UnitContainer{unit=r2 = "SunX509", method='<javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>'}]
=======================================
Analyzing APK: com.clarifymobile.apk
*** Base package: com.clarifymobile
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerServiceGcm: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.sentry.core.SentryClient: void <init>(io.sentry.core.SentryOptions,io.sentry.core.transport.Connection)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotificationListenerService: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotification: void <init>(com.facebook.react.bridge.ReactApplicationContext)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.RNFetchBlob.RNFetchBlobUtils$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "md5", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "sha1", "SHA-1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.RNFetchBlob.RNFetchBlobUtils: java.lang.String getMD5(java.lang.String)>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: com.clinicloud.app.apk
*** Base package: com.clinicloud.app
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.c.a.a: void a(c.c.a.a.c.a.a$a,boolean,float,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.nexus.NexusSocket: long calculateReconnectTimerInMS(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.w: java.lang.String a(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.h.p2: java.lang.String b()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.h.s2: void <init>(c.c.a.a.h.i2,java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.h.cf: long B()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.k: void a(android.content.Intent)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.c.a.a.h.s1: void <init>(java.util.concurrent.ScheduledExecutorService,c.c.a.a.h.z1,long,long,double,double)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<io.intercom.com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.internal.w: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.facebook.internal.w: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<d.a.b.f: d.a.b.f c()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<io.intercom.com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.h0.c: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<io.intercom.com.squareup.okhttp.internal.Util: d.a.b.f sha1(d.a.b.f)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<c.c.a.a.h.ob: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<c.c.a.a.h.fa: long a(c.c.a.a.h.qf)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<c.c.a.a.h.cf: long a(android.content.Context,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<c.d.a.a.a.e: boolean e()>'}]
=======================================
Analyzing APK: com.cochlear.clientremote.apk
*** Base package: com.cochlear.clientremote
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.g.a.f.y: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.a.h.e1.c.m: void <init>(int,java.lang.String,i.a.h.g1.e3,m.k0.c.p,i.a.h.e1.c.s$a)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.g.a.e.f.b: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <m.m0.b$a: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.g.a.f.y: void c()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <n.f0: n.o0 a(n.i0,n.p0)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.g.a.e.f.d: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.a.h.e1.c.h: void <init>(long,java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.a.g.g.d: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.g.a.e.f.e: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.f.a.l.h: void <init>(i.f.a.l.d,android.os.Handler)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.g.a.e.f.e: java.lang.String e()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<i.g.a.e.f.e: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<i.g.a.g.d: void <init>(android.content.Context,java.lang.String,i.g.a.g.i)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<i.a.h.d0: java.lang.String h()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<i.b.a.a: i.b.a.f.a a(java.util.UUID,java.security.MessageDigest)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object a(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<i.g.a.e.f.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<o.f: o.f d()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest n()>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["umwxnikwxx"]
[UnitContainer{unit=$r4 = "umwxnikwxx", method='<com.couchbase.lite.internal.replicator.AbstractCBLWebSocket: javax.net.ssl.X509TrustManager trustManagerForCertificates(java.io.InputStream)>'}]
=======================================
Analyzing APK: com.coherohealth.breathesmart.apk
*** Base package: com.coherohealth.breathesmart
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzbq: void zza(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzbm)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.d.e.g: com.bumptech.glide.load.g o()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.zzaqc,java.lang.String,com.google.android.gms.internal.zzart)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzej: com.google.android.gms.internal.zzbs zzv(java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.b$a: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$r7 = "MD5", method='<com.google.android.gms.tagmanager.zzbw: com.google.android.gms.internal.zzbs zzv(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_47[0] = "MD5", method='<com.coherohealth.breathesmart.utils.UUIDUtils: java.lang.String generateUniqueID(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.zendesk.util.DigestUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest e()>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzu: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_1434[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object a(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString d()>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_84[0] = "MD5", method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzapq: java.lang.String zzds(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.zendesk.util.DigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString c()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["0123456789"]
[UnitContainer{unit=return "0123456789", method='<com.coherohealth.breathesmart.utils.UUIDUtils: java.lang.String generateUniqueID(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[UnitContainer{unit=$r1[5] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[14] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[12] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[15] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[13] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 0, method='<com.coherohealth.breathesmart.data.encryption.CryptoUtil: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.zzarm: com.google.android.gms.internal.zzarm zzc(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.zzarl: void <clinit>()>'}]
=======================================
Analyzing APK: com.crfhealth.trialmaxapp.apk
*** Base package: com.crfhealth.trialmaxapp
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_140[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1528[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_49[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_194[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1533[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_135[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_216[0] = "SHA-1", method='<okhttp3.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_205[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_54[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}]
=======================================
Analyzing APK: com.dynosense.dynolife.apk
*** Base package: com.dynosense.dynolife
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES/ECB/NoPadding", "x-amz-matdesc", "x-amz-matdesc"]
[UnitContainer{unit=$fakeLocal_106[0] = "DES/ECB/NoPadding", method='<com.sun.mail.auth.Ntlm: void init0()>'}, UnitContainer{unit=$r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromObjectMetadata(com.amazonaws.services.s3.model.ObjectMetadata,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[])>'}, UnitContainer{unit=$r4 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromInstructionFile0(java.util.Map,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.a.e: boolean j()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.greenrobot.greendao.test.DbTest: void <init>(boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.lsjwzh.widget.recyclerviewpager.FragmentStatePagerAdapter$1: void <init>(com.lsjwzh.widget.recyclerviewpager.FragmentStatePagerAdapter)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: boolean nextBoolean()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.docx4j.openpackaging.parts.PresentationML.JaxbPmlPart: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.docx4j.wml.SdtPr: java.math.BigInteger setId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <u.aly.bj: int a(int,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.c.e: byte[] a(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: int nextInt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: double nextDouble()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.analytics.social.c: java.lang.String a(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.umeng.analytics.social.c: java.lang.String a(java.lang.String,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.b.b.c: void g(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.f.i: java.lang.String a(int,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: float nextFloat()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dynosense.android.dynohome.dyno.statistics.HealthStatisticsDetailFragment: com.github.mikephil.charting.data.LineData getData(int,float)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.location.b.b.c: void b(java.lang.String,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.math.JVMRandom: long nextLong(long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.sun.mail.util.SocketFetcher: java.net.Socket startTLS(java.net.Socket,java.lang.String,java.util.Properties,java.lang.String)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_202[0] = "SHA1", method='<u.aly.bj: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1555[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_812[0] = "MD5", method='<u.aly.bl: java.lang.String u(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_80[0] = "MD5", method='<com.danikula.videocache.ProxyCacheUtils: java.lang.String computeMD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_105[0] = "MD5", method='<u.aly.bm: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1550[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.baidu.location.b.a.d: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.baidu.location.h.a: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_168[0] = "MD5", method='<com.dynosense.android.dynohome.model.network.amazons3.AppUpgradeService$1: void handleMessage(android.os.Message)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1401[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_41[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: void <init>(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_45[0] = "MD5", method='<com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator: byte[] getMD5(byte[])>'}, UnitContainer{unit=$fakeLocal_75[0] = "MD5", method='<u.aly.bj: byte[] b(byte[])>'}, UnitContainer{unit=$fakeLocal_89[0] = "MD5", method='<com.sun.mail.smtp.DigestMD5: byte[] authClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.baidu.location.h.i: java.lang.String a(java.io.File)>'}, UnitContainer{unit=$fakeLocal_138[0] = "MD5", method='<u.aly.bm: java.lang.String a(java.io.File)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_46[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.baidu.location.b.a.c: java.lang.String a(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_311[0] = "MD5", method='<com.sun.mail.pop3.Protocol: java.lang.String getDigest(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_80[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_168[0] = "MD5", method='<com.dynosense.android.dynohome.model.network.amazons3.XuanwuAppUpgradeService$1: void handleMessage(android.os.Message)>'}, UnitContainer{unit=$fakeLocal_79[0] = "MD5", method='<u.aly.bm: java.lang.String a(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["30212102dicudiab", "30212102dicudiab", "30212102dicudiab", "30212102dicudiab", "30212102dicudiab"]
[UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: com.baidu.location.b.b.c$b e()>'}, UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: java.lang.String f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: com.baidu.location.b.b.c$b d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: void b(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: java.lang.String e(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [9, 13, 5, 7, 15, 10, 12, 8, 6, 1, 23, "30212102dicudiab", 11, "30212102dicudiab", 4, 91, 1, "30212102dicudiab", "30212102dicudiab", "30212102dicudiab", 3]
[UnitContainer{unit=$r0[7] = 9, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 13, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 5, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 7, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 15, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 10, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 12, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 8, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 6, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 1, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 23, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$r0[2] = 11, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: void b(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r0[4] = 4, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 91, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 1, method='<u.aly.bj: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: com.baidu.location.b.b.c$b d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: com.baidu.location.b.b.c$b e()>'}, UnitContainer{unit=$fakeLocal_-1[0, 1] = "30212102dicudiab", method='<com.baidu.location.b.b.c: java.lang.String f(java.lang.String)>'}, UnitContainer{unit=$r0[9] = 3, method='<u.aly.bj: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.andykhan.com/jexcelapi/index.html", "http://alog.umengcloud.com/app_logs", "http://localhost/", "http://alog.umeng.com/app_logs", "http://", "http://itsdata.map.baidu.com/long-conn-gps/sdk.php", "http://localhost/", "http://www.andykhan.com/jexcelapi/index.html", "http://", "http://localhost/", "http://www.amazon.co.uk/exec/obidos/ASIN/0571058086/qid=1099836249/sr=1-3/ref=sr_1_11_3/202-6017285-1620664", "http://", "http://www.amazon.com/gp/mas/dl/android?p=", "http://www.andykhan.com/jexcelapi/index.html", "http://alog.umeng.com/app_logs", "http://www.andykhan.com/jexcelapi", "http://"]
[UnitContainer{unit=$fakeLocal_232[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<jxl.read.biff.HyperlinkRecord: void <init>(jxl.read.biff.Record,jxl.Sheet,jxl.WorkbookSettings)>'}, UnitContainer{unit=$r1[1] = "http://alog.umengcloud.com/app_logs", method='<com.umeng.analytics.a: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_31[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_<com.umeng.analytics.a: java.lang.String g> = "http://alog.umeng.com/app_logs", method='<com.umeng.analytics.a: void <clinit>()>'}, UnitContainer{unit=$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://"), method='<com.baidu.location.a.g: void j()>'}, UnitContainer{unit=$fakeLocal_-1[2] = "http://itsdata.map.baidu.com/long-conn-gps/sdk.php", method='<com.baidu.location.c.e$2: void run()>'}, UnitContainer{unit=$fakeLocal_71[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_211[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<jxl.read.biff.HyperlinkRecord: void <init>(jxl.read.biff.Record,jxl.Sheet,jxl.WorkbookSettings)>'}, UnitContainer{unit=$r7 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://"), method='<org.apache.log4j.lf5.viewer.LogBrokerMonitor: void requestOpenURL()>'}, UnitContainer{unit=$fakeLocal_46[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_1083[0] = "http://www.amazon.co.uk/exec/obidos/ASIN/0571058086/qid=1099836249/sr=1-3/ref=sr_1_11_3/202-6017285-1620664", method='<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>'}, UnitContainer{unit=$r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://"), method='<com.baidu.location.a.g: boolean i()>'}, UnitContainer{unit=$r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://www.amazon.com/gp/mas/dl/android?p="), method='<com.github.javiersantos.appupdater.UtilsLibrary: java.net.URL getUpdateURL(android.content.Context,com.github.javiersantos.appupdater.enums.UpdateFrom,com.github.javiersantos.appupdater.objects.GitHub)>'}, UnitContainer{unit=$fakeLocal_272[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<jxl.demo.ReadWrite: void modify(jxl.write.WritableWorkbook)>'}, UnitContainer{unit=<com.umeng.analytics.a: java.lang.String g> = "http://alog.umeng.com/app_logs", method='<com.umeng.analytics.a: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1055[0] = "http://www.andykhan.com/jexcelapi", method='<jxl.demo.Write: void writeLabelFormatSheet(jxl.write.WritableSheet)>'}, UnitContainer{unit=$r5 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("http://"), method='<org.apache.log4j.helpers.SyslogWriter: void <init>(java.lang.String)>'}]
=======================================
Analyzing APK: com.ectosense.nightowl.apk
*** Base package: com.ectosense.nightowl
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NOPADDING", "AES/ECB/NOPADDING"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.zzayi: void <init>(byte[],int)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.zzayi: byte[] zzc(byte[],byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.zzadb: void zza(java.lang.Throwable,java.lang.String,float)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.sentry.core.SentryClient: void <init>(io.sentry.core.SentryOptions,io.sentry.core.transport.Connection)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.zztu: void onAdClosed()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.zzkc: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.remoteconfig.RemoteConfigComponent: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.zzcc: java.util.Random zzy()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkv: long zzg()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.RNFetchBlob.RNFetchBlobUtils$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.RNFetchBlob.RNFetchBlobUtils$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "sha1", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "md5", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "sha1", "SHA-1", "md5", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.zzgq: java.security.MessageDigest zzhg()>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.RNFetchBlob.RNFetchBlobUtils: java.lang.String getMD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_448[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkv: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.zzamu: java.lang.String zzsi()>'}, UnitContainer{unit=interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.RNFetchBlob.RNFetchBlobFS: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.zzamu: java.lang.String zzde(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.zzbm: void run()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [4, "1521499837408", "ISO-8859-1", "ISO-8859-1", 3, 2]
[UnitContainer{unit=$r21[0] = 4, method='<com.google.android.gms.internal.ads.zzayr: com.google.android.gms.internal.ads.zzays zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.zzayw)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "1521499837408", method='<com.google.android.gms.internal.ads.zzcz: com.google.android.gms.internal.ads.zzcz zza(android.content.Context,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESDecrypter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=$b4 = 3, method='<com.google.android.gms.internal.ads.zzayr: com.google.android.gms.internal.ads.zzays zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.zzayw)>'}, UnitContainer{unit=$b4 = 2, method='<com.google.android.gms.internal.ads.zzayr: com.google.android.gms.internal.ads.zzays zza(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.zzayw)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: com.ekodevices.android.apk
*** Base package: com.ekodevices.android
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.b: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.c: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.c: java.lang.String e()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.h: void <init>(com.microsoft.appcenter.http.d,android.os.Handler)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.t: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.c: java.lang.String e()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.Draft_10: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.remoteconfig.j: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.t: void c()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.c: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.java_websocket.drafts.b: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void a(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.ekodevices.android.utils.i: void c()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "SHA1", "SHA1", "SHA1", "SHA1", "SHA1"]
[UnitContainer{unit=$fakeLocal_4[0] = "SHA-1", method='<okio.ByteString: okio.ByteString c()>'}, UnitContainer{unit=$fakeLocal_19[0] = "MD5", method='<org.java_websocket.drafts.c: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_19[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.c: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA1", method='<com.google.android.gms.common.util.a: byte[] a(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_31[0] = "SHA1", method='<com.google.firebase.iid.i: java.lang.String a(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_49[0] = "SHA1", method='<org.java_websocket.drafts.Draft_10: java.lang.String a(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["5Q4GHR58pNpxS1R6zhh2FVXLmRWKe5zBDTT4Wmz2sNzhxwdQ9LvcPHFgcl5T7efR6xNro68ZXoIbI34ztFSISlnE8xRbK5DxL8QwXtgw1COTmm405tSmG68hWH3VBOJUoeFylZQgSli6dF91MAvFEPg4M03yPusl6bsAjvZRdI9gt8pcZD6gQvhm1t8faAvy5HkE9qmZ"]
[UnitContainer{unit=$fakeLocal_1[1] = "5Q4GHR58pNpxS1R6zhh2FVXLmRWKe5zBDTT4Wmz2sNzhxwdQ9LvcPHFgcl5T7efR6xNro68ZXoIbI34ztFSISlnE8xRbK5DxL8QwXtgw1COTmm405tSmG68hWH3VBOJUoeFylZQgSli6dF91MAvFEPg4M03yPusl6bsAjvZRdI9gt8pcZD6gQvhm1t8faAvy5HkE9qmZ", method='<com.ekodevices.android.b.c.a: java.lang.String a(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$i0, <com.ekodevices.android.b.c.a: int c>]
=======================================
Analyzing APK: com.eyeque.eyeque.apk
*** Base package: com.eyeque.eyeque
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.eyeque.eyeque.Pattern: int calculaterandomIntInTen()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkm: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.eyeque.eyeque.Pattern: int randomDistance(int,int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkm: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_244[0] = "MD5", method='<com.amazonaws.services.sqs.MessageMD5ChecksumHandler: java.lang.String calculateMessageAttributesMd5(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://54.191.245.62:8080/eyecloud/api/subjects?access_token=e46cghc52pqd8kvgqmv8ovsi1ufcfetg"]
[UnitContainer{unit=$fakeLocal_77[0] = "http://54.191.245.62:8080/eyecloud/api/subjects?access_token=e46cghc52pqd8kvgqmv8ovsi1ufcfetg", method='<com.eyeque.eyeque.StartActivity$RetrieveSubjectTask: java.lang.String doInBackground(java.lang.Void[])>'}]
=======================================
Analyzing APK: com.getqardio.android.apk
*** Base package: com.getqardio.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/PKCS5PADDING", "AES/ECB/PKCS5Padding"]
[UnitContainer{unit=$fakeLocal_114[0] = "AES/ECB/PKCS5PADDING", method='<com.getqardio.android.utils.CipherManager: java.lang.String decrypt(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_89[0] = "AES/ECB/PKCS5Padding", method='<com.getqardio.android.utils.CipherManager: java.lang.String encrypt(android.content.Context,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.io.network.request.FlickrRequestHandler: java.util.List generateRandomIndexes(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.utils.RandomImageGenerator: void <init>(android.app.Activity,boolean,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService: void showPushNotification(android.content.Context,android.content.Intent,com.mixpanel.android.mpmetrics.MixpanelPushNotification)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.baseble.commands.UniqueIdCommand: java.lang.String csRandomAlphaNumericString(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.utils.engagement.EngagementScreenItemsHelper: com.getqardio.android.utils.engagement.EngagementScreenItem getRandomItem()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amulyakhare.textdrawable.util.ColorGenerator: void <init>(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzla: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.googlefit.ActivityGoalsJobService: java.lang.Boolean lambda$onConnected$0$ActivityGoalsJobService(java.lang.Integer,java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.getqardio.android.googlefit.ActivityGoalsJobServiceCompat: java.lang.Boolean lambda$onConnected$0$ActivityGoalsJobServiceCompat(java.lang.Integer,java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void initSession()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA1"]
[UnitContainer{unit=$fakeLocal_41[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_560[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzla: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.getqardio.android.utils.CipherManager: byte[] md5(byte[])>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_279[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.google.firebase.iid.zzt: java.lang.String zza()>'}, UnitContainer{unit=$fakeLocal_271[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}]
=======================================
Analyzing APK: com.glooko.logbook.apk
*** Base package: com.glooko.logbook
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES/ECB/NoPadding", "AES", "DES", "DES/ECB/NoPadding", "AES", "DES/ECB/NoPadding", "AES", "AES", "DES/ECB/NoPadding", "RC4"]
[UnitContainer{unit=$fakeLocal_518[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_85[0] = "AES", method='<com.glooko.library.gkmodels.GKProvider: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_524[0] = "DES", method='<com.glooko.library.metersync.medtronic.MedtronicDeviceCommunication: void decryptFile(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_521[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl$CipherGen: byte[] getLanManagerSessionKey()>'}, UnitContainer{unit=$fakeLocal_262[0] = "AES", method='<com.securepreferences.SecurePreferencesOld: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_706[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmResponse(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_243[0] = "AES", method='<com.securepreferences.SecurePreferencesOld: java.lang.String encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_64[0] = "AES", method='<com.glooko.library.gkmodels.GKProvider: java.lang.String encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_613[0] = "DES/ECB/NoPadding", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] lmHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_547[0] = "RC4", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] RC4(byte[],byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzfb: void zzg(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.logbook.datasource.C4cArticleDataSource: com.glooko.library.models.learn.C4cArticle getRandomArticle(com.glooko.library.models.learn.C4cArticleCategory,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.measurement.zzaw,java.lang.String,com.google.android.gms.internal.measurement.zzcn)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.meter.TestCgm: void <init>(com.glooko.library.metersync.SyncHandler,com.glooko.library.meter.SyncDeviceType)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.metersync.MeterSyncProtocol: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.meter.TestMeter: int randInt(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.annimon.stream.RandomCompat: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.metersync.MeterSyncProtocol: byte[] buildAuthenticationResponse()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.metersync.audio.AudioDeviceCommunication: void <init>(com.glooko.library.metersync.DeviceParameters,com.glooko.library.metersync.DeviceCommunicationListener,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzei: com.google.android.gms.internal.measurement.zzp zzc(java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfx: long zzmj()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.annimon.stream.RandomCompat: void <init>(long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <oauth.signpost.AbstractOAuthConsumer: java.lang.String generateNonce()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.glooko.library.meter.TestMeter$DataTimerTask: void <init>(com.glooko.library.meter.TestMeter,java.util.Date,java.util.Date)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(org.apache.http.HttpHost)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "SHA", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfx: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$r7 = "MD5", method='<com.google.android.gms.tagmanager.zzbv: com.google.android.gms.internal.measurement.zzp zzc(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_169[0] = "SHA", method='<com.glooko.logbook.application.MyApplication: boolean checkAppSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_63[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzak: java.lang.String zzo(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_162[0] = "MD5", method='<com.glooko.library.servertasks.retrofit2.BaseTask: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$r9 = "MD5", method='<org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_1591[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5: void <init>(byte[])>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_579[0] = "MD5", method='<org.apache.http.impl.auth.NTLMEngineImpl: byte[] ntlm2SessionResponse(byte[],byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_95[0] = "MD5", method='<org.apache.commons.io.input.MessageDigestCalculatingInputStream: void <init>(java.io.InputStream)>'}, UnitContainer{unit=$r10 = "MD5", method='<org.apache.http.impl.auth.DigestSchemeHC4: org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_202[0] = "SHA1", method='<com.glooko.library.metersync.MicrocontrollerCommunicator: javax.crypto.spec.IvParameterSpec computeInitializationVector(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [0, -27, -127, -43, -118, 60, -26, -121, 79, "PreferencesGlooko123!Password", class "Landroid/os/Build;", "56df52eb5bef779710e5e54b990a67ab49affe07448fb05f9b4ac6b15523736c", "PreferencesGlooko123!Password", "5.8", 110, 93, -11, -117, -114, -89, -36, -32, 108, 109, 82, "56df52eb5bef779710e5e54b990a67ab49affe07448fb05f9b4ac6b15523736c", -24, 123, -8, 109, 109, -112, 21, 44, 44, -74, -75, 90]
[UnitContainer{unit=$r1[11] = 0, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[5] = -27, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[12] = -127, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[2] = -43, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[13] = -118, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 60, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[13] = -26, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[10] = -121, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[14] = 79, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_122[0, 1] = "PreferencesGlooko123!Password", method='<com.glooko.library.utilities.storage.SharedPreferencesUtility: android.content.SharedPreferences getSecureInstance(android.content.Context)>'}, UnitContainer{unit=$r2 = class "Landroid/os/Build;", method='<com.securepreferences.SecurePreferences: java.lang.String getDeviceSerialNumber(android.content.Context)>'}, UnitContainer{unit=$r3 = "56df52eb5bef779710e5e54b990a67ab49affe07448fb05f9b4ac6b15523736c", method='<com.glooko.library.gkmodels.GKProvider: java.lang.String encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_122[1] = "PreferencesGlooko123!Password", method='<com.glooko.library.utilities.storage.SharedPreferencesUtility: android.content.SharedPreferences getSecureInstance(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_<com.glooko.library.utilities.SecurePreferences: java.lang.String MIGRATION_VERSION> = "5.8", method='<com.glooko.library.utilities.SecurePreferences: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 110, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 93, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[4] = -11, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[1] = -117, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[15] = -114, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[0] = -89, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[4] = -36, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[9] = -32, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 108, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 82, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r3 = "56df52eb5bef779710e5e54b990a67ab49affe07448fb05f9b4ac6b15523736c", method='<com.glooko.library.gkmodels.GKProvider: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$r1[10] = -24, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 123, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[5] = -8, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[14] = -112, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 21, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[15] = 44, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 44, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[6] = -74, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[3] = -75, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[12] = 90, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, -27, -127, -43, -118, 0, 0, 60, -26, -121, 79, 0, 0, 0, 110, 93, -117, -11, -114, -89, -36, -32, 109, 108, 82, 0, -24, 123, 0, -8, 109, 109, 0, 0, 21, -112, 44, 0, 44, 0, -74, 90, -75]
[UnitContainer{unit=$r0[9] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 0, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[5] = -27, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[12] = -127, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[2] = -43, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[13] = -118, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 60, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[13] = -26, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[10] = -121, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[14] = 79, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 110, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 93, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[1] = -117, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[4] = -11, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[15] = -114, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[0] = -89, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[4] = -36, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[9] = -32, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 108, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 82, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[10] = -24, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 123, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[5] = -8, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 109, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 21, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[14] = -112, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[15] = 44, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 44, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.glooko.library.utilities.EncryptionUtility: void <clinit>()>'}, UnitContainer{unit=$r1[6] = -74, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[12] = 90, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}, UnitContainer{unit=$r1[3] = -75, method='<com.glooko.library.utilities.GlookoConstants: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: [class "Landroid/os/Build;", "PreferencesGlooko123!Password", class "Landroid/os/Build;"]
[UnitContainer{unit=$r2 = class "Landroid/os/Build;", method='<com.securepreferences.SecurePreferences: java.lang.String getDeviceSerialNumber(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_122[1] = "PreferencesGlooko123!Password", method='<com.glooko.library.utilities.storage.SharedPreferencesUtility: android.content.SharedPreferences getSecureInstance(android.content.Context)>'}, UnitContainer{unit=$r2 = class "Landroid/os/Build;", method='<com.securepreferences.SecurePreferencesOld: java.lang.String getDeviceSerialNumber(android.content.Context)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$i0, 2000, @parameter2: int, 10000, 1000, @parameter3: int, 10000, 10000, 10000, @parameter2: int, 2000, @parameter2: int, $i0, $i0, @parameter2: int, $i1, $i0]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["changeit"]
[UnitContainer{unit=return "changeit", method='<ch.qos.logback.core.net.ssl.KeyStoreFactoryBean: java.lang.String getPassword()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/", "http://www.google-analytics.com"]
[UnitContainer{unit=$fakeLocal_33[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_92[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_64[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_117[0] = "http://localhost/", method='<com.glooko.library.mock.MockCall: retrofit2.Response execute()>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}, UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.measurement.zzcg: com.google.android.gms.internal.measurement.zzcg zza(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.measurement.zzcf: void <clinit>()>'}]
=======================================
Analyzing APK: com.glucome.android.glucomeandroidapp6.apk
*** Base package: com.glucome.android.glucomeandroidapp6
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.tubesock.WebSocketWriter: void <init>(com.google.firebase.database.tubesock.WebSocket,java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.tubesock.WebSocketHandshake: int rand(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjy: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.storage.internal.ExponentialBackoffSender: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.core.utilities.PushIdGenerator: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <de.greenrobot.dao.test.DbTest: void <init>(boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.database.connection.util.RetryHelper: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.firebase.database.logging.LogWrapper,long,long,double,double)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_442[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjy: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_108[0] = "SHA-1", method='<com.google.firebase.database.core.utilities.Utilities: java.lang.String sha1HexDigest(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
Analyzing APK: com.h2sync.android.h2syncapp.apk
*** Base package: com.h2sync.android.h2syncapp
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding", "AES/ECB/NOPADDING", "AES/ECB/NoPadding", "AES/ECB/NOPADDING", "DES", "AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_611[0] = "AES/ECB/NoPadding", method='<com.h2sync.h2synclib.NFC.meter.b: void b(byte[])>'}, UnitContainer{unit=$fakeLocal_55[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.aaj: byte[] a(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_225[0] = "AES/ECB/NoPadding", method='<com.h2sync.h2synclib.ble.b.a: byte[] d(byte[])>'}, UnitContainer{unit=$fakeLocal_7[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.aaj: void <init>(byte[],int)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "DES", method='<com.tencent.mm.sdk.platformtools.d: void a(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_677[0] = "AES/ECB/NoPadding", method='<com.h2sync.h2synclib.NFC.meter.b: byte[] b(byte[],byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.bfn: void a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.appsflyer.internal.b: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.d.e.j: com.bumptech.glide.load.g o()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.greenrobot.greendao.test.DbTest: void <init>(boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.b: long d()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.cp: java.lang.String a(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.fi: long g()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.h2sync.h2synclib.ble.a.bq: byte[] d()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.ae: void <init>(io.a.a.a.a.c.a.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.mozilla.javascript.NativeMath: java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.nhi.mhbsdk.e.ʼ: java.lang.String ˎ(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.do: void a(java.lang.Throwable,java.lang.String,float)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.nhi.mhbsdk.e.ʼ: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.alk: java.util.Random c()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.avj: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.stripe.net.MultipartProcessor: java.lang.String getBoundary()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.a.b.dd: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.sun.mail.util.SocketFetcher: java.net.Socket startTLS(java.net.Socket,java.lang.String,java.util.Properties,java.lang.String)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.a.a.a.a.e.p
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of c.a.a.a.a.b.e
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of c.a.a.a.a.b.e
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.guardsquare.dexguard.runtime.net.PublicKeyTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.nhi.mhbsdk.api.ˋ$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.nhi.mhbsdk.api.ˋ$2
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.nhi.mhbsdk.api.ˋ$5
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in c.a.a.a.a.b.f
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1, 0] used in com.guardsquare.dexguard.runtime.net.SSLPinner$If
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.nhi.mhbsdk.api.ˋ$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "SHA1", "MD5", "SHA1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.google.android.gms.internal.ads.ne: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_26[0] = "MD5", method='<com.appsflyer.internal.ai: java.lang.String ॱ(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.fi: java.security.MessageDigest i()>'}, UnitContainer{unit=$fakeLocal_37[0] = "MD5", method='<com.cogini.h2.h.e: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1047[0] = "SHA1", method='<com.appsflyer.internal.aa$1: java.lang.Object call()>'}, UnitContainer{unit=$fakeLocal_272[0] = "MD5", method='<com.facebook.internal.cp: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.a.a.a.a.e.p: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<com.google.android.gms.internal.ads.akt: void run()>'}, UnitContainer{unit=$fakeLocal_147[0] = "MD5", method='<com.google.android.gms.internal.ads.ne: java.lang.String c()>'}, UnitContainer{unit=$fakeLocal_7[0] = "MD5", method='<com.google.android.gms.internal.ads.aqe: java.security.MessageDigest a()>'}, UnitContainer{unit=$fakeLocal_782[0] = "SHA-1", method='<com.facebook.ac: java.lang.String d(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<e.k: e.k d()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.w: java.lang.String a(java.lang.String,com.google.android.gms.common.p,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<e.k: e.k c()>'}, UnitContainer{unit=$fakeLocal_13[0] = "SHA-1", method='<com.appsflyer.internal.ai: java.lang.String ˎ(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.r: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_123[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_623[0] = "MD5", method='<org.mozilla.javascript.tools.shell.Main: byte[] getDigest(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.a.a.a.a.b.m: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.a.a.a.a.b.m: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_281[0] = "MD5", method='<com.facebook.a.f: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_280[0] = "SHA-1", method='<com.facebook.internal.cp: java.lang.String a(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["1529567361524", 4, 3, "1529567361524", 2]
[UnitContainer{unit=$fakeLocal_52[1] = "1529567361524", method='<com.google.android.gms.internal.ads.ami: com.google.android.gms.internal.ads.ami a(android.content.Context,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=$r24[0] = 4, method='<com.google.android.gms.internal.ads.aau: com.google.android.gms.internal.ads.aav a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.aaz)>'}, UnitContainer{unit=$b4 = 3, method='<com.google.android.gms.internal.ads.aau: com.google.android.gms.internal.ads.aav a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.aaz)>'}, UnitContainer{unit=$fakeLocal_56[1] = "1529567361524", method='<com.google.android.gms.internal.ads.ami: com.google.android.gms.internal.ads.ami a(android.content.Context,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=$b4 = 2, method='<com.google.android.gms.internal.ads.aau: com.google.android.gms.internal.ads.aav a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.aaz)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://", "http://127.0.0.1", "http:"]
[UnitContainer{unit=virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://"), method='<org.mozilla.javascript.tools.debugger.Dim: java.lang.String loadSource(java.lang.String)>'}, UnitContainer{unit=virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://127.0.0.1"), method='<org.mozilla.javascript.tools.debugger.Dim: java.lang.String loadSource(java.lang.String)>'}, UnitContainer{unit=virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http:"), method='<org.mozilla.javascript.tools.debugger.Dim: java.lang.String loadSource(java.lang.String)>'}]
=======================================
Analyzing APK: com.healcerion.hermionedroid_ce.apk
*** Base package: com.healcerion.hermionedroid_ce
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES"]
[UnitContainer{unit=$fakeLocal_61[0] = "AES", method='<com.healcerion.winzipaes.impl.AESUtilsJCA: void <init>(java.lang.String,int,byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <it.sauronsoftware.ftp4j.FTPDataTransferServer: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.bouncycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement sqrt()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.StandardEncrypter: byte[] generateRandomBytes(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.lingala.zip4j.crypto.AESEncrpyter: byte[] generateSalt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.asn1.ua.DSTU4145PointEncoder: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.raw.Mod: int[] random(int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.healcerion.android.hermione.utils.TimeCheck2: int randomRange(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.healcerion.android.hermione.utils.TimeCheck1: int randomRange(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECCurve$AbstractF2m: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [0, 0, 1L, "HealcerionHIT HermioneUltraSound", "HealcerionHIT HermioneUltraSound", "HealcerionHIT HermioneUltraSound", 0, 0, 0, 0, 0, "ISO-8859-1", 1L, 0, "ISO-8859-1", 0, 0, 0, 0, "HealcerionHIT HermioneUltraSound", 0, 0, 0, 0L, "Healcerion_2012_&u@75t-2}s4fxlN4", 0]
[UnitContainer{unit=$r0[4] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$l12 = 1L << $s2, method='<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream init()>'}, UnitContainer{unit=$fakeLocal_1324[1] = "HealcerionHIT HermioneUltraSound", method='<com.healcerion.android.hermione.common.RecordExtractor: java.lang.String ExtractHeader(android.content.Context,java.io.RandomAccessFile)>'}, UnitContainer{unit=$fakeLocal_1836[1] = "HealcerionHIT HermioneUltraSound", method='<com.healcerion.android.hermione.common.RecordExtractor: java.lang.String ExtractRecordFile(android.content.Context,java.io.RandomAccessFile,float,float,int,boolean)>'}, UnitContainer{unit=$fakeLocal_352[1] = "HealcerionHIT HermioneUltraSound", method='<com.healcerion.android.hermione.utils.SnapshotUtils: int ImportProcessV6(android.content.Context,java.io.File,int,int,android.os.Handler,int,int)>'}, UnitContainer{unit=$r0[2] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESDecrypter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=$l11 = $l11 + 1L, method='<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream init()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r3.<net.lingala.zip4j.crypto.PBKDF2.PBKDF2Parameters: void <init>(java.lang.String,java.lang.String,byte[],int)>("HmacSHA1", "ISO-8859-1", $r1, 1000), method='<net.lingala.zip4j.crypto.AESEncrpyter: byte[] deriveKey(byte[],char[])>'}, UnitContainer{unit=$r0[8] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_2150[1] = "HealcerionHIT HermioneUltraSound", method='<com.healcerion.android.hermione.common.RecordExtractor: java.lang.String ExtractRecordFile(android.content.Context,java.io.RandomAccessFile,float,float,int,boolean)>'}, UnitContainer{unit=$r0[7] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$l11 = 0L, method='<org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$1: javax.crypto.CipherInputStream init()>'}, UnitContainer{unit=$r8 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.FullSettingActivity$84: void onClick(android.view.View)>'}, UnitContainer{unit=$r0[5] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[UnitContainer{unit=$r0[9] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.healcerion.android.hermione.utils.AES256Cipher: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["Healcerion_2012_&u@75t-2}s4fxlN4", "Healcerion_2012_&u@75t-2}s4fxlN4", "Healcerion_2012_&u@75t-2}s4fxlN4", 0, "Healcerion_2012_&u@75t-2}s4fxlN4", "Healcerion_2012_&u@75t-2}s4fxlN4", 0]
[UnitContainer{unit=$r5 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.LoginActivity$24: void onClick(android.view.View)>'}, UnitContainer{unit=$r8 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.FullSettingActivity$84: void onClick(android.view.View)>'}, UnitContainer{unit=$r5 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$r22[1] = 0, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}, UnitContainer{unit=$r3 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.hermionedroid_ce.FirstActivity: void save()>'}, UnitContainer{unit=$r5 = "Healcerion_2012_&u@75t-2}s4fxlN4", method='<com.healcerion.android.hermione.common.LoginActivity$6: void onClick(android.view.View)>'}, UnitContainer{unit=$r22[0] = 0, method='<com.healcerion.android.hermione.common.LoginActivity: void onCreate(android.os.Bundle)>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [100, 100]
[UnitContainer{unit=$fakeLocal_2676[2] = 100, method='<com.healcerion.android.hermione.common.GlobalVars: javax.crypto.SecretKey generateKey(char[],byte[])>'}, UnitContainer{unit=$fakeLocal_2684[2] = 100, method='<com.healcerion.android.hermione.common.GlobalVars: javax.crypto.SecretKey generateKey(char[],byte[])>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r7 = "www.bouncycastle.org", method='<org.bouncycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
Analyzing APK: com.heraeus.heraeuscare.apk
*** Base package: com.heraeus.heraeuscare
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.openudid.OpenUDID_manager: void <init>(android.content.Context)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.sentry.connection.RandomEventSampler: void <init>(double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of ly.count.android.sdk.CertificateTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in io.sentry.connection.HttpConnection$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzaf: java.lang.String zza(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_272[0] = "SHA-1", method='<ly.count.android.sdk.ConnectionProcessor: java.lang.String sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_20[0] = "MD5", method='<com.buddyhealthcare.buddycare.utils.undefined.UniqueInteger: int getUniqueIntegerFromUuid(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_91[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.hmicro.cardiac.apk
*** Base package: com.hmicro.cardiac
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_140[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1528[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_49[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_188[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1533[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_135[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_177[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_54[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://192.168.1.1"]
[UnitContainer{unit=$fakeLocal_71[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_31[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_46[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_37[0] = "http://192.168.1.1", method='<com.hmicro.cardiac.http.RetrofitInterface: retrofit2.Retrofit getClient()>'}]
=======================================
Analyzing APK: com.imagewareinc.pillphoneprod.apk
*** Base package: com.imagewareinc.pillphoneprod
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECCurve$F2m: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nONBField: org.spongycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialField: org.spongycastle.pqc.math.linearalgebra.GF2nElement getRandomRoot(org.spongycastle.pqc.math.linearalgebra.GF2Polynomial)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facetec.zoom.sdk.V$5: java.lang.String ˎ(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzgd: long zzgk()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.raw.Mod: int[] random(int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntityBuilder: java.lang.String generateBoundary()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facetec.zoom.sdk.V$5: java.lang.String ˏ(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzaa: long generateEventId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement sqrt()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.spongycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <org.apache.http.impl.pool.BasicConnFactory: org.apache.http.HttpClientConnection create(org.apache.http.HttpHost)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.imagewareinc.pillphone.network.NetConnector$MySSLSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.imagewareinc.pillphone.network.NetConnector$MySSLSocketFactory$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA1", "MD5", "SHA-1", "MD5", "MD2", "SHA-1"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<com.facetec.zoom.sdk.libs.eg: com.facetec.zoom.sdk.libs.eg ˋ()>'}, UnitContainer{unit=$fakeLocal_15[0] = "SHA-1", method='<com.imagewareinc.pillphone.util.ShaUtils: java.lang.String getSha1Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_98[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzam: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_187[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzgd: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_85[0] = "MD2", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_112[0] = "SHA-1", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [0]
[UnitContainer{unit=$c4 = 0, method='<com.facetec.zoom.sdk.o: java.lang.String ˊ(java.lang.String,boolean,int[])>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), null, $i0, $r0.<org.spongycastle.asn1.x509.DigestInfo: byte[] digest>, @this: org.spongycastle.asn1.pkcs.PBES2Parameters, i2 << 8, new org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, $i1 & 32, @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.ASN1Integer iterations>, specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>($b0, $r3, $r2), virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), (org.spongycastle.asn1.pkcs.Pfx) $r1, (org.spongycastle.asn1.ASN1Encodable) $r2, <org.spongycastle.jce.provider.BouncyCastleProvider: java.util.Map keyInfoConverters>, (org.spongycastle.asn1.ASN1Encodable) $r0, new org.spongycastle.asn1.ASN1InputStream, new org.spongycastle.asn1.ASN1StreamParser, $r0.<org.spongycastle.asn1.pkcs.PBKDF2Params: org.spongycastle.asn1.ASN1Integer iterationCount>, $r3, i3 << 0, $r3, $r9, specialinvoke $r9.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $r0.<org.spongycastle.asn1.ASN1InputStream: int limit>, null, interfaceinvoke $r9.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r10), virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), @this: org.spongycastle.asn1.pkcs.PBKDF2Params, null, $i0, staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), $r2, virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.SafeBag: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $i0, $i0, $i0, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.ContentInfo contentInfo>, $r3.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom random>, (org.spongycastle.asn1.pkcs.PBES2Parameters) $r1, (org.spongycastle.asn1.ASN1Encodable) $r0, $r12, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, virtualinvoke $r11.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r8), r1, $i1, (org.spongycastle.asn1.pkcs.PKCS12PBEParams) $r1, new javax.crypto.spec.PBEParameterSpec, $r2, $r0.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1Encodable content>, $r29[$i0], @this: org.spongycastle.asn1.x509.DigestInfo, @this: org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, $r1, virtualinvoke $r17.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), new org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>, (org.spongycastle.asn1.ASN1OctetString) $r6, $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), new org.spongycastle.asn1.pkcs.PBKDF2Params, $r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Vector seq>, null, $r1, $r2, $i0, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>(), @parameter0: java.lang.Object, 1, $i2, $r3, $r6, specialinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), r0.<java.io.DataInputStream: java.io.InputStream in>, virtualinvoke $r2.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>(), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBKDF2Params: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), (java.security.PrivateKey) $r18, virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>(), $r2, @parameter0: java.lang.Object, $i0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), virtualinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i1, $i2, $i0), new org.spongycastle.asn1.pkcs.AuthenticatedSafe, $i0 & 1023, $r2, @this: org.spongycastle.asn1.pkcs.KeyDerivationFunc, @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>(), virtualinvoke $r1.<java.io.InputStream: int read()>(), (org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, @this: org.spongycastle.asn1.pkcs.SafeBag, interfaceinvoke $r9.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.SecretKeyFactory createSecretKeyFactory(java.lang.String)>($r10), @this: org.spongycastle.asn1.pkcs.AuthenticatedSafe, @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r3, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $i1, $i0, $r2, new org.spongycastle.asn1.IndefiniteLengthInputStream, r0.<java.io.DataInputStream: java.io.InputStream in>, $r3, (org.spongycastle.asn1.pkcs.EncryptedData) $r1, staticinvoke <org.spongycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r0, $i1), @parameter1: char[], virtualinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec pbeKeySpec>, @parameter0: java.lang.Object, lengthof $r6, $s5, new org.spongycastle.asn1.pkcs.EncryptedData, @parameter2: int, (org.spongycastle.asn1.ASN1Sequence) $r6, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>(), @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, staticinvoke <org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r2), @this: org.spongycastle.asn1.ASN1InputStream, @this: org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>, @parameter0: byte[], -1, @parameter0: byte[], (org.spongycastle.asn1.ASN1Sequence) $r0, null, $r12, $i12 + $i11, r1, $i10 + $i9, $r2, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, (org.spongycastle.asn1.ASN1Sequence) $r36, @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, $r0.<org.spongycastle.asn1.ASN1OctetString: byte[] string>, r1, @this: org.spongycastle.asn1.ASN1Set, @parameter2: int, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams params>, $r12, (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r1, $i0, @this: org.spongycastle.asn1.ASN1Sequence, $r2, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r2), $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector set>, null, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int read()>(), $i0, @this: org.spongycastle.asn1.pkcs.Pfx, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedData: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), (org.spongycastle.asn1.ASN1Set) $r0, virtualinvoke $r17.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), $r0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), null, $r3, staticinvoke <org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r6), $r0.<org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.KeyDerivationFunc func>, (org.spongycastle.asn1.ASN1Set) $r15, $i0, @parameter4: byte[], r1, r53, @this: org.spongycastle.asn1.pkcs.ContentInfo, @parameter4: int, virtualinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r2, $r12, $r6, @parameter0: java.lang.Object, $r0.<org.spongycastle.asn1.x509.DigestInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, r1, $i0, $i0, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.MacData macData>, (org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) $r4, (org.spongycastle.asn1.ASN1Primitive) $r15, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r2), @this: org.spongycastle.asn1.pkcs.MacData, virtualinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), @parameter0: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, $r0.<org.spongycastle.asn1.pkcs.MacData: org.spongycastle.asn1.x509.DigestInfo digInfo>, $r19, 1024, @parameter2: org.spongycastle.asn1.pkcs.PKCS12PBEParams, virtualinvoke $r2.<java.io.InputStream: int read()>(), interfaceinvoke $r9.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r10), $r1, @parameter0: char[], staticinvoke <org.spongycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0), virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int readLength()>(), @parameter0: java.lang.Object, (org.spongycastle.asn1.ASN1Sequence) $r2, $r3, @this: org.spongycastle.asn1.pkcs.SafeBag, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $b4 & 255, specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), r0.<java.io.DataInputStream: java.io.InputStream in>, r1, @parameter2: int, $r4, $i1, virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>(), null, $i0 + 1024, new java.io.BufferedInputStream, (org.spongycastle.asn1.ASN1Encodable) $r2, @parameter1: java.security.Key, virtualinvoke r0.<java.util.Random: int next(int)>(32), @this: org.spongycastle.asn1.ASN1OctetString, $r1, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $i0, new org.spongycastle.asn1.BERApplicationSpecificParser, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.spongycastle.asn1.pkcs.AuthenticatedSafe) $r1, r1, new org.spongycastle.asn1.pkcs.Pfx, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector set>, (org.spongycastle.asn1.pkcs.PBKDF2Params) $r1, specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), $r1, $r2, virtualinvoke $r4.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>(), @parameter1: java.security.Key, virtualinvoke $r7.<org.spongycastle.asn1.BERSetParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), r1, i0, null, interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBES2Parameters: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @parameter0: java.lang.Object, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, virtualinvoke $r3.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>(), $r1, i1 << 16, $r0, $i0, $r2, specialinvoke $r2.<org.spongycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), $r3, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.Pfx: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), i0 << 24, $i2, $r3, $r4, specialinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.spongycastle.asn1.ASN1StreamParser)>($i2, $r3), @this: org.spongycastle.asn1.x509.AlgorithmIdentifier, @parameter0: java.lang.Object, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, $i0, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), @parameter0: java.lang.Object, @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r1, null, @this: org.spongycastle.asn1.pkcs.Pfx, $r3, $r8, specialinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r15, null, @parameter0: java.lang.Object, r1, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, null, r1, @this: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, $i13, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.spongycastle.asn1.pkcs.KeyDerivationFunc: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.spongycastle.asn1.pkcs.PBKDF2Params params>, @parameter1: java.security.Key, $r0.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: org.spongycastle.asn1.pkcs.ContentInfo[] info>, $r2, (org.spongycastle.asn1.ASN1OctetString) $r15, new org.spongycastle.asn1.BERSetParser, r1, (org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r32, new org.spongycastle.asn1.BEROctetStringParser, @parameter0: byte[], @this: org.spongycastle.asn1.ASN1Set, virtualinvoke $r3.<java.io.InputStream: int read()>(), r1, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.ASN1OctetString data>, new org.spongycastle.asn1.DERExternalParser, new org.spongycastle.asn1.pkcs.PBES2Parameters, staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set getInstance(java.lang.Object)>($r2), r52, $r0, r1, virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>(), interfaceinvoke $r5.<org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r0), $r5, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Encodable bagValue>, $r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int type>, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Set bagAttributes>, r1, $r0, new org.spongycastle.asn1.BERSequenceParser, null, new java.io.DataInputStream, $i1, @this: org.spongycastle.asn1.pkcs.MacData, new org.spongycastle.asn1.BERTaggedObjectParser, @this: org.spongycastle.asn1.x509.DigestInfo, $i0, $i0, new org.spongycastle.asn1.pkcs.SafeBag, $i0, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, (org.spongycastle.asn1.ASN1Set) $r2, $r3, new org.spongycastle.asn1.ASN1InputStream, $r2, @parameter0: java.lang.Object, virtualinvoke $r9.<org.spongycastle.asn1.DERExternalParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r1[$i2], $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable parameters>, $r3, $r7, specialinvoke $r7.<org.spongycastle.asn1.BERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), (org.spongycastle.asn1.pkcs.SafeBag) $r1, $r1, $r0.<org.spongycastle.asn1.pkcs.MacData: java.math.BigInteger iterationCount>, $r3, $r10, specialinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $i0, r0.<java.io.DataInputStream: java.io.InputStream in>]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r7 = "www.bouncycastle.org", method='<org.spongycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
Analyzing APK: com.itamarmedical.watchpat.apk
*** Base package: com.itamarmedical.watchpat
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1555[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1550[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.amazon.com/gp/mas/dl/android?p="]
[UnitContainer{unit=virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://www.amazon.com/gp/mas/dl/android?p="), method='<com.github.javiersantos.appupdater.UtilsLibrary: java.net.URL getUpdateURL(android.content.Context,com.github.javiersantos.appupdater.enums.UpdateFrom,com.github.javiersantos.appupdater.objects.GitHub)>'}]
=======================================
Analyzing APK: com.lifescan.reveal.apk
*** Base package: com.lifescan.reveal
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES", "AES/ECB/NoPadding", "AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_2[0] = "AES", method='<f.c.c.q.b0: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_2[0] = "AES", method='<f.c.c.q.b0: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_3[0] = "AES/ECB/NoPadding", method='<f.c.a.g.a: byte[] d(byte[])>'}, UnitContainer{unit=$fakeLocal_1[0] = "AES/ECB/NoPadding", method='<f.c.a.a.j0.b.a: byte[] b(byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.launchdarkly.android.Throttler: void <init>(java.lang.Runnable,long,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.lifescan.reveal.application.e.a: h.a0 b(android.content.Context,f.c.c.p.d)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.n.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.g: void <init>(com.google.android.gms.internal.measurement.t,java.lang.String,com.google.android.gms.internal.measurement.k1)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.s.j: void a(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.n.g.g: com.bumptech.glide.load.f j()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.c.c.n.c: int b()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.a.l4: long t()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.j2.a: void <init>(int,int,long,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.launchdarkly.eventsource.f: void <init>(com.launchdarkly.eventsource.f$c)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.g
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "SHA1", "MD5", "SHA1", "SHA1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.a.l4: java.security.MessageDigest x()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.appsflyer.f0: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<io.fabric.sdk.android.m.b.i: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_24[0] = "SHA1", method='<com.lifescan.reveal.services.w0: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.internal.measurement.k: java.lang.String j(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.q: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<io.fabric.sdk.android.services.network.g: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.appsflyer.f0: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_5[0] = "SHA-1", method='<com.google.android.gms.common.a0: java.lang.String a(java.lang.String,com.google.android.gms.common.s,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<i.i: i.i h()>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.fabric.sdk.android.m.b.i: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_4[0] = "SHA1", method='<com.lifescan.reveal.services.AuthenticationService: java.lang.String g(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<i.i: i.i i()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [-76, -67, 4, 107, 72, 108, -12, 50, 125, -43, 0, 22, 59, -108, -14, -45, 109, -33, 87, -26, 99, -62, -116, -85, 13, 69, -116, -4, -20, -53, 69, 77]
[UnitContainer{unit=$r0[14] = -76, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[6] = -67, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 4, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 107, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 72, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 108, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -12, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 50, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 125, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[12] = -43, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 22, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 59, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -108, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[10] = -14, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[2] = -45, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 109, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[5] = -33, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 87, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[11] = -26, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 99, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -62, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[15] = -116, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[15] = -85, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 13, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 69, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[9] = -116, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[12] = -4, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[4] = -20, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[4] = -53, method='<f.c.a.g.d: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 69, method='<f.c.a.g.a: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 77, method='<f.c.a.g.a: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.measurement.d1: com.google.android.gms.internal.measurement.d1 a(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.measurement.c1: void <clinit>()>'}]
=======================================
Analyzing APK: com.livongo.lvmobility.apk
*** Base package: com.livongo.lvmobility
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.b.j1.a0: void <init>(java.lang.String,java.lang.String,f.b.t0$b,f.b.j1.b2$d,e.a.b.a.p,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <g.y.b$a: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.livongo.lvmobility.utils.MathUtils: int hourlyBasedRNG(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.livongo.lvmobility.hypertension.BPInsightFragment: void e(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.b.o1.a: void <init>(f.b.l0$d)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.apptentive.android.sdk.util.StringUtils: java.lang.String randomAndroidID()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.a.d4: long s()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.b.j1.v1: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.livongo.lvmobility.homescreen.WeightGoalReachedDialog: android.app.Dialog onCreateDialog(android.os.Bundle)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <e.c.a.z.b.v: e.c.a.z.b.e0 a(e.c.a.z.b.y,e.c.a.z.b.f0)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.apptentive.android.sdk.module.engagement.notification.NoteInteractionNotificationAdapter: void actionDisplayNotification(android.content.Context,java.lang.String,com.apptentive.android.sdk.module.engagement.interaction.model.TextModalInteraction)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.q.g.g: com.bumptech.glide.load.g j()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.c.t: void <init>(f.a.a.a.n.c.o.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.b.j1.c0: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.b.l1.h: void <init>(java.net.InetSocketAddress,java.lang.String,java.lang.String,f.b.a,java.util.concurrent.Executor,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,f.b.l1.r.b,int,int,f.b.a0,java.lang.Runnable,int,f.b.j1.j2,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.apptentive.android.sdk.network.HttpRequestRetryPolicyDefault: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.livongo.lvmobility.o.j0$r: void a(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void initSession()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of f.a.a.a.n.e.h
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in okhttp3.internal.platform.ConscryptPlatform$platformTrustManager$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA1", "SHA1", "SHA1", "SHA1"]
[UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<f.a.a.a.n.b.i: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<f.a.a.a.n.b.i: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.apptentive.android.sdk.util.Util: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<h.i: h.i j()>'}, UnitContainer{unit=$fakeLocal_19[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<e.c.a.z.c.f: e.c.a.z.c.f d()>'}, UnitContainer{unit=$fakeLocal_5[0] = "SHA-1", method='<com.google.android.gms.common.a0: java.lang.String a(java.lang.String,com.google.android.gms.common.s,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.a.d4: java.security.MessageDigest w()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<h.i: h.i i()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<f.a.a.a.n.e.h: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.r: java.lang.String a(java.security.KeyPair)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [10000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}]
=======================================
Analyzing APK: com.naturalcycles.cordova.apk
*** Base package: com.naturalcycles.cordova
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.adjust.sdk.Util: double randomInRange(double,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzei: com.google.android.gms.internal.gtm.zzl zzb(java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzfb: void zze(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.gtm.zzap,java.lang.String,com.google.android.gms.internal.gtm.zzcg)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.adjust.sdk.AdjustFactory$1$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.adjust.sdk.AdjustFactory$1$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1, "verify hostname ", 0] used in com.adjust.sdk.AdjustFactory$1$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "SHA1", "SHA1", "SHA1", "SHA-1", "MD5", "MD5", "SHA-1"]
[UnitContainer{unit=$r7 = "MD5", method='<com.google.android.gms.tagmanager.zzbv: com.google.android.gms.internal.gtm.zzl zzb(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_173[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_292[0] = "SHA1", method='<com.adjust.sdk.AdjustFactory$1$1: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.google.firebase.iid.zzs: java.lang.String zza()>'}, UnitContainer{unit=$fakeLocal_63[0] = "MD5", method='<com.google.android.gms.internal.gtm.zzad: java.lang.String zzo(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_441[1] = "MD5", method='<com.adjust.sdk.Util: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_433[1] = "SHA-1", method='<com.adjust.sdk.Util: java.lang.String sha1(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.gtm.zzbz: com.google.android.gms.internal.gtm.zzbz zza(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.gtm.zzby: void <clinit>()>'}]
=======================================
Analyzing APK: com.neomalabs.sunrise.apk
*** Base package: com.neomalabs.sunrise
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[],long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfx: long zzmj()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int[],long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.upstream.cache.CachedContentIndex: void writeFile()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_107[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfx: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_194[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1228[0] = "MD5", method='<okio.Buffer: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_205[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_216[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: okio.ByteString sha1(okio.ByteString)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: com.neurometrix.quell.apk
*** Base package: com.neurometrix.quell
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["PBEWithMD5AndDES", "x-amz-matdesc", "PBEWithMD5AndDES"]
[UnitContainer{unit=$fakeLocal_242[0] = "PBEWithMD5AndDES", method='<in.co.ophio.secure.core.ObscuredSharedPreferences: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("x-amz-matdesc"), method='<com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial: com.amazonaws.services.s3.internal.crypto.ContentCryptoMaterial fromObjectMetadata0(com.amazonaws.services.s3.model.ObjectMetadata,com.amazonaws.services.s3.model.EncryptionMaterialsAccessor,java.security.Provider,long[],com.amazonaws.services.s3.model.ExtraMaterialsDescription,boolean,com.amazonaws.services.kms.AWSKMSClient)>'}, UnitContainer{unit=$fakeLocal_189[0] = "PBEWithMD5AndDES", method='<in.co.ophio.secure.core.ObscuredSharedPreferences: java.lang.String encrypt(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.hash.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzha: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.measurement.zzaw,java.lang.String,com.google.android.gms.internal.measurement.zzcn)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzos: com.google.android.gms.internal.measurement.zzrb zza(com.google.android.gms.internal.measurement.zzim,com.google.android.gms.internal.measurement.zzrb[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurometrix.quell.util.Make: com.neurometrix.quell.history.HistoryRecordType historyRecordType()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <net.hockeyapp.android.utils.SimpleMultipartEntity: void <init>(java.io.File)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfk: long zzmc()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurometrix.quell.util.Make: com.neurometrix.quell.quellwebservice.sham.ImmutableQuellApiDeviceHistoryAuditEntry$Builder quellApiHistoryAuditEntry()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzei: com.google.android.gms.internal.measurement.zzp zze(java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzfb: void zzf(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.neurometrix.quell.util.Make: void <clinit>()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$r7 = "MD5", method='<com.google.android.gms.tagmanager.zzbv: com.google.android.gms.internal.measurement.zzp zze(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_1555[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_174[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_63[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzak: java.lang.String zzo(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1550[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.internal.measurement.zzoj: com.google.android.gms.internal.measurement.zzrb zza(com.google.android.gms.internal.measurement.zzim,com.google.android.gms.internal.measurement.zzrb[])>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_88[0] = "MD5", method='<org.apache.commons.io.input.MessageDigestCalculatingInputStream: void <init>(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_181[1] = "MD5", method='<net.hockeyapp.android.LoginActivity: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zza(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: java.security.MessageDigest newMD5()>'}, UnitContainer{unit=$fakeLocal_435[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfk: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_49[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_86[0] = "MD5", method='<com.amazonaws.util.Md5Utils: byte[] computeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_195[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_1641[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["undefined", "0", "false", "true", "[object Object]"]
[UnitContainer{unit=return "undefined", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}, UnitContainer{unit=return "0", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}, UnitContainer{unit=return "false", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}, UnitContainer{unit=return "true", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}, UnitContainer{unit=return "[object Object]", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["undefined", "0", "false", "true", "[object Object]"]
[UnitContainer{unit=return "undefined", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}, UnitContainer{unit=return "0", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}, UnitContainer{unit=return "false", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}, UnitContainer{unit=return "true", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}, UnitContainer{unit=return "[object Object]", method='<com.google.android.gms.internal.measurement.zzkb: java.lang.String zzd(com.google.android.gms.internal.measurement.zzrb)>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["ROBOLECTRICYOUAREBAD"]
[UnitContainer{unit=$r4 = "ROBOLECTRICYOUAREBAD", method='<in.co.ophio.secure.core.ObscuredSharedPreferences: byte[] getSalt()>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [20, 20]
[UnitContainer{unit=$fakeLocal_243[1] = 20, method='<in.co.ophio.secure.core.ObscuredSharedPreferences: java.lang.String decrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_191[1] = 20, method='<in.co.ophio.secure.core.ObscuredSharedPreferences: java.lang.String encrypt(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://%s:3000/", "http://www.google-analytics.com", "http://localhost/", "http://127.0.0.1:8082/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("http://%s:3000/", $r4), method='<com.neurometrix.quell.injection.ApplicationModule: retrofit2.Retrofit provideRetrofit(com.neurometrix.quell.QuellEnvironment,com.neurometrix.quell.quellwebservice.ReachabilityManager)>'}, UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.measurement.zzcg: com.google.android.gms.internal.measurement.zzcg zza(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.measurement.zzcf: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$r3 = "http://127.0.0.1:8082/", method='<com.neurometrix.quell.injection.ApplicationModule: retrofit2.Retrofit provideRetrofit(com.neurometrix.quell.QuellEnvironment,com.neurometrix.quell.quellwebservice.ReachabilityManager)>'}]
=======================================
Analyzing APK: com.omesoft.temperature.apk
*** Base package: com.omesoft.temperature
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.omesoft.util.y: java.lang.String a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.omesoft.util.y: java.lang.String b()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.zhy.autolayout.widget.MetroLayout: void onMeasure(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.omesoft.util.l: java.lang.String a()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.omesoft.util.n: java.lang.String a(java.lang.String)>'}]
=======================================
Analyzing APK: com.oncoassist.core.apk
*** Base package: com.oncoassist.core
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.com.bumptech.glide.load.resource.gif.GifFrameLoader: io.intercom.com.bumptech.glide.load.Key g()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <r40: com.google.android.gms.internal.gtm.zzl zzb(java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <rb: void r()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.GcmRegistrar$Request: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <l50: void p(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[],long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.LocalIdManager: void <init>(java.io.File)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzz: long generateEventId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.nexus.NexusSocket: long calculateReconnectTimerInSeconds(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.api.HeaderInterceptor: io.intercom.android.sdk.api.HeaderInterceptor create(android.content.Context,io.intercom.android.sdk.identity.AppIdentity)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzai: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzjs: long zzjv()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.ParseRequest: bolts.Task executeAsync(com.parse.ParseHttpClient,com.parse.http.ParseHttpRequest,com.parse.ProgressCallback,bolts.Task)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.gtm.zzap,java.lang.String,com.google.android.gms.internal.gtm.zzcg)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void F(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.oncoassist.vo.User: java.lang.String rndId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.epapyrus.plugpdf.core.PDFDocument: java.lang.String getRandomString()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <x6: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.kobjects.crypt.Crypt: java.lang.String generate(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.epapyrus.plugpdf.core.'annotation'.FileDialog: void <init>(android.content.Context,java.lang.String,byte[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.ParsePushBroadcastReceiver: android.app.Notification getNotification(android.content.Context,android.content.Intent)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key g()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.okhttp3.OkHttpClient: io.intercom.okhttp3.WebSocket newWebSocket(io.intercom.okhttp3.Request,io.intercom.okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.wli.framework.http.CustomSSLConnection
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.wli.framework.http.CustomSSLConnection
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$a
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$a
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$e
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$e
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$d
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$d
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of yl0
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.oncoassist.network.ApiClient$h
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.oncoassist.network.ApiClient$h
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.wli.framework.http.CustomSSLConnection
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.parse.ParseDigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$r7 = "MD5", method='<b30: com.google.android.gms.internal.gtm.zzl zzb(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_2[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<io.intercom.okio.HashingSource: io.intercom.okio.HashingSource md5(io.intercom.okio.Source)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.intercom.okio.HashingSource: io.intercom.okio.HashingSource sha1(io.intercom.okio.Source)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<io.intercom.okio.ByteString: io.intercom.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzjs: java.security.MessageDigest b()>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<io.intercom.okio.HashingSink: io.intercom.okio.HashingSink md5(io.intercom.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.internal.gtm.zzad: java.lang.String i(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<io.intercom.okio.Buffer: io.intercom.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA1", method='<yl0: boolean e(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<io.intercom.okio.ByteString: io.intercom.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<jg: java.lang.String e(java.lang.String,dg,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<io.intercom.okio.Buffer: io.intercom.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.intercom.okio.HashingSink: io.intercom.okio.HashingSink sha1(io.intercom.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com", "http://localhost/", "http://tinyurl.com/", "http://localhost/", "http://img.youtube.com/vi/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.gtm.zzbz: com.google.android.gms.internal.gtm.zzbz d(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.gtm.zzby: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_22[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_3[0] = "http://tinyurl.com/", method='<com.oncoassist.view.VideoPlayerActivity: void generateTinyUrlAndShare(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_5[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://img.youtube.com/vi/"), method='<com.wli.framework.media.ImageHelper: android.graphics.Bitmap getImageFromYouTubeID(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_7[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_12[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.philosys.gmateon.apk
*** Base package: com.philosys.gmateon
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzele: void <init>(com.google.android.gms.internal.zzeku,java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.philosys.gmateon.settings.Setting_Statistics: void makeDB()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzecp: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.android.gms.internal.zzejc,long,long,double,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzelb: java.lang.String zzcaz()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.itextpdf.text.pdf.BaseFont: java.lang.String createSubsetPrefix()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzels: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.poi.ss.formula.atp.RandBetween: org.apache.poi.ss.formula.eval.ValueEval evaluate(org.apache.poi.ss.formula.eval.ValueEval[],org.apache.poi.ss.formula.OperationEvaluationContext)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzclq: long zzbay()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.poi.ss.formula.functions.NumericFunction$35: org.apache.poi.ss.formula.eval.ValueEval evaluate(int,int)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "MD5", "sha1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "SHA1", "SHA1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzchx: java.lang.String zzjn(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzu: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_483[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: byte[] createDocumentId()>'}, UnitContainer{unit=specialinvoke $r0.<org.apache.poi.poifs.crypt.HashAlgorithm: void <init>(java.lang.String,int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>("sha1", 1, "SHA-1", 32772, "SHA1", 20, "HmacSHA1", 0), method='<org.apache.poi.poifs.crypt.HashAlgorithm: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_997[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfReader: void readDecryptedDocObj()>'}, UnitContainer{unit=$fakeLocal_311[0] = "SHA1", method='<com.itextpdf.text.pdf.security.LtvVerification: byte[] hashBytesSha1(byte[])>'}, UnitContainer{unit=$fakeLocal_258[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap)>'}, UnitContainer{unit=$fakeLocal_452[0] = "SHA1", method='<com.itextpdf.text.pdf.security.PdfPKCS7: void <init>(byte[],com.itextpdf.text.pdf.PdfName,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_309[0] = "SHA1", method='<com.itextpdf.text.pdf.security.MakeXmlSignature: javax.xml.crypto.dsig.XMLObject generateXadesObject(javax.xml.crypto.dsig.XMLSignatureFactory,com.itextpdf.text.pdf.XmlSignatureAppearance,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzclq: long zzaf(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcgo: long zza(com.google.android.gms.internal.zzcme)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_100[0] = "MD5", method='<com.itextpdf.text.ImgJBIG2: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.internal.zzelt: java.lang.String zzqe(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_642[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfEncryption: com.itextpdf.text.pdf.PdfDictionary getEncryptionDictionary()>'}, UnitContainer{unit=$fakeLocal_145[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: void <init>()>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_243[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PRStream,java.util.HashMap)>'}]
=======================================
Analyzing APK: com.philosys.gmatesmart.apk
*** Base package: com.philosys.gmatesmart
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzele: void <init>(com.google.android.gms.internal.zzeku,java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzecp: void <init>(java.util.concurrent.ScheduledExecutorService,com.google.android.gms.internal.zzejc,long,long,double,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzelb: java.lang.String zzcaz()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.itextpdf.text.pdf.BaseFont: java.lang.String createSubsetPrefix()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzels: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.poi.ss.formula.atp.RandBetween: org.apache.poi.ss.formula.eval.ValueEval evaluate(org.apache.poi.ss.formula.eval.ValueEval[],org.apache.poi.ss.formula.OperationEvaluationContext)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.philosys.gmatesmart.com.PHCommon: void makeDB()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.philosys.gmatesmart.msp.Setting_Statistics: void makeDB()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzclq: long zzbay()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.poi.ss.formula.functions.NumericFunction$35: org.apache.poi.ss.formula.eval.ValueEval evaluate(int,int)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "MD5", "sha1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "SHA1", "SHA1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzchx: java.lang.String zzjn(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.zzu: java.lang.String zzb(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_483[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: byte[] createDocumentId()>'}, UnitContainer{unit=specialinvoke $r0.<org.apache.poi.poifs.crypt.HashAlgorithm: void <init>(java.lang.String,int,java.lang.String,int,java.lang.String,int,java.lang.String,boolean)>("sha1", 1, "SHA-1", 32772, "SHA1", 20, "HmacSHA1", 0), method='<org.apache.poi.poifs.crypt.HashAlgorithm: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_997[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfReader: void readDecryptedDocObj()>'}, UnitContainer{unit=$fakeLocal_311[0] = "SHA1", method='<com.itextpdf.text.pdf.security.LtvVerification: byte[] hashBytesSha1(byte[])>'}, UnitContainer{unit=$fakeLocal_258[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap)>'}, UnitContainer{unit=$fakeLocal_452[0] = "SHA1", method='<com.itextpdf.text.pdf.security.PdfPKCS7: void <init>(byte[],com.itextpdf.text.pdf.PdfName,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_309[0] = "SHA1", method='<com.itextpdf.text.pdf.security.MakeXmlSignature: javax.xml.crypto.dsig.XMLObject generateXadesObject(javax.xml.crypto.dsig.XMLSignatureFactory,com.itextpdf.text.pdf.XmlSignatureAppearance,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzclq: long zzaf(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcgo: long zza(com.google.android.gms.internal.zzcme)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_100[0] = "MD5", method='<com.itextpdf.text.ImgJBIG2: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.internal.zzelt: java.lang.String zzqe(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_642[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfEncryption: com.itextpdf.text.pdf.PdfDictionary getEncryptionDictionary()>'}, UnitContainer{unit=$fakeLocal_145[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: void <init>()>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_243[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PRStream,java.util.HashMap)>'}]
=======================================
Analyzing APK: com.qompium.fibricheck.apk
*** Base package: com.qompium.fibricheck
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.gtm.zzdz: void <init>(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.gtm.zzlr: com.google.android.gms.internal.gtm.zzoa zza(com.google.android.gms.internal.gtm.zzfl,com.google.android.gms.internal.gtm.zzoa[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.UnixCrypt: java.lang.String crypt(byte[],java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <oauth.signpost.AbstractOAuthConsumer: void <init>(java.lang.String,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.qompium.fibricheck.util.FileUtils: void saveJsonFile(byte[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.gtm.zzap,java.lang.String,com.google.android.gms.internal.gtm.zzcg)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.qompium.fibricheck.util.FileUtils: void saveJsonFile(java.io.File)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzko: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzac: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.codec.digest.B64: java.lang.String getRandomSalt(int)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD2", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD2", "SHA1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$r0[2] = "SHA-1", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzl: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zzd,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD2", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd2Digest()>'}, UnitContainer{unit=$fakeLocal_96[0] = "SHA-1", method='<com.stripe.android.StripeTextUtils: java.lang.String shaHashInput(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_189[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$r0[1] = "MD5", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_279[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.internal.gtm.zzli: com.google.android.gms.internal.gtm.zzoa zza(com.google.android.gms.internal.gtm.zzfl,com.google.android.gms.internal.gtm.zzoa[])>'}, UnitContainer{unit=$r0[0] = "MD2", method='<org.apache.commons.codec.digest.MessageDigestAlgorithms: java.lang.String[] values()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.google.firebase.iid.zzt: java.lang.String zza()>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getSha1Digest()>'}, UnitContainer{unit=$fakeLocal_63[0] = "MD5", method='<com.google.android.gms.internal.gtm.zzad: java.lang.String zzo(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_271[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_570[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzko: java.security.MessageDigest zzi()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["false", "undefined", "true", "[object Object]", "0"]
[UnitContainer{unit=return "false", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}, UnitContainer{unit=return "undefined", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}, UnitContainer{unit=return "true", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}, UnitContainer{unit=return "[object Object]", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}, UnitContainer{unit=return "0", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["false", "undefined", "true", "[object Object]", "0"]
[UnitContainer{unit=return "false", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}, UnitContainer{unit=return "undefined", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}, UnitContainer{unit=return "true", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}, UnitContainer{unit=return "[object Object]", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}, UnitContainer{unit=return "0", method='<com.google.android.gms.internal.gtm.zzha: java.lang.String zzd(com.google.android.gms.internal.gtm.zzoa)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://www.google-analytics.com", "http://localhost/", "http://api.fibricheck.com"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.gtm.zzbz: com.google.android.gms.internal.gtm.zzbz zza(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.gtm.zzby: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_113[0] = "http://api.fibricheck.com", method='<com.qompium.fibricheck.retrofit.MyRetrofitBuilder: retrofit2.Retrofit getRetrofit()>'}]
=======================================
Analyzing APK: com.rescontechnologies.lincus.apk
*** Base package: com.rescontechnologies.lincus
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["PBEWithMD5AndDES", "AES/ECB/NoPadding", "AES/ECB/NoPadding", "PBEWithMD5AndDES"]
[UnitContainer{unit=$fakeLocal_1741[0] = "PBEWithMD5AndDES", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] getString(java.lang.String[],int,int,int[],float[],byte[])>'}, UnitContainer{unit=$fakeLocal_1531[0] = "AES/ECB/NoPadding", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] DoCipher(java.lang.String[],int,byte[],byte[],int,javax.crypto.spec.IvParameterSpec)>'}, UnitContainer{unit=$fakeLocal_1523[0] = "AES/ECB/NoPadding", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] DoCipher(java.lang.String[],int,byte[],byte[],int,javax.crypto.spec.IvParameterSpec)>'}, UnitContainer{unit=$fakeLocal_2121[0] = "PBEWithMD5AndDES", method='<com.citrussuite.androidengine.JavaCallbacks: int uploadStrings(java.lang.String[],int,int,int[],float[],byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.citrussuite.androidengine.CitrusSoundRecorder: int HandleButton(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.apps.analytics.AdMobInfo: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzcc: com.google.android.gms.internal.zzag$zza zzP(java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.analytics.internal.zzf,java.lang.String,com.google.android.gms.analytics.internal.zzad)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.apps.analytics.PersistentHitStore: void <init>(android.content.Context,java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.internal.client.zzo: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.apps.analytics.NetworkDispatcher$DispatcherThread$AsyncDispatchTask: void run()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.iid.zzc: void zzea(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.citrussuite.androidengine.CitrusAndroidActivity: android.net.Uri getNewPhotoURI(boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzal: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzal: void zza(java.lang.String,android.content.Context,com.google.android.gms.internal.zzap)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.tagmanager.zzaj: void zzc(com.google.android.gms.tagmanager.DataLayer,com.google.android.gms.internal.zzaf$zzd)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.vending.expansion.downloader.Helpers: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.apps.analytics.PersistentHitStore: void <init>(com.google.android.apps.analytics.PersistentHitStore$DataBaseHelper)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.scribe.services.TimestampServiceImpl$Timer: java.lang.Integer getRandomInteger()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.citrussuite.androidengine.WebPostTask$CustomX509TrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.citrussuite.androidengine.WebPostTask$CustomX509TrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.citrussuite.androidengine.WebPostTask$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA", "MD5", "MD5", "SHA1", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzak: java.lang.String zza(byte[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1877[0] = "SHA-1", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] getString(java.lang.String[],int,int,int[],float[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.analytics.internal.zza: java.lang.String zzbb(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzir: java.lang.String zzhs()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzt: java.lang.String zzfi(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_14[0] = "MD5", method='<org.vudroid.core.utils.MD5StringUtil: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.ads.internal.util.client.zza: java.lang.String zzaH(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_154[0] = "SHA", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getShaDigest()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzn: void zziJ()>'}, UnitContainer{unit=$r6 = "MD5", method='<com.google.android.gms.tagmanager.zzap: com.google.android.gms.internal.zzag$zza zzP(java.util.Map)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzaj: long zzr(byte[])>'}, UnitContainer{unit=$fakeLocal_1765[0] = "MD5", method='<com.citrussuite.androidengine.JavaCallbacks: byte[] getString(java.lang.String[],int,int,int[],float[],byte[])>'}, UnitContainer{unit=$fakeLocal_101[0] = "MD5", method='<org.apache.commons.codec.digest.DigestUtils: java.security.MessageDigest getMd5Digest()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzbg: java.security.MessageDigest zzcL()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [73, 69, 15, -59]
[UnitContainer{unit=$r0[2] = 73, method='<com.citrussuite.androidengine.JavaCallbacks: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 69, method='<com.citrussuite.androidengine.JavaCallbacks: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 15, method='<com.citrussuite.androidengine.JavaCallbacks: void <clinit>()>'}, UnitContainer{unit=$r0[0] = -59, method='<com.citrussuite.androidengine.JavaCallbacks: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [20, 20]
[UnitContainer{unit=$fakeLocal_1742[1] = 20, method='<com.citrussuite.androidengine.JavaCallbacks: byte[] getString(java.lang.String[],int,int,int[],float[],byte[])>'}, UnitContainer{unit=$fakeLocal_2122[1] = 20, method='<com.citrussuite.androidengine.JavaCallbacks: int uploadStrings(java.lang.String[],int,int,int[],float[],byte[])>'}]
=======================================
Analyzing APK: com.resmed.airmini.apk
*** Base package: com.resmed.airmini
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.resmed.mon.ipc.rmon.a.e: java.util.List a(float,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.ag$4: void a()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.a.a.a.b.d
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://"]
[UnitContainer{unit=$r4 = "http://", method='<com.flurry.sdk.dh: void d()>'}]
=======================================
Analyzing APK: com.sandstonediagnostics.v2.trak.apk
*** Base package: com.sandstonediagnostics.v2.trak
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NOPADDING", "AES/ECB/NOPADDING"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.yg: void <init>(byte[],int)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NOPADDING", method='<com.google.android.gms.internal.ads.yg: byte[] a(byte[],byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.ahc: java.util.Random c()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.maps.android.a.b.n: int b(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi25_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi24_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT131R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT571K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT283K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi30_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi27_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT193R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi25_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.ReadableMap,abi25_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT409R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECCurve$F2m: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi28_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.ads.internal.q.a.o: java.lang.String a(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT233R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT113R2Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.ads.internal.q.d.a: void a(android.content.Context,java.lang.String,int,java.lang.Exception)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi30_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.ReadableMap,abi30_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement g()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT163K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.raw.Mod: int[] a(int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.h.iu: long g()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi26_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT131R2Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT571R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT283R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi27_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.ReadableMap,abi27_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT163R2Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT193R2Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi28_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.ReadableMap,abi28_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.cg: void a(java.lang.Throwable,java.lang.String,float)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi24_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.ReadableMap,abi24_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT113R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <versioned.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi26_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.ReadableMap,abi26_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <host.exp.exponent.f.j: int a(java.lang.Integer)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT239K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT233K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi29_0_0.host.exp.exponent.modules.api.NotificationsModule: void presentLocalNotificationWithChannel(abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT163R1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ads.azb: void a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <versioned.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.ReadableMap,com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.custom.sec.SecT409K1Curve: org.spongycastle.math.ec.ECFieldElement a(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <abi29_0_0.host.exp.exponent.modules.api.NotificationsModule: void scheduleLocalNotificationWithChannel(abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.ReadableMap,abi29_0_0.com.facebook.react.bridge.Promise)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.b.a.a.p: void <init>(io.b.a.a.a.c.a.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <host.exp.exponent.notifications.e$2: void a(android.graphics.Bitmap)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.b.a.a.a.e.h
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA1", "SHA1", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_41[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.alu: java.security.MessageDigest a()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.o: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA1", method='<io.b.a.a.a.e.h: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_276[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_380[0] = "MD5", method='<io.a.a.b$a: void <init>(io.a.a.b)>'}, UnitContainer{unit=$fakeLocal_287[1] = "SHA-1", method='<io.b.a.a.a.b.i: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.agl: void run()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.mi: java.lang.String c()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.h.u: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.facebook.ads.internal.q.a.g: java.lang.String b(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_194[0] = "MD5", method='<okhttp3.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_753[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_205[0] = "SHA-1", method='<okhttp3.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<com.facebook.ads.internal.p.a.o: void a(javax.net.ssl.HttpsURLConnection,java.util.Set,java.util.Set)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.android.gms.iid.a: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_32[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_216[0] = "SHA-1", method='<okhttp3.internal.Util: c.f sha1(c.f)>'}, UnitContainer{unit=$fakeLocal_59[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_272[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.ads.internal.q.a.i: java.lang.String a(java.io.File)>'}, UnitContainer{unit=$fakeLocal_280[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_96[0] = "SHA-1", method='<com.stripe.android.u: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_300[0] = "SHA-1", method='<io.b.a.a.a.b.i: java.lang.String a(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.z: java.lang.String b()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.h.iu: java.security.MessageDigest i()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.facebook.ads.internal.o.c: void a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_98[0] = "MD5", method='<org.apache.a.b.b.a: java.security.MessageDigest a()>'}, UnitContainer{unit=$fakeLocal_123[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<expolib_v1.b.f: expolib_v1.b.f c()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ads.mi: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_280[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.ads.internal.p.b.m: java.lang.String d(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<expolib_v1.b.f: expolib_v1.b.f d()>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [2, 4, "1521499837408", 3]
[UnitContainer{unit=$b4 = 2, method='<com.google.android.gms.internal.ads.yp: com.google.android.gms.internal.ads.yq a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.yu)>'}, UnitContainer{unit=$r24[0] = 4, method='<com.google.android.gms.internal.ads.yp: com.google.android.gms.internal.ads.yq a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.yu)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "1521499837408", method='<com.google.android.gms.internal.ads.ahz: com.google.android.gms.internal.ads.ahz a(android.content.Context,java.lang.String,java.lang.String,boolean)>'}, UnitContainer{unit=$b4 = 3, method='<com.google.android.gms.internal.ads.yp: com.google.android.gms.internal.ads.yq a(java.lang.String,byte[],byte[],int,com.google.android.gms.internal.ads.yu)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$r2, virtualinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: org.spongycastle.asn1.ASN1Primitive g()>(), virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), $r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Vector a>, $i0, (org.spongycastle.asn1.pkcs.PKCS12PBEParams) $r1, i2 << 8, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams a>, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.ASN1OctetString b>, new org.spongycastle.asn1.IndefiniteLengthInputStream, $r3, null, r1, (javax.crypto.SecretKey) $r3, @parameter0: java.lang.Object, @parameter0: java.security.Key, $r3, r1, virtualinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: org.spongycastle.asn1.ASN1Primitive g()>(), (org.spongycastle.asn1.ASN1Encodable) $r0, $r1, @this: org.spongycastle.jcajce.PBKDF1KeyWithParameters, @this: org.spongycastle.asn1.x509.AlgorithmIdentifier, (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r2, i3 << 0, @this: org.spongycastle.asn1.pkcs.SafeBag, (org.spongycastle.asn1.pkcs.EncryptedData) $r1, new org.spongycastle.asn1.pkcs.PBKDF2Params, null, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger b()>(), @this: org.spongycastle.asn1.pkcs.PBES2Parameters, r1, $i1, null, virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable b()>(), virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set a(java.lang.Object)>($r2), interfaceinvoke $r5.<org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey a(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r0), $r2, (org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter) $r4, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), new org.spongycastle.asn1.pkcs.AuthenticatedSafe, (org.spongycastle.jcajce.PBKDF1KeyWithParameters) $r11, new org.spongycastle.asn1.x509.AlgorithmIdentifier, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), @this: org.spongycastle.asn1.ASN1Set, new org.spongycastle.asn1.ASN1StreamParser, $r3, $r10, specialinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), r1, @parameter2: int, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $r3, $r9, specialinvoke $r9.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), @parameter0: java.lang.Object, new org.spongycastle.asn1.pkcs.PBES2Parameters, $i1, (org.spongycastle.asn1.ASN1Sequence) $r2, @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, $i0, (org.spongycastle.asn1.ASN1Set) $r0, specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher a(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, interfaceinvoke $r13.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher a(java.lang.String)>($r14), new java.io.DataInputStream, @parameter0: java.lang.Object, (javax.crypto.SecretKey) $r1, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), $i1, $r0.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: org.spongycastle.asn1.pkcs.ContentInfo[] a>, @this: org.spongycastle.asn1.pkcs.MacData, $r1, @this: org.spongycastle.asn1.pkcs.KeyDerivationFunc, virtualinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: org.spongycastle.asn1.ASN1Primitive g()>(), new org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, $r30[$i0], (org.spongycastle.jcajce.PKCS12Key) $r2, $r3, $r7, specialinvoke $r7.<org.spongycastle.asn1.BERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $r11, @parameter0: java.lang.Object, virtualinvoke $r9.<org.spongycastle.asn1.DERExternalParser: org.spongycastle.asn1.ASN1Primitive g()>(), $i1 & 32, virtualinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: org.spongycastle.asn1.ASN1Primitive g()>(), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), r0.<java.io.DataInputStream: java.io.InputStream in>, $r2, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), @parameter4: byte[], $r0.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1Encodable bG>, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, null, $i0 & 1023, @this: org.spongycastle.jcajce.PKCS12KeyWithParameters, $r0.<org.spongycastle.asn1.pkcs.KeyDerivationFunc: org.spongycastle.asn1.x509.AlgorithmIdentifier a>, @parameter0: java.lang.Object, @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r1.<java.io.InputStream: int read()>(), $r1, $i0, @this: org.spongycastle.asn1.pkcs.PKCS12PBEParams, virtualinvoke $r13.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), new org.spongycastle.asn1.DERExternalParser, (org.spongycastle.asn1.pkcs.SafeBag) $r1, r1, i0, $r1, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r1, (javax.crypto.interfaces.PBEKey) $r1, $i0, $r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int a>, @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher, $r3.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom b>, @parameter0: byte[], $r0.<org.spongycastle.asn1.pkcs.MacData: java.math.BigInteger c>, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), r0.<java.io.DataInputStream: java.io.InputStream in>, r1, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedData: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher a(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>($b0, $r3, $r2), $r3, r1, new org.spongycastle.asn1.ASN1InputStream, $i0, @parameter1: char[], $r2, $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector a>, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, @this: org.spongycastle.asn1.ASN1Sequence, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, new org.spongycastle.asn1.pkcs.EncryptedData, $s5, (org.spongycastle.asn1.ASN1Set) $r2, $r2, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int b()>(), lengthof $r6, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper bG>, @this: org.spongycastle.asn1.pkcs.PBKDF2Params, $r0.<org.spongycastle.jcajce.PKCS12KeyWithParameters: int b>, $r2, -1, (org.spongycastle.jcajce.PKCS12KeyWithParameters) $r7, new org.spongycastle.asn1.BERSequenceParser, $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable b>, $i12 + $i11, $i0, $r3, $i10 + $i9, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r0.<org.spongycastle.asn1.ASN1OctetString: byte[] a>, $i1, $r2, @parameter2: org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.ContentInfo bF>, $r0, virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), @this: org.spongycastle.asn1.pkcs.MacData, $r0.<org.spongycastle.asn1.x509.DigestInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier b>, $r0.<org.spongycastle.asn1.ASN1InputStream: int a>, @this: org.spongycastle.asn1.pkcs.Pfx, null, $r2, null, virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: byte[] b()>(), $i1, null, @this: org.spongycastle.asn1.x509.DigestInfo, virtualinvoke $r7.<org.spongycastle.asn1.BERSetParser: org.spongycastle.asn1.ASN1Primitive g()>(), @this: org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, $r6, @this: org.spongycastle.asn1.pkcs.ContentInfo, $r14, $r3, $r8, specialinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), $i0, $r0, (org.spongycastle.asn1.ASN1Sequence) $r37, $r4, i0, staticinvoke <org.spongycastle.asn1.ASN1InputStream: int a(java.io.InputStream,int)>($r0, $i1), $r14, (org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r33, @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier, (org.spongycastle.asn1.ASN1Encodable) $r2, @this: org.spongycastle.asn1.ASN1Set, r1, $i0, $i0, (javax.crypto.interfaces.PBEKey) $r21, $i0, $r3, $r0.<org.spongycastle.asn1.pkcs.MacData: org.spongycastle.asn1.x509.DigestInfo a>, new org.spongycastle.asn1.BERTaggedObjectParser, $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector a>, @parameter0: java.lang.Object, @parameter0: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r4.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String b()>(), 1024, $r0.<org.spongycastle.asn1.pkcs.PBKDF2Params: org.spongycastle.asn1.ASN1Integer c>, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBKDF2Params: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @this: org.spongycastle.asn1.ASN1InputStream, $i0, 1, $i2, $r3, $r6, specialinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), (org.spongycastle.asn1.ASN1OctetString) $r17, virtualinvoke $r2.<java.io.InputStream: int read()>(), new org.spongycastle.asn1.BERSetParser, r1, staticinvoke <org.spongycastle.util.encoders.Hex: byte[] a(byte[],int,int)>($r0, 0, $i0), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.Pfx: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier a()>(), (org.spongycastle.asn1.ASN1Sequence) $r8, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), (org.spongycastle.asn1.ASN1Sequence) $r8, $r2, (org.spongycastle.asn1.pkcs.PBKDF2Params) $r1, $r5, $i0, $i1, $i1, $b4 & 255, r0.<java.io.DataInputStream: java.io.InputStream in>, $r0, $i0, $r2, specialinvoke $r2.<org.spongycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier a>, staticinvoke <org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.x509.AlgorithmIdentifier a(java.lang.Object)>($r2), @parameter2: int, @parameter0: java.lang.Object, @parameter0: char[], new org.spongycastle.asn1.BEROctetStringParser, (org.spongycastle.asn1.ASN1Encodable) $r0, $i0, $i0 + 1024, interfaceinvoke $r11.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher a(java.lang.String)>($r12), $r2, @parameter1: java.security.Key, $i0, @parameter1: java.security.Key, virtualinvoke r0.<java.util.Random: int next(int)>(32), @parameter0: java.lang.Object, @parameter1: java.security.Key, $i0, $i0, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), null, new org.spongycastle.jcajce.PKCS12Key, (org.spongycastle.asn1.ASN1Set) $r17, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive a(int,int,int)>($i1, $i2, $i0), specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), r55, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger b()>(), (org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, null, $r2, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r2), @this: org.spongycastle.asn1.x509.DigestInfo, i0, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.SafeBag: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3), @this: org.spongycastle.asn1.pkcs.AuthenticatedSafe, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), (org.spongycastle.asn1.ASN1Sequence) $r0, new org.spongycastle.asn1.pkcs.Pfx, null, i1 << 16, (java.security.PrivateKey) $r15, virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger a()>(), i0 << 24, (org.spongycastle.asn1.ASN1Sequence) $r37, (org.spongycastle.asn1.ASN1OctetString) $r8, @parameter1: java.security.Key, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), $r3, $r2, $i0, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), virtualinvoke $r3.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive d()>(), $i1, null, null, new java.io.BufferedInputStream, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r2), @this: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, $i13, null, @parameter0: java.lang.Object, (org.spongycastle.asn1.pkcs.AuthenticatedSafe) $r1, @parameter1: java.security.Key, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int read()>(), r1, virtualinvoke $r3.<java.io.InputStream: int read()>(), $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Encodable b>, $r3, r54, (org.spongycastle.jcajce.PBKDF1Key) $r1, @this: org.spongycastle.asn1.pkcs.Pfx, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence a(java.lang.Object)>($r1), $r1, @parameter4: int, (org.spongycastle.asn1.pkcs.Pfx) $r1, $r38, (org.spongycastle.asn1.ASN1Encodable) $r2, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.MacData bG>, $r9, $i2, $r3, $r4, specialinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.spongycastle.asn1.ASN1StreamParser)>($i2, $r3), $r16, staticinvoke <org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams a(java.lang.Object)>($r6), $r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int m>, @parameter0: byte[], $i1, <org.spongycastle.jce.provider.BouncyCastleProvider: java.util.Map c>, $r0.<org.spongycastle.jcajce.PBKDF1KeyWithParameters: int b>, @this: org.spongycastle.asn1.pkcs.SafeBag, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive e()>(), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBES2Parameters: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r14, @parameter0: java.lang.Object, staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString a(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec h>, r1, $r0.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.ASN1Integer a>, r1, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Set c>, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive e()>(), new org.spongycastle.asn1.BERApplicationSpecificParser, @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.spongycastle.asn1.pkcs.PBKDF2Params a>, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper bG>, new org.spongycastle.asn1.ASN1InputStream, $r14, (org.spongycastle.asn1.pkcs.PBES2Parameters) $r1, $r2, new org.spongycastle.asn1.pkcs.SafeBag, r1, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, @this: org.spongycastle.asn1.ASN1OctetString, (org.spongycastle.asn1.ASN1Primitive) $r17, (javax.crypto.interfaces.PBEKey) $r6, @parameter1: java.security.Key, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r1[$i2], $r1, r1, $r0.<org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.KeyDerivationFunc bF>, $r0, $r0.<org.spongycastle.asn1.x509.DigestInfo: byte[] a>, $i0, r0.<java.io.DataInputStream: java.io.InputStream in>, $r1, virtualinvoke $r2.<org.spongycastle.asn1.ASN1OctetString: byte[] c()>()]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google-analytics.com"]
[UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.h.bn: com.google.android.gms.internal.h.bn a(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.h.bm: void <clinit>()>'}]
=======================================
Analyzing APK: com.sanofi.us.MyDoseCoach.android.apk
*** Base package: com.sanofi.us.MyDoseCoach.android
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.greenrobot.greendao.test.DbTest: void <init>(boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bugsee.library.util.q: boolean a(com.bugsee.library.util.q$a,int,int,java.lang.String)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<a.f: a.f d()>'}, UnitContainer{unit=$fakeLocal_196[0] = "MD5", method='<okhttp3copy.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_235[0] = "SHA-1", method='<com.bugsee.library.data.CrashInfo: java.lang.String getCrashSignature(com.bugsee.library.data.CrashInfo$ExceptionInfo)>'}, UnitContainer{unit=$fakeLocal_115[0] = "SHA-1", method='<okiocopy.ByteString: okiocopy.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_110[0] = "MD5", method='<okiocopy.ByteString: okiocopy.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<a.f: a.f c()>'}, UnitContainer{unit=$fakeLocal_18[0] = "SHA-1", method='<com.sanofi.us.MyDoseCoach.android.g.f: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_45[1] = "MD5", method='<okiocopy.HashingSink: okiocopy.HashingSink md5(okiocopy.Sink)>'}, UnitContainer{unit=$fakeLocal_43[1] = "MD5", method='<okiocopy.HashingSource: okiocopy.HashingSource md5(okiocopy.Source)>'}, UnitContainer{unit=$fakeLocal_301[0] = "MD5", method='<com.bugsee.library.task.a.b: java.lang.String a(com.bugsee.library.data.GenerationInfo)>'}, UnitContainer{unit=$fakeLocal_207[0] = "SHA-1", method='<okhttp3copy.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_218[0] = "SHA-1", method='<okhttp3copy.internal.Util: okiocopy.ByteString sha1(okiocopy.ByteString)>'}, UnitContainer{unit=$fakeLocal_1523[0] = "SHA-1", method='<okiocopy.Buffer: okiocopy.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_50[1] = "SHA-1", method='<okiocopy.HashingSink: okiocopy.HashingSink sha1(okiocopy.Sink)>'}, UnitContainer{unit=$fakeLocal_48[1] = "SHA-1", method='<okiocopy.HashingSource: okiocopy.HashingSource sha1(okiocopy.Source)>'}, UnitContainer{unit=$fakeLocal_1518[0] = "MD5", method='<okiocopy.Buffer: okiocopy.ByteString md5()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://www.google.com", "http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_70[0] = "http://www.google.com", method='<com.bugsee.library.network.h: void e()>'}, UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_91[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.sec.android.app.shealth.apk
*** Base package: com.sec.android.app.shealth
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES", "AES"]
[UnitContainer{unit=$fakeLocal_252[3] = "AES", method='<com.samsung.android.app.shealth.tracker.healthrecord.util.HealthRecordSharedPreferenceHelper: byte[] cipherBySecretkey(byte[],byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_156[0] = "AES", method='<com.samsung.android.sdk.healthdata.privileged.util.FileUtil: javax.crypto.Cipher getCipher(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_257[3] = "AES", method='<com.samsung.android.service.health.security.KeyOperation: byte[] cipherMessage(byte[],byte[],boolean)>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.service.health.server.push.SyncPolicyObserver: void addPushList(android.content.Context,java.util.Set)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.coaching.ProgramCoachingInfoManager: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.livetracker.SportNotificationManager: android.app.PendingIntent getPendingIntentWithBackStack(boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.heartrate.data.HeartrateTips: java.lang.String getTip(android.content.res.Resources)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dsi.ant.plugins.antplus.pcc.AntPlusWeightScalePcc$UserProfile: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.websync.sync.SyncManagerService: void enableAutoSync()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.appcessory.session.SAPSession: long generateUniqueId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.websync.service.platform.strava.StravaManager: void reScheduleUploadTaskForNextInterval()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.DummyTask: int getIntRandom(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.coaching.CoachingMessageUtils: int getRandom(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.service.health.data.disposer.DataDisposer: long getTriggerAtMillis()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.manager.PcServerNotificationManager: com.samsung.android.app.shealth.social.togetherbase.data.NotificationContextInfo createNotificationContextInfo(java.lang.String,com.samsung.android.app.shealth.social.togetherpublic.manager.PcServerNotificationManager$NotificationInfo)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.manager.PcNotificationManager: long getRandomTime(long,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.stress.data.StressTips: java.lang.String getTip(android.content.res.Resources)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.message.WearableMessageSocketManager: void issueNonce(java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.service.health.server.monitor.SamsungAccountSamplingLogger: com.samsung.android.service.health.server.monitor.SamsungAccountSamplingLogger$LoggingGroup newLoggingGroup()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.wearablecomm.socket.WearableCommUtil: int getNewSocketId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.analytics.Tracker: void <init>(com.google.android.gms.internal.gtm.zzap,java.lang.String,com.google.android.gms.internal.gtm.zzcg)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.receiver.PcNotificationAlarmReceiver: com.samsung.android.app.shealth.social.togetherbase.data.NotificationContextInfo makeNotificationInfo(int,com.samsung.android.app.shealth.social.togetherpublic.data.PcItem)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.mindfulness.model.MindNotificationManager: android.app.PendingIntent getPendingIntent()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amap.api.mapcore2d.ax: java.lang.String b()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.controller.InsightScriptController: long getNormalDistAlarmTime(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.profile.HomeProfileFragment: void getSummaryStepsAvg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.cycle.manager.CycleNotificationManager: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.spo2.data.Spo2Tips: java.lang.String[] getTip(android.content.res.Resources)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.device.WearableIntent: android.content.Intent requestSync()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzaa: long generateEventId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.food.util.FoodMealMirroringService: void registerJob()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sleep.service.SleepIntentService: void setLoggingAlarm(android.content.Context)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amap.api.mapcore2d.fd: void a(android.content.Context,java.lang.String,int,byte[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.water.ui.fragment.TrackerWaterLogFragment: boolean initiateTrackShare()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.program.programbase.ProgramNotifier: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.message.WearableMessageManager: int sendRequest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.message.MessagePushHandler: void parsePushResponse(java.lang.String,com.samsung.android.app.shealth.data.HealthUserProfileHelper)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.message.WearableMessageManager: int sendRequestMessage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.DummyTask: int getIntRandom()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.goal.insights.util.ScriptUtils: int getRandomIndex(java.util.ArrayList,java.util.ArrayList)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.appcessory.base.SAPAccessoryManager: long generateUniqueId()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.DummyTask: float getFloatRandom(float)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.deleteinfo.DeleteDataManager: boolean setAlarm()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.water.ui.fragment.TrackerWaterLogBaseFragment: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.stress.view.TrackerStressBreathingGuideActivity: void onCreate(android.os.Bundle)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amap.api.mapcore2d.ax: java.lang.String e()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.util.PcGreetingMsgUtil: java.util.ArrayList getGreetingMessage(com.samsung.android.app.shealth.social.togetherpublic.util.PcGreetingMsgUtil$MessageType)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.message.MessageManager: void insertTestMessage(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sleep.analyzer.SleepDataAnalyzerDebugUtil: void insertSleepRawTestData(long,int,com.samsung.android.app.shealth.tracker.sleep.data.SleepItem$SleepType,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.wearable.server.application.WearableServerSyncHelper: void setFirstJobScheduler()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzgd: long zzgk()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.ui.activity.PublicChallengeMyStepsDetailActivity: void updateMessage(com.samsung.android.app.shealth.social.togetherbase.data.LeaderboardOpenData,com.samsung.android.app.shealth.social.togetherbase.data.LeaderboardOpenData)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amap.api.mapcore2d.gf: int f()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.pedometer.service.jobscheduler.StepDaySummaryJobScheduler: void registerJob()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.util.ExerciseAdvancedMetricsUtil$Companion: java.util.List getPracticeDrills(java.util.List,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.sensor.accessory.service.connection.ble.WeightScaleRequester: int generateUserConsent()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.ReportRepository$ReportHandlerService: java.lang.String getNotiMessage(com.samsung.android.app.shealth.home.report.Report)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.livetracker.SportNotificationManager$SportTrackerNotifActionReceiver: void onReceive(android.content.Context,android.content.Intent)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.sport.livetracker.RemoteActionListener: void onResumeTracker()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.tracker.floor.view.fragment.TrackerFloorTrackFragment: void updateFloorTipMessage()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.sensor.accessory.service.server.whitelist.AccessoryWhiteListServerSyncHelper: void setWhiteListServerSyncAlarm()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.home.report.DummyTask: float getFloatRandom()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.samsung.android.app.shealth.social.togetherpublic.ui.view.RoundTwoMapView: java.util.ArrayList getShuffledRanks()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [0, 1] used in com.amap.api.mapcore2d.es$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "SHA", "MD5", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_168[0] = "MD5", method='<com.samsung.android.app.shealth.wearable.util.WearableDataUtil: java.lang.String generateDataUuidThrow(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_125[0] = "MD5", method='<com.amap.api.mapcore2d.cv: byte[] f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_39[0] = "MD5", method='<com.amap.api.mapcore2d.cv: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_206[0] = "MD5", method='<com.samsung.android.service.health.security.KeyMdFile: boolean isDifferentWithStoredMd(android.content.Context,byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_499[2] = "MD5", method='<com.samsung.android.service.health.security.KeyOperation: java.lang.String getTransformedPassword(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_646[0] = "MD5", method='<com.samsung.android.app.shealth.tracker.pedometer.service.utility.Helpers: java.lang.String generateDeviceUuidbyPackageName(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_367[0] = "SHA-1", method='<com.samsung.android.sdk.scloud.decorator.device.SamsungCloudDevice: byte[] sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_390[0] = "MD5", method='<com.samsung.android.app.shealth.tracker.food.foodpick.search.api.boohee.BooheeSearch$Base32Util: java.lang.String str2Md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_153[0] = "SHA-1", method='<com.samsung.android.app.shealth.app.orangesqueezer.FileExtractor: boolean checkHashCode(boolean)>'}, UnitContainer{unit=$fakeLocal_97[0] = "MD5", method='<com.samsung.android.sdk.healthconnectivity.privileged.core.a: java.lang.String a()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_94[0] = "MD5", method='<com.samsung.android.sdk.healthdata.privileged.util.DataUtil: java.lang.String getDataUuidForDevice(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_81[0] = "MD5", method='<com.samsung.android.app.shealth.wearable.wearablecomm.socket.WearableCommUtil: java.lang.String getMD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_324[0] = "MD5", method='<com.samsung.android.app.shealth.social.togetherpublic.util.PcMultipleFileDownLoadQuery: com.samsung.android.app.shealth.social.togetherpublic.util.PcMultipleFileDownLoadQuery$DownloadElement downloadFileFromServer(com.samsung.android.app.shealth.social.togetherpublic.manager.internal.PcFileCache,com.samsung.android.app.shealth.social.togetherpublic.util.PcMultipleFileDownLoadQuery$DownloadElement)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_66[0] = "MD5", method='<com.samsung.android.service.health.security.KeyMdFile: void writeMdFirst(android.content.Context,byte[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_46[0] = "MD5", method='<com.samsung.android.app.shealth.websync.dataconverter.DataUId: java.lang.String generateDataUId(java.lang.String,com.samsung.android.app.shealth.websync.constant.Constants$ServiceProvidersType,com.samsung.android.app.shealth.websync.constant.Constants$MODULE_TYPE,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_331[0] = "SHA", method='<com.samsung.android.sdk.spage.card.CardProvider: boolean isAllowed(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_443[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzgd: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_94[1] = "MD5", method='<com.amap.api.mapcore2d.cv: byte[] b(byte[])>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_388[0] = "MD5", method='<com.samsung.android.app.shealth.sensor.accessory.service.connection.ble.sync.data.DataParser: java.lang.String generateDataUuid(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_215[0] = "SHA1", method='<com.amap.api.mapcore2d.cp: java.lang.String e(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_63[0] = "MD5", method='<com.google.android.gms.internal.gtm.zzad: java.lang.String zzo(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_95[0] = "MD5", method='<com.samsung.android.app.shealth.websync.dataconverter.DataUId: java.lang.String generateDataUId(java.lang.String,com.samsung.android.app.shealth.websync.constant.Constants$ServiceProvidersType,com.samsung.android.app.shealth.websync.constant.Constants$MODULE_TYPE,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_70[0] = "MD5", method='<com.samsung.android.sdk.healthdata.privileged.util.DataUtil: java.lang.String generateDeviceUuidThrow(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["jJeCjsvWFEGrshVu4kYoFQ==", "LINDOR", "encryptedKeystore", "UTF-8", "U4F*(xfn$1WzGUN@LyYMPwyN5Ok(V0bn", "89foTSwfaX7qkid8gpvrX5WuTlXSpSin", "meta_data.json"]
[UnitContainer{unit=$fakeLocal_240[1] = "jJeCjsvWFEGrshVu4kYoFQ==", method='<com.samsung.android.app.shealth.weather.fetcher.cp.accuweather.AccuWeatherFetcherBase: java.lang.String generateAccessKey(java.lang.String)>'}, UnitContainer{unit=$r3 = "LINDOR", method='<com.samsung.android.sdk.scloud.decorator.device.SamsungCloudDevice: java.lang.String generateStrongDeviceIDHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_140[1] = "encryptedKeystore", method='<com.samsung.android.app.shealth.data.smartswitch.SmartSwitchBackupTask: void copyAll(com.samsung.android.app.shealth.data.smartswitch.BackupHelper,byte[])>'}, UnitContainer{unit=specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "UTF-8"), method='<com.samsung.android.service.health.security.KeyOperation: java.security.Key createNewSecretKey(int)>'}, UnitContainer{unit=$r4 = "U4F*(xfn$1WzGUN@LyYMPwyN5Ok(V0bn", method='<com.samsung.android.app.shealth.servicelog.healthanalytics.HealthAnalyticsUtils: java.lang.String getHmac(java.lang.String,java.lang.String,com.samsung.android.app.shealth.servicelog.healthanalytics.HealthAnalyticsConstants$Coverage)>'}, UnitContainer{unit=$r4 = "89foTSwfaX7qkid8gpvrX5WuTlXSpSin", method='<com.samsung.android.app.shealth.servicelog.healthanalytics.HealthAnalyticsUtils: java.lang.String getHmac(java.lang.String,java.lang.String,com.samsung.android.app.shealth.servicelog.healthanalytics.HealthAnalyticsConstants$Coverage)>'}, UnitContainer{unit=$fakeLocal_163[1] = "meta_data.json", method='<com.samsung.android.app.shealth.data.smartswitch.SmartSwitchBackupTask: void copyAll(com.samsung.android.app.shealth.data.smartswitch.BackupHelper,byte[])>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [8, 2, 1, 8, 3, 13, 5, 6, 7, 0, 2, 3, 1, 4, 5, 1]
[UnitContainer{unit=$r1[6] = 8, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[14] = 2, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 1, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 8, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 3, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 13, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 5, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 6, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 7, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 0, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 2, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[13] = 3, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[15] = 1, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[12] = 4, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 5, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 1, method='<com.amap.api.mapcore2d.fy: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: ["LINDOR"]
[UnitContainer{unit=$r3 = "LINDOR", method='<com.samsung.android.sdk.scloud.decorator.device.SamsungCloudDevice: java.lang.String generateStrongDeviceIDHash(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [30]
[UnitContainer{unit=$fakeLocal_211[2] = 30, method='<com.samsung.android.sdk.scloud.decorator.device.SamsungCloudDevice: java.lang.String generateStrongDeviceIDHash(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1000, 1000, 1000]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["TimaPassword"]
[UnitContainer{unit=$r0 = "TimaPassword", method='<com.samsung.android.service.health.security.KnoxTimaKeystoreManager: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://api-dev.samsungknowledge.com/knowledge-ws/v1.3/dp/", "http://www.google-analytics.com", "http://", "http://ifood.boohee.com/v2/ifoods"]
[UnitContainer{unit=$r3 = "http://api-dev.samsungknowledge.com/knowledge-ws/v1.3/dp/", method='<com.samsung.android.app.shealth.store.StoreUtils: java.lang.String getBaseUrlForCMS()>'}, UnitContainer{unit=$r0 = staticinvoke <com.google.android.gms.internal.gtm.zzbz: com.google.android.gms.internal.gtm.zzbz zza(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<com.google.android.gms.internal.gtm.zzby: void <clinit>()>'}, UnitContainer{unit=$r9 = "http://", method='<com.samsung.android.app.shealth.websync.service.platform.technogym.connection.connection.TechnoGymConnectionManager: retrofit2.Retrofit getRetrofit()>'}, UnitContainer{unit=$fakeLocal_206[0] = "http://ifood.boohee.com/v2/ifoods", method='<com.samsung.android.app.shealth.tracker.food.foodpick.search.api.boohee.BooheeSearch: java.lang.String queryGetFoodByGroupId(java.lang.String)>'}]
=======================================
Analyzing APK: com.shl.Smartheart.apk
*** Base package: com.shl.Smartheart
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES"]
[UnitContainer{unit=$fakeLocal_12[0] = "AES", method='<com.phonegap.SimpleCrypto: byte[] a(byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_5[0] = "AES", method='<com.phonegap.SimpleCrypto: byte[] b(byte[],byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.a.a,double)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.j
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.phonegap.v
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.phonegap.v
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.phonegap.u
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "SHA-1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<io.fabric.sdk.android.services.network.j: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_18[0] = "SHA-1", method='<io.fabric.sdk.android.a.b.l: java.lang.String a(java.io.InputStream,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<io.fabric.sdk.android.a.b.l: java.lang.String c(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://10.0.0.100/SmartheartAndroid/", "http://10.0.0.100/SmartheartAndroid/", "http://"]
[UnitContainer{unit=$r9 = "http://10.0.0.100/SmartheartAndroid/", method='<com.shl.Smartheart.tb: void run()>'}, UnitContainer{unit=$r6 = "http://10.0.0.100/SmartheartAndroid/", method='<com.shl.Smartheart.Ha: void run()>'}, UnitContainer{unit=$r4 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("https://", "http://"), method='<com.shl.Smartheart.I: java.lang.String a(com.shl.Smartheart.J)>'}]
=======================================
Analyzing APK: com.silvercloudhealth.android.app.apk
*** Base package: com.silvercloudhealth.android.app
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.y8: long t()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.b.a.a.a.a.a: boolean a(f.b.a.a.a.a.a$a,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <i.z.b$a: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.b.a.a.g.b.a: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <f.b.a.a.g.h.mc: long a()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<f.b.a.a.d.a0: java.lang.String a(java.lang.String,f.b.a.a.d.s,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.i: java.lang.String a(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<l.h: l.h k()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.internal.y8: java.security.MessageDigest x()>'}]
=======================================
Analyzing APK: com.smartinhalerlive.apk
*** Base package: com.smartinhalerlive
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES", "AES"]
[UnitContainer{unit=$r2 = "AES", method='<com.adherium.smartchat.d.c: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$r2 = "AES", method='<com.adherium.smartchat.d.c: java.lang.String b(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.b.e: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(b.a.a.a.a.c.a.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.smartinhalerlive.app.common.analytics.data.encryption.EncryptionAgentImpl: java.lang.String getRandomKey()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.smartinhalerlive.app.feature.usage.overview.domain.GraphHelper: int randomWithRange(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.b.e: java.lang.String d()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.s: void a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.s: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzka: long zzlb()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.b.d: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.a.b.b: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of b.a.a.a.a.e.g
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.google.android.gms.common.net.zza
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.google.android.gms.common.net.zza
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "md5", "SHA-1", "MD5", "MD5", "SHA1", "SHA-1", "SHA1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "md5", "SHA1"]
[UnitContainer{unit=$fakeLocal_1275[1] = "SHA-1", method='<b.a.a.a.a.b.i: java.lang.String a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzfr: java.lang.String zzbp(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_30[0] = "md5", method='<com.smartinhalerlive.app.feature.prescription.common.domain.helper.Md5Digest: java.lang.String hashPrescriptions(java.util.List)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<e.f: e.f c()>'}, UnitContainer{unit=$fakeLocal_42[0] = "MD5", method='<com.smartinhalerlive.app.common.analytics.data.encryption.EncryptionAgentImpl: byte[] encryptString(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.a.b.e: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<b.a.a.a.a.e.g: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_199[0] = "SHA-1", method='<com.c.c.a.h: e.f a(e.f)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.e: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<b.a.a.a.a.b.i: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[2] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzei: long zza(com.google.android.gms.internal.measurement.zzkq)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.measurement.zzka: long zzd(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.zzi: java.lang.String getErrorMessage()>'}, UnitContainer{unit=$fakeLocal_2283[1] = "SHA-1", method='<b.a.a.a.a.b.i: java.lang.String i(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.b.d: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.b.i)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<b.a.a.a.a.b.i: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_123[0] = "SHA-1", method='<com.facebook.stetho.websocket.WebSocketHandler: java.lang.String generateServerKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_13[0] = "md5", method='<com.smartinhalerlive.app.common.data.helper.Md5HashUtil$Companion: java.lang.String md5Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.a.b.b: java.lang.String a(java.lang.String)>'}]
=======================================
Analyzing APK: com.smartmio.apk
*** Base package: com.smartmio
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.smartmio.util.MathUtils: int randomInt(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.lang3.RandomStringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkk: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_275[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_798[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_1555[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_279[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_271[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_300[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1550[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_442[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkk: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["gqL3HU2oQ0Qjh1vI", "a48313dca872819f96a63b9f93ac3245"]
[UnitContainer{unit=$r1 = "gqL3HU2oQ0Qjh1vI", method='<com.smartmio.util.HashUtils: java.lang.String encodePass(java.lang.String)>'}, UnitContainer{unit=$r1 = "a48313dca872819f96a63b9f93ac3245", method='<com.smartmio.util.HashUtils: java.lang.String encodePass(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: ["gqL3HU2oQ0Qjh1vI"]
[UnitContainer{unit=$r1 = "gqL3HU2oQ0Qjh1vI", method='<com.smartmio.util.HashUtils: java.lang.String encodePass(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_75[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_49[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}]
=======================================
Analyzing APK: com.tytocare.apk
*** Base package: com.tytocare
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_22[0] = "AES/ECB/NoPadding", method='<fm.icelink.AesCounterContext: void <init>(fm.icelink.DataBuffer)>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.bouncycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECFieldElement$Fp: org.bouncycastle.math.ec.ECFieldElement sqrt()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzx: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int[],long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.raw.Mod: int[] random(int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndInsert(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fm.icelink.Randomizer: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection$Factory: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tytocare.ui.widget.ColorGenerator: void <init>(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.upstream.cache.CachedContentIndex: void writeFile()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <nucleus.factory.PresenterStorage: void add(nucleus.presenter.Presenter)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[],long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.github.sarxos.webcam.ds.dummy.WebcamDummyDevice: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndClear()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amulyakhare.textdrawable.util.ColorGenerator: void <init>(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.asn1.ua.DSTU4145PointEncoder: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fm.icelink.WebSocket: void <init>(java.lang.String,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fm.Randomizer: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.math.ec.ECCurve$AbstractF2m: org.bouncycastle.math.ec.ECFieldElement solveQuadraticEquation(org.bouncycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.github.sarxos.webcam.ds.dummy.WebcamDummyDevice: void drawRect(java.awt.Graphics2D,int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: com.google.android.exoplayer2.source.ShuffleOrder cloneAndRemove(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkm: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.trackselection.RandomTrackSelection: void <init>(com.google.android.exoplayer2.source.TrackGroup,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer2.source.ShuffleOrder$DefaultShuffleOrder: void <init>(int,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <fm.WebSocket: void <init>(java.lang.String,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.bouncycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <fm.TcpSocket: void <init>(boolean,boolean,boolean)>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <fm.icelink.TcpSocket: void <init>(boolean,boolean,boolean)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.americanwell.sdk.internal.util.APIUtil$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.americanwell.sdk.internal.util.APIUtil$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.americanwell.sdk.internal.util.APIUtil$a
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA1"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_358[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1692[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$r3 = "MD5", method='<fm.icelink.HashContext: void <init>(fm.icelink.HashType)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_19[0] = "SHA-1", method='<fm.Crypto: byte[] sha1Hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_275[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$r3 = "SHA-1", method='<fm.icelink.HashContext: void <init>(fm.icelink.HashType)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkm: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_1697[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_283[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzai: java.lang.String zza(java.security.PublicKey)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$i0, $r1, $r0.<org.bouncycastle.asn1.pkcs.MacData: java.math.BigInteger iterationCount>, i2 << 8, $i1 & 32, virtualinvoke $r13.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), (org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey) $r2, (org.bouncycastle.asn1.ASN1Sequence) $r6, $r3, $r10, specialinvoke $r10.<org.bouncycastle.asn1.BEROctetStringParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), new org.bouncycastle.jcajce.PKCS12Key, $i0, lengthof $r6, interfaceinvoke $r9.<org.bouncycastle.asn1.ASN1Encodable: org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>(), null, null, (org.bouncycastle.asn1.pkcs.Pfx) $r1, (org.bouncycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r32, i3 << 0, null, (org.bouncycastle.asn1.ASN1Set) $r0, @parameter4: int, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.SafeBag: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), interfaceinvoke $r11.<org.bouncycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r12), null, $r2, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), $r0.<org.bouncycastle.asn1.pkcs.ContentInfo: org.bouncycastle.asn1.ASN1Encodable content>, $r4, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), staticinvoke <org.bouncycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r0, $i1), $r3, (org.bouncycastle.asn1.ASN1Sequence) $r2, @parameter0: byte[], $r4.<org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom random>, $r0.<org.bouncycastle.asn1.ASN1InputStream: int limit>, r1, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r2), $i0, $r2, $i0, $r3, specialinvoke $r3.<org.bouncycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.bouncycastle.asn1.ASN1OctetString: byte[] string>, r1, $r37, interfaceinvoke $r13.<org.bouncycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r14), new org.bouncycastle.asn1.pkcs.Pfx, $r0, $i0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), @this: org.bouncycastle.asn1.pkcs.AuthenticatedSafe, (org.bouncycastle.asn1.ASN1Encodable) $r2, $r5, (org.bouncycastle.asn1.pkcs.PBES2Parameters) $r1, $r0.<org.bouncycastle.asn1.pkcs.Pfx: org.bouncycastle.asn1.pkcs.ContentInfo contentInfo>, @parameter0: java.lang.Object, @parameter2: int, $r3, @this: org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, @parameter0: java.lang.Object, @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $r3, $r9, specialinvoke $r9.<org.bouncycastle.asn1.DERExternalParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), $r2, @this: org.bouncycastle.jcajce.PKCS12KeyWithParameters, @parameter0: byte[], $i0 & 1023, (java.security.PrivateKey) $r15, $i0, $r2, $r2, r0.<java.io.DataInputStream: java.io.InputStream in>, $r2, $r0.<org.bouncycastle.asn1.pkcs.PBKDF2Params: org.bouncycastle.asn1.ASN1Integer iterationCount>, $r0.<org.bouncycastle.jcajce.PBKDF1KeyWithParameters: int iterationCount>, virtualinvoke $r8.<org.bouncycastle.asn1.BERSequenceParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), r1, (org.bouncycastle.asn1.ASN1OctetString) $r15, virtualinvoke $r1.<java.io.InputStream: int read()>(), staticinvoke <org.bouncycastle.jce.provider.BouncyCastleProvider: org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter getAsymmetricKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier)>($r2), $r1, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $r0.<org.bouncycastle.asn1.pkcs.AuthenticatedSafe: org.bouncycastle.asn1.pkcs.ContentInfo[] info>, $i0, null, r1, $r12, @parameter1: java.security.Key, @this: org.bouncycastle.asn1.pkcs.PBKDF2Params, new org.bouncycastle.asn1.BEROctetStringParser, $r7, $i0, r1, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PBES2Parameters: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), virtualinvoke $r4.<org.bouncycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>(), (org.bouncycastle.asn1.ASN1Encodable) $r0, @this: org.bouncycastle.asn1.pkcs.MacData, $i0, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: int read()>(), $i0, new org.bouncycastle.asn1.DERExternalParser, $r0.<org.bouncycastle.asn1.pkcs.PBES2Parameters: org.bouncycastle.asn1.pkcs.KeyDerivationFunc func>, (javax.crypto.SecretKey) $r1, $r0.<org.bouncycastle.asn1.pkcs.KeyDerivationFunc: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, $i1, r0.<java.io.DataInputStream: java.io.InputStream in>, @this: org.bouncycastle.asn1.x509.DigestInfo, $i2, $r3, $r4, specialinvoke $r4.<org.bouncycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.bouncycastle.asn1.ASN1StreamParser)>($i2, $r3), $r2, @parameter0: char[], new org.bouncycastle.asn1.BERSetParser, $r0.<org.bouncycastle.asn1.ASN1Set: java.util.Vector set>, null, staticinvoke <org.bouncycastle.asn1.pkcs.PKCS12PBEParams: org.bouncycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r6), specialinvoke $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.bouncycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), new org.bouncycastle.asn1.ASN1StreamParser, new org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, (org.bouncycastle.asn1.pkcs.AuthenticatedSafe) $r1, (org.bouncycastle.asn1.ASN1Sequence) $r0, r1, $s5, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @parameter0: java.lang.Object, $r3, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $i0, r53, new java.io.DataInputStream, $r12, $r0, r1, -1, $r0.<org.bouncycastle.asn1.pkcs.SafeBag: org.bouncycastle.asn1.ASN1Encodable bagValue>, $r2, $r1, new org.bouncycastle.asn1.pkcs.PBKDF2Params, @parameter0: java.lang.Object, (org.bouncycastle.asn1.pkcs.PKCS12PBEParams) $r1, virtualinvoke $r6.<org.bouncycastle.asn1.BERTaggedObjectParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), (org.bouncycastle.asn1.ASN1Sequence) $r36, @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $i12 + $i11, $r4, $r3, $i10 + $i9, @this: org.bouncycastle.asn1.x509.AlgorithmIdentifier, @this: org.bouncycastle.asn1.pkcs.KeyDerivationFunc, null, @this: org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, (org.bouncycastle.asn1.ASN1Primitive) $r15, @this: org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, @parameter4: byte[], $r0.<org.bouncycastle.asn1.pkcs.MacData: org.bouncycastle.asn1.x509.DigestInfo digInfo>, @parameter0: java.lang.Object, $i1, null, (javax.crypto.interfaces.PBEKey) $r19, $r0.<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>(), @parameter2: int, (javax.crypto.interfaces.PBEKey) $r1, r1, $r3, (org.bouncycastle.asn1.pkcs.EncryptedData) $r1, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive readObject()>(), $r0.<org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec pbeKeySpec>, virtualinvoke $r7.<org.bouncycastle.asn1.BERSetParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), @this: org.bouncycastle.asn1.pkcs.PBES2Parameters, $r3, $r8, specialinvoke $r8.<org.bouncycastle.asn1.BERSequenceParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), $i1, i0, @this: org.bouncycastle.asn1.ASN1OctetString, @this: org.bouncycastle.asn1.pkcs.Pfx, @parameter1: java.security.Key, $r2, new org.bouncycastle.asn1.BERSequenceParser, new org.bouncycastle.asn1.pkcs.EncryptedData, @parameter0: java.lang.Object, i0, $r0.<org.bouncycastle.asn1.pkcs.SafeBag: org.bouncycastle.asn1.ASN1Set bagAttributes>, @this: org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey, $r0.<org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int type>, (org.bouncycastle.jcajce.PBKDF1Key) $r1, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), r1, (org.bouncycastle.asn1.ASN1Set) $r2, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i1, $i2, $i0), @this: org.bouncycastle.asn1.pkcs.MacData, virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: int readLength()>(), r1, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @parameter0: org.bouncycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.bouncycastle.jcajce.util.JcaJceHelper helper>, virtualinvoke $r9.<org.bouncycastle.asn1.DERExternalParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), $r3, (org.bouncycastle.jcajce.PKCS12KeyWithParameters) $r5, $i0, r54, $r0.<org.bouncycastle.asn1.x509.DigestInfo: byte[] digest>, @parameter0: java.security.Key, virtualinvoke $r2.<java.io.InputStream: int read()>(), virtualinvoke $r10.<org.bouncycastle.asn1.BEROctetStringParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), @this: org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), virtualinvoke $r2.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>(), @this: org.bouncycastle.asn1.pkcs.SafeBag, new org.bouncycastle.asn1.pkcs.PKCS12PBEParams, $r29[$i0], interfaceinvoke $r9.<org.bouncycastle.asn1.ASN1Encodable: org.bouncycastle.asn1.ASN1Primitive toASN1Primitive()>(), @this: org.bouncycastle.asn1.pkcs.PKCS12PBEParams, $r16, new org.bouncycastle.asn1.ASN1InputStream, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @this: org.bouncycastle.asn1.pkcs.ContentInfo, $b4 & 255, r0.<java.io.DataInputStream: java.io.InputStream in>, $r3, @parameter0: byte[], @parameter0: java.lang.Object, r1, virtualinvoke r0.<java.util.Random: int next(int)>(32), $i0, $r3, $r0.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: org.bouncycastle.asn1.ASN1Integer iterations>, new org.bouncycastle.asn1.pkcs.PKCS12PBEParams, (javax.crypto.interfaces.PBEKey) $r5, new java.io.BufferedInputStream, @parameter2: org.bouncycastle.asn1.x509.AlgorithmIdentifier, r1, 1, $i2, $r3, $r6, specialinvoke $r6.<org.bouncycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.bouncycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), new org.bouncycastle.asn1.BERApplicationSpecificParser, specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), (org.bouncycastle.jcajce.PKCS12Key) $r2, new org.bouncycastle.asn1.x509.AlgorithmIdentifier, interfaceinvoke $r3.<org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r0), @parameter2: org.bouncycastle.asn1.pkcs.PKCS12PBEParams, $i0 + 1024, virtualinvoke $r4.<org.bouncycastle.asn1.BERApplicationSpecificParser: org.bouncycastle.asn1.ASN1Primitive getLoadedObject()>(), null, $r1, (org.bouncycastle.asn1.ASN1Encodable) $r2, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.PBKDF2Params: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), i0, specialinvoke $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.bouncycastle.asn1.x509.AlgorithmIdentifier)>($b0, $r3, $r2), (javax.crypto.SecretKey) $r3, (org.bouncycastle.asn1.pkcs.PBKDF2Params) $r1, i1 << 16, (org.bouncycastle.asn1.ASN1Set) $r15, @this: org.bouncycastle.asn1.ASN1Set, i0 << 24, $r0.<org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>, @this: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, (org.bouncycastle.asn1.ASN1OctetString) $r6, new org.bouncycastle.asn1.pkcs.SafeBag, $r0.<org.bouncycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.bouncycastle.asn1.pkcs.PKCS12PBEParams params>, @this: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PKCS12PBEParams: byte[] getIV()>(), $i0, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), null, new org.bouncycastle.asn1.IndefiniteLengthInputStream, $r0.<org.bouncycastle.asn1.pkcs.Pfx: org.bouncycastle.asn1.pkcs.MacData macData>, @parameter0: org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, r1, null, new org.bouncycastle.asn1.BERTaggedObjectParser, $i13, $r0.<org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.bouncycastle.asn1.pkcs.PBKDF2Params params>, new org.bouncycastle.asn1.ASN1InputStream, $r1, $r2, specialinvoke $r2.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r1), @this: org.bouncycastle.asn1.ASN1Sequence, (org.bouncycastle.asn1.ASN1Encodable) $r0, new org.bouncycastle.asn1.pkcs.AuthenticatedSafe, (org.bouncycastle.asn1.ASN1Sequence) $r6, $i0, virtualinvoke $r3.<java.io.InputStream: int read()>(), null, $i0, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $r12, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.EncryptedData: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), @this: org.bouncycastle.jcajce.PBKDF1KeyWithParameters, @this: org.bouncycastle.asn1.ASN1InputStream, $r0.<org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.bouncycastle.jcajce.util.JcaJceHelper helper>, @parameter0: java.lang.Object, virtualinvoke $r15.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), @parameter2: int, @this: org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo, staticinvoke <org.bouncycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0), staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.bouncycastle.jcajce.PBKDF1KeyWithParameters) $r9, r1, $r0.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1Encodable parameters>, @parameter1: java.security.Key, $r1, virtualinvoke $r2.<org.bouncycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), virtualinvoke $r2.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.ASN1Encodable getParameters()>(), $r0.<org.bouncycastle.asn1.x509.DigestInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier algId>, $i0, $r2, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.bouncycastle.asn1.pkcs.SafeBag) $r1, staticinvoke <org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object)>($r2), $i0, virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), @this: org.bouncycastle.asn1.pkcs.Pfx, $r3, $r0.<org.bouncycastle.jcajce.PKCS12KeyWithParameters: int iterationCount>, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @parameter1: java.security.Key, $r0.<org.bouncycastle.asn1.ASN1Set: java.util.Vector set>, new org.bouncycastle.asn1.pkcs.PBES2Parameters, (org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, staticinvoke <org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @parameter0: java.lang.Object, @parameter1: org.bouncycastle.asn1.x509.AlgorithmIdentifier, $r0, staticinvoke <org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r2), $r3, $r7, specialinvoke $r7.<org.bouncycastle.asn1.BERSetParser: void <init>(org.bouncycastle.asn1.ASN1StreamParser)>($r3), 1024, @this: org.bouncycastle.asn1.ASN1Set, @this: org.bouncycastle.asn1.x509.DigestInfo, @parameter0: java.lang.Object, null, $r1[$i2], staticinvoke <org.bouncycastle.asn1.ASN1OctetString: org.bouncycastle.asn1.ASN1OctetString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), @this: org.bouncycastle.asn1.pkcs.SafeBag, $r0, $r2, specialinvoke $r2.<org.bouncycastle.asn1.pkcs.Pfx: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r0), $r0.<org.bouncycastle.asn1.ASN1Sequence: java.util.Vector seq>, $r1, r0.<java.io.DataInputStream: java.io.InputStream in>]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r8 = "www.bouncycastle.org", method='<org.bouncycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://localhost/", "http://localhost/", "http://localhost/", "http://localhost/"]
[UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_91[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
Analyzing APK: com.vivalnk.feverscout.apk
*** Base package: com.vivalnk.feverscout
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.bugly.proguard.s: byte[] a(java.lang.String,byte[],com.tencent.bugly.proguard.v,java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.b.c.a: float d()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.android.pushservice.d$4: void a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.b.c.a: float e()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.android.pushservice.f: void k()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <d.a.a.b.b.j: java.lang.String d()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.baidu.android.pushservice.g.k$1: void a()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of c.b.a.d.c.g.a
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of c.b.a.d.c.g.a
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in c.b.a.d.c.e.c$a
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.r: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.baidu.android.common.a.c: java.lang.String a(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.tencent.bugly.crashreport.common.info.AppInfo: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.baidu.android.pushservice.j.d: java.lang.String a(byte[],boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.baidu.android.pushservice.j.f: byte[] a(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [77, 70, 49, 120, 73, 89, 65, 68, 79, 90, 51, 107, 51, 90, 77, 73, "utf-8", 65, 105, 122, 67, 100, 82, 72, 73, 108, 81, 79, 105, 75, 52, 77, 61, 81, 77, 76, 122, 76, 116, 86, 53, 121, 90, 107, 72, 103, 83, 69, 77, "utf-8", 104, 84, 68, 121, 121, 101, 61, 81]
[UnitContainer{unit=$r1[0] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 70, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 49, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 120, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 73, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 89, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 65, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 68, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 79, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 51, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 107, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 51, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 73, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "utf-8"), method='<com.baidu.android.pushservice.jni.BaiduAppSSOJni: byte[] getDecrypted(android.content.Context,java.lang.String,byte[])>'}, UnitContainer{unit=$r1[6] = 65, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 105, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 122, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 67, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 100, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 82, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 72, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 73, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 108, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 79, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 105, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 75, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 52, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 77, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 61, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 76, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 122, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 76, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 116, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 86, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 53, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 121, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 107, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 72, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 103, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 83, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 69, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 77, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "utf-8"), method='<com.baidu.android.pushservice.jni.BaiduAppSSOJni: byte[] getEncrypted(android.content.Context,java.lang.String,byte[])>'}, UnitContainer{unit=$r1[2] = 104, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 84, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 68, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 121, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 121, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 101, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 61, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [77, 70, 49, 120, 73, 89, 65, 68, 79, 90, 51, 107, 51, 90, 77, 73, "utf-8", 65, 105, 122, 67, 82, 100, 72, 73, 108, 81, 79, 105, 75, 52, 77, 61, 81, 77, 122, 76, 76, 116, 86, 53, 121, 90, 107, 72, 103, 83, 69, 77, "utf-8", 104, 84, 68, 101, 121, 121, 61, 81]
[UnitContainer{unit=$r1[0] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 70, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 49, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 120, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 73, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 89, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 65, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 68, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 79, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 51, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 107, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 51, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 73, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "utf-8"), method='<com.baidu.android.pushservice.jni.BaiduAppSSOJni: byte[] getDecrypted(android.content.Context,java.lang.String,byte[])>'}, UnitContainer{unit=$r1[6] = 65, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 105, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 122, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 67, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 82, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 100, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 72, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 73, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 108, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 79, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 105, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 75, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[7] = 52, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 77, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 61, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 77, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 122, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 76, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 76, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[2] = 116, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 86, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 53, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 121, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 90, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 107, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[1] = 72, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[10] = 103, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 83, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[6] = 69, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[4] = 77, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "utf-8"), method='<com.baidu.android.pushservice.jni.BaiduAppSSOJni: byte[] getEncrypted(android.content.Context,java.lang.String,byte[])>'}, UnitContainer{unit=$r1[2] = 104, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[5] = 84, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 68, method='<com.baidu.android.common.util.a: void <clinit>()>'}, UnitContainer{unit=$r1[8] = 101, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[9] = 121, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[3] = 121, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[11] = 61, method='<com.baidu.android.common.util.b: void <clinit>()>'}, UnitContainer{unit=$r1[0] = 81, method='<com.baidu.android.common.util.b: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://", "http://10.95.41.15:8080"]
[UnitContainer{unit=$r8 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("http://", ""), method='<com.baidu.android.pushservice.g: void b(android.content.Context)>'}, UnitContainer{unit=virtualinvoke $r9.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("http_server", "http://10.95.41.15:8080"), method='<com.baidu.android.pushservice.g: void b(android.content.Context)>'}]
=======================================
Analyzing APK: com.welldoc.platform.android.apk
*** Base package: com.welldoc.platform.android
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES/ECB/NoPadding", "AES/ECB/NoPadding", "AES/ECB/NoPadding", "AES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<com.lifescan.devicesync.h.a: byte[] d(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<c.a.b.c.a: java.lang.String b(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<c.a.b.c.a: java.lang.String a(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "AES/ECB/NoPadding", method='<com.lifescan.devicesync.a.a.a.a: byte[] c(byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.b.a.c.d.e.g: c.b.a.c.h j()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.http.socketio.SocketIOConnection: long nextReconnectDelay(long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.a.b.a.a.a.f: void a(byte[],int,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.a.A: void <init>(d.a.a.a.a.c.a.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.welldoc.platform.android.ui.home.La: int g(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.a.Mb: long t()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.koushikdutta.async.AsyncSSLSocketWrapper$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of d.a.a.a.a.e.k
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA1", "SHA1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<g.j: g.j i()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.koushikdutta.async.http.spdy.ByteString: java.lang.String toString()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<d.a.a.a.a.b.l: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<g.j: g.j j()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<h.a.a.a.a.a.b.e: byte[] c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.google.android.gms.common.z: java.lang.String a(java.lang.String,com.google.android.gms.common.r,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.measurement.a.Mb: java.security.MessageDigest s()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<d.a.a.a.a.e.k: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.q: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<d.a.a.a.a.b.l: java.lang.String a(java.io.InputStream)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [107, -12, -62, -45, 108, -43, 125, -20, 87, 77, -4, 69, -116, -67, -26, -108, 4, -76, 22, -85, 13, -14, -53, 69, -33, -116, 99, 109, 50, 0, 72, 59]
[UnitContainer{unit=$r0[11] = 107, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -12, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -62, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[2] = -45, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 108, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[12] = -43, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 125, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[4] = -20, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 87, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 77, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[12] = -4, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 69, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[9] = -116, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[6] = -67, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[11] = -26, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -108, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 4, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -76, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 22, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[15] = -85, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 13, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[10] = -14, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[4] = -53, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 69, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[5] = -33, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[15] = -116, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 99, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 109, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 50, method='<com.lifescan.devicesync.h.a: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 72, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 59, method='<com.lifescan.devicesync.h.d: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://hub.samsungapps.com/product/appCheck.as?", "http://www.", "http://"]
[UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean b()>'}, UnitContainer{unit=$r0[0] = "http://www.", method='<c.g.a.a.a.l: void <clinit>()>'}, UnitContainer{unit=$r0[2] = "http://", method='<c.g.a.a.a.l: void <clinit>()>'}]
=======================================
Analyzing APK: com.withings.wiscale2.apk
*** Base package: com.withings.wiscale2
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.internal.c0: void <init>(java.lang.String,java.lang.String,io.grpc.t0$b,io.grpc.internal.c2$d,com.google.common.base.l,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smack.ReconnectionManager: void <init>(org.jivesoftware.smack.AbstractXMPPConnection)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <d.j.b.e.a: java.lang.String b()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smack.util.StringUtils: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.ancs.b: void c(java.lang.String,java.lang.String,java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.SleepScoreTimeToGetUpActivity$e: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.d0.b$a: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.SleepScoreDurationActivity$k: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.SleepScoreRegularityActivity$p: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.SleepScoreRecoveryActivity$f: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzac: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.itextpdf.text.pdf.b: java.lang.String h()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.SleepScoreInterruptionsActivity$k: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.SleepScoreTimeToSleepActivity$d: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smack.util.DNSUtil: java.util.List c(java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.remoteconfig.RemoteConfigComponent: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jsoup.c.b: java.lang.String e()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.sleep.ui.sleepscore.SleepScoreSnoringActivity$i: java.util.Random a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.internal.w1: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.comm.wpp.j.b: com.withings.comm.wpp.generated.b.v4 c(java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzko: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jivesoftware.smackx.filetransfer.FileTransferNegotiator: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void v0(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.i1.h: void <init>(java.net.InetSocketAddress,java.lang.String,java.lang.String,io.grpc.a,java.util.concurrent.Executor,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,io.grpc.i1.r.b,int,int,io.grpc.b0,java.lang.Runnable,int,io.grpc.internal.j2)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.m1.a: void <init>(io.grpc.m0$c)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.ancs.b: void a(java.lang.String,java.lang.String,java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <d.j.e.a.f.e: org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration q(d.j.e.a.f.d)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.wiscale2.ancs.b: void d(com.withings.wiscale2.notification.a,java.util.List)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.withings.user.a: java.lang.String b()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.grpc.internal.e0: void <init>()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of d.j.e.a.f.a
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.jivesoftware.smack.util.TLSUtils$AcceptAllTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.jivesoftware.smack.util.TLSUtils$AcceptAllTrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.jsoup.c.c$d$b
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.jsoup.c.c$d$b
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in org.jivesoftware.smack.util.TLSUtils$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in org.jsoup.c.c$d$a
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<org.jivesoftware.smackx.vcardtemp.packet.VCard: java.lang.String getAvatarHash()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.withings.devicesetup.upgrade.conversation.BluetoothUpgradeConversation: java.lang.String Z(java.nio.ByteBuffer)>'}, UnitContainer{unit=$fakeLocal_15[0] = "MD5", method='<com.itextpdf.text.r: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<d.j.e.b.a: byte[] g(byte[])>'}, UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<com.withings.wiscale2.utils.r: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<m.i: m.i u()>'}, UnitContainer{unit=$fakeLocal_11[0] = "SHA-1", method='<org.jivesoftware.smackx.caps.EntityCapsManager: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.itextpdf.text.pdf.i1: byte[] b()>'}, UnitContainer{unit=$fakeLocal_8[0] = "SHA-1", method='<com.google.firebase.iid.zzt: java.lang.String zza()>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<org.jivesoftware.smack.util.SHA1: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<d.j.b.e.a: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: java.lang.String shaBase64(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA1", method='<com.google.firebase.inappmessaging.internal.injection.modules.GrpcClientModule: java.lang.String signatureDigest(android.content.pm.Signature)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.squareup.okhttp.internal.Util: java.lang.String md5Hex(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.squareup.okhttp.internal.Util: m.i sha1(m.i)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<org.jivesoftware.smack.util.MD5: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<d.j.b.e.a: java.lang.String f(byte[])>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<com.google.android.gms.common.zzl: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zzd,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<d.j.o.p: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<m.i: m.i B()>'}, UnitContainer{unit=$fakeLocal_2[1] = "SHA-1", method='<com.google.firebase.crashlytics.internal.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA-1", method='<d.k.e.b: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA1", method='<com.withings.comm.wpp.j.b: byte[] g(byte[])>'}, UnitContainer{unit=$fakeLocal_4[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzko: java.security.MessageDigest zzi()>'}, UnitContainer{unit=$fakeLocal_2[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}]
=======================================
Analyzing APK: cymedica.com.evive.apk
*** Base package: cymedica.com.evive
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.vending.expansion.downloader.Helpers: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer.chunk.FormatEvaluator$RandomEvaluator: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.exoplayer.chunk.FormatEvaluator$RandomEvaluator: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.common.cache.Striped64: void <clinit>()>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_191[0] = "MD5", method='<com.google.common.hash.Hashing$Md5Holder: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_203[0] = "SHA-1", method='<com.google.common.hash.Hashing$Sha1Holder: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [-29, 0, -47, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 16, 0, 0, 74, 70, 74, 71, 117, 101, -12, 0, 32, -14, 65, -80, 0, 0, 0]
[UnitContainer{unit=$r0[11] = -29, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[6] = -47, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 72, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 16, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 74, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 70, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[1] = 74, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 71, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 117, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 101, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[14] = -12, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 32, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[9] = -14, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 65, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[3] = -80, method='<com.google.android.vending.licensing.AESObfuscator: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[5] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.scottyab.aescrypt.AESCrypt: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [1024]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["changeit"]
[UnitContainer{unit=return "changeit", method='<ch.qos.logback.core.net.ssl.KeyStoreFactoryBean: java.lang.String getPassword()>'}]
=======================================
Analyzing APK: de.avetana.apps.spiro.apk
java.lang.ArrayIndexOutOfBoundsException: 777
	at android.content.res.StringBlock.getShort(StringBlock.java:231)
	at android.content.res.StringBlock.getString(StringBlock.java:91)
	at android.content.res.AXmlResourceParser.getName(AXmlResourceParser.java:140)
	at main.util.manifest.ProcessManifest.loadClassesFromBinaryManifest(ProcessManifest.java:115)
	at main.util.manifest.ProcessManifest$1.handleManifest(ProcessManifest.java:97)
	at main.util.manifest.ProcessManifest.handleAndroidManifestFile(ProcessManifest.java:74)
	at main.util.manifest.ProcessManifest.loadManifestFile(ProcessManifest.java:93)
	at main.util.Utils.getBasePackageNameFromApk(Utils.java:71)
	at main.rule.engine.RuleEngine.main(RuleEngine.java:57)
*** Base package: 
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.iid.zzl: void zzi(android.content.Intent)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.zzb: void zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.zzcfw: long zzazx()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=======================================
=======================================
***Violated Rule 12: Does not manually verify the hostname
***Cause: should have manually verify hostname in <com.sun.mail.util.SocketFetcher: java.net.Socket startTLS(java.net.Socket,java.util.Properties,java.lang.String)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA1"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcfw: long zzah(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_176[0] = "MD5", method='<com.sun.mail.pop3.Protocol: java.lang.String getDigest(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcch: java.lang.String zzji(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_83[0] = "MD5", method='<com.sun.mail.smtp.DigestMD5: byte[] authClient(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.zzcay: long zza(com.google.android.gms.internal.zzcgk)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.FirebaseInstanceId: java.lang.String zza(java.security.KeyPair)>'}]
=======================================
Analyzing APK: dental.beam.beamapp.apk
*** Base package: dental.beam.beamapp
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["AES"]
[UnitContainer{unit=$fakeLocal_<com.beam.app.brushkit.a: java.lang.String e> = "AES", method='<com.beam.app.brushkit.a: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.a.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.ju: long c()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.b.a: void <init>(int,int,long,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.mt: long d()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.g
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA-1", "MD5", "SHA1", "MD5", "SHA1", "SHA-1", "SHA-1", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.v: java.lang.String a(java.lang.String,com.google.android.gms.common.n,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.b.i: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.g: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_445[0] = "MD5", method='<com.google.android.gms.measurement.internal.ju: java.security.MessageDigest e()>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.o: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString d()>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.b.i: java.lang.String b(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.b: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString c()>'}]
=======================================
Analyzing APK: iHealthMyVitals.V2.apk
*** Base package: iHealthMyVitals.V2
=======================================
***Violated Rule 1: Found broken crypto schemes ***Constants: ["DES", "DES/CBC/PKCS5Padding", "DES/CBC/PKCS5Padding", "DES/ECB/NoPadding"]
[UnitContainer{unit=$fakeLocal_-1[0] = "DES", method='<com.tencent.mm.sdk.platformtools.LogHelper: void writeToStream(java.io.PrintStream,byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_19[0] = "DES/CBC/PKCS5Padding", method='<com.tencent.bugly.proguard.ai: byte[] a(byte[])>'}, UnitContainer{unit=$fakeLocal_33[0] = "DES/CBC/PKCS5Padding", method='<com.tencent.bugly.proguard.ai: byte[] b(byte[])>'}, UnitContainer{unit=$fakeLocal_113[0] = "DES/ECB/NoPadding", method='<org.apache.commons.httpclient.auth.NTLM: javax.crypto.Cipher getCipher(byte[])>'}]
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.connect.auth.b: java.lang.String c()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity: byte[] generateMultipartBoundary()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.mm.sdk.platformtools.Util: int getIntRandom(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.weibo.sdk.android.api.BaseAPI: com.tencent.weibo.sdk.android.network.ReqParam refreshToken(android.content.Context)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.a.f.c.d: void c()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.Bg1Control: boolean m()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.weibo.sdk.android.component.sso.AuthHelper: boolean auth(android.content.Context,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.x: okhttp3.ag a(okhttp3.aa,okhttp3.ah)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.ji: void b(com.flurry.sdk.ji)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.greenrobot.greendao.test.DbTest: void <init>(boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.weibo.sdk.android.component.sso.tools.Cryptor: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.test.bp.customview.BPMeasureView: void drawHeart(int,boolean)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.open.b.g: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.Bg1Control: boolean l()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.ins.IdentifyIns: byte[] a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.main.hs.controller.common.HsDataController: java.lang.String generateDataId(java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.d.a.e.c: java.lang.String f()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <d.a.a.a: long a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.base.statistical.okhttp3.OkHttpClient: com.ihealth.communication.base.statistical.okhttp3.WebSocket newWebSocket(com.ihealth.communication.base.statistical.okhttp3.Request,com.ihealth.communication.base.statistical.okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.bugly.proguard.s: byte[] a(java.lang.String,byte[],com.tencent.bugly.proguard.v,java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.weibo.sdk.android.component.Authorize: void onCreate(android.os.Bundle)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.a$17: void a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.ins.IdentifyIns2: byte[] a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.test.po.controller.PoDataController: java.lang.String generateDataId(java.lang.String,int)>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactoryForBPM1$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactoryForBPM1$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.myvitals.customers.EU.ZendeskApiHttpsPost$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.myvitals.customers.EU.ZendeskApiHttpsPost$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.crash.httpsPost$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.crash.httpsPost$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactoryForBPM1$MyX509TrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.myvitals.customers.ZendeskHttpsPost$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.myvitals.customers.ZendeskHttpsPost$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.push.connect.SocketUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.push.connect.SocketUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactory$MyX509TrustManager
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.communication.cloud.a.h$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.communication.cloud.a.h$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.utils.FileUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.utils.FileUtils$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.cloud.tools.eu.EuropeHttpsPost$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.EuropeHttpsPost$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.cloud.tools.eu.SSLCustomSocketFactory$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of org.a.f.b.a$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of org.a.f.b.a$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.communication.utils.OkHttpClientManager$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.communication.utils.OkHttpClientManager$2
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.ihealth.communication.utils.OkHttpClientManager$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "MD5", "SHA", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_29[0] = "MD5", method='<com.ihealth.communication.utils.MD5: byte[] md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_364[0] = "MD5", method='<com.tencent.bugly.crashreport.common.info.AppInfo: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_370[0] = "MD5", method='<org.apache.commons.httpclient.auth.DigestScheme: java.lang.String createDigest(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_695[0] = "MD5", method='<com.tencent.open.utils.i: java.lang.String f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1091[0] = "MD5", method='<com.ihealth.communication.manager.iHealthDevicesUpgradeManager: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_58[1] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.HashingSink: com.ihealth.communication.base.statistical.okio.HashingSink sha1(com.ihealth.communication.base.statistical.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_46[0] = "MD5", method='<com.sina.weibo.sdk.utils.MD5: java.lang.String hexdigest(byte[])>'}, UnitContainer{unit=$fakeLocal_81[0] = "MD5", method='<com.ihealth.communication.base.statistical.litepal.util.cipher.CipherUtil: java.lang.String md5Encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_852[0] = "MD5", method='<com.ihealth.communication.control.UpgradeControl: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_214[0] = "MD5", method='<com.liulishuo.filedownloader.g.f: java.lang.String e(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_624[0] = "SHA-1", method='<com.facebook.Settings: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_364[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_139[0] = "MD5", method='<com.ihealth.communication.base.statistical.okio.ByteString: com.ihealth.communication.base.statistical.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_541[0] = "MD5", method='<com.tencent.weibo.sdk.android.component.sso.tools.MD5Tools: java.lang.String getMD5String(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<a.a.a.a.a.e.d: java.lang.String b(byte[])>'}, UnitContainer{unit=$fakeLocal_368[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_682[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudHS6: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1598[0] = "SHA1", method='<com.ihealth.utils.Method: void checkOfficial(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_55[0] = "MD5", method='<org.a.b.b.f: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_2338[0] = "MD5", method='<com.ihealth.cloud.tools.CommCloudUserV5: java.lang.String MD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_62[0] = "MD5", method='<com.ihealth.communication.utils.AppUtils: java.lang.String getOurPackageName(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1138[0] = "MD5", method='<com.ihealth.main.hs.controller.common.HsDataController: java.lang.String encodeDataId(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_557[0] = "MD5", method='<org.apache.commons.httpclient.auth.DigestScheme: java.lang.String createCnonce()>'}, UnitContainer{unit=$fakeLocal_618[0] = "SHA-1", method='<com.d.a.e.ay: com.d.a.e.au d()>'}, UnitContainer{unit=$fakeLocal_144[0] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.ByteString: com.ihealth.communication.base.statistical.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_481[0] = "MD5", method='<com.d.a.e.ay: byte[] c()>'}, UnitContainer{unit=$fakeLocal_587[0] = "MD5", method='<com.tencent.weibo.sdk.android.component.sso.tools.MD5Tools: java.lang.String getFileMD5(java.io.File)>'}, UnitContainer{unit=$fakeLocal_527[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudSDK: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_354[0] = "SHA1", method='<com.tencent.bugly.crashreport.common.info.AppInfo: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.f.d.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1556[0] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.Buffer: com.ihealth.communication.base.statistical.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<f.f: f.f c()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.tencent.mm.algorithm.MD5: byte[] getRawDigest(byte[])>'}, UnitContainer{unit=$fakeLocal_99[0] = "MD5", method='<com.d.a.t: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.tencent.mm.algorithm.MD5: java.lang.String getMessageDigest(byte[])>'}, UnitContainer{unit=$fakeLocal_263[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudCenter: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<f.f: f.f d()>'}, UnitContainer{unit=$fakeLocal_166[0] = "MD5", method='<com.tencent.open.utils.g: java.lang.String b(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_542[0] = "MD5", method='<com.tencent.open.utils.i: boolean f(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_2798[0] = "MD5", method='<com.ihealth.communication.control.Bg1Control: java.lang.String h(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_441[0] = "SHA-1", method='<com.tencent.bugly.proguard.z: java.lang.String b(byte[])>'}, UnitContainer{unit=$fakeLocal_422[0] = "MD5", method='<com.ihealth.cloud.tools.CommCloudCenter: java.lang.String MD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1578[0] = "SHA1", method='<com.ihealth.utils.Method: void checkOfficial()>'}, UnitContainer{unit=$fakeLocal_36[0] = "MD5", method='<com.ihealth.communication.manager.e: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_53[1] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.HashingSource: com.ihealth.communication.base.statistical.okio.HashingSource sha1(com.ihealth.communication.base.statistical.okio.Source)>'}, UnitContainer{unit=$fakeLocal_53[1] = "MD5", method='<com.ihealth.communication.base.statistical.okio.HashingSink: com.ihealth.communication.base.statistical.okio.HashingSink md5(com.ihealth.communication.base.statistical.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_48[1] = "MD5", method='<com.ihealth.communication.base.statistical.okio.HashingSource: com.ihealth.communication.base.statistical.okio.HashingSource md5(com.ihealth.communication.base.statistical.okio.Source)>'}, UnitContainer{unit=$fakeLocal_510[0] = "SHA", method='<com.ihealth.login_async.ThirdLogin: void facebookLogin()>'}, UnitContainer{unit=$fakeLocal_1551[0] = "MD5", method='<com.ihealth.communication.base.statistical.okio.Buffer: com.ihealth.communication.base.statistical.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_372[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [36, 37, 0, 9223372036854775807L, 71, 0, 0, 64, 33, "device_key", 83, 35, 75]
[UnitContainer{unit=$r4[6] = 36, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[7] = 37, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r5[$i3] = 0, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=specialinvoke $r4.<a.a.a.a.a.a.a.b: void <init>(java.lang.String,java.lang.String,java.lang.String,long)>($r1, $r2, $r3, 9223372036854775807L), method='<a.a.a.a.a.a.a.e: a.a.a.a.a.a.a.b a()>'}, UnitContainer{unit=$r4[1] = 71, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r6[$i2] = 0, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r4[4] = 64, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[3] = 33, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r3 = "device_key", method='<com.ihealth.communication.ins.HS6InsSet: boolean setWifi(java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r4[2] = 83, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[5] = 35, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}, UnitContainer{unit=$r4[0] = 75, method='<org.apache.commons.httpclient.auth.NTLM: byte[] hashPassword(java.lang.String,byte[])>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[UnitContainer{unit=$r0[5] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r0[1] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[8] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: [0]
[UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$i1, <com.ihealth.utils.encode.aes.Crypto: int ITERATION_COUNT>, $i0, <com.ihealth.utils.encode.aes.Crypto: int ITERATION_COUNT>, $i0, <com.ihealth.utils.encode.aes.Crypto: int ITERATION_COUNT>, <com.ihealth.utils.encode.aes.Crypto: int ITERATION_COUNT>, 4096, 1000, $i0, 10000]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["U", "J", "C", "c", "https://api.ihealthlabs.eu/authenticationids/restisloggedservice.php", "W", "f", "24", "1", "W", "m", "m", "ckpwwWMb", "https://apitest.ihealthlabs.eu/authenticationids/restisloggedservice.php", "passphrase", "p", "f", "12", "https://apitest.ihealthlabs.eu/authenticationids/restloginservice.php", "J", "0", "p", "https://api.ihealthlabs.eu/authenticationids/restloginservice.php", "C", "cnquTGXv", "E", "E", "U", "c"]
[UnitContainer{unit=$r6 = "U", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r6 = "J", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r4 = "C", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r4 = "c", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r3 = "https://api.ihealthlabs.eu/authenticationids/restisloggedservice.php", method='<com.ihealth.cloud.tools.eu.MethodGetOTPand03Cert: void checkUserStatus(java.lang.String)>'}, UnitContainer{unit=$r6 = "W", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r6 = "f", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r6 = "24", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r6 = "1", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r4 = "W", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r4 = "m", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r6 = "m", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r1 = "ckpwwWMb", method='<com.ihealth.cloud.tools.eu.SSLCustomSocketFactory: javax.net.ssl.SSLSocketFactory getOTPSocketFactory(android.content.Context)>'}, UnitContainer{unit=$r3 = "https://apitest.ihealthlabs.eu/authenticationids/restisloggedservice.php", method='<com.ihealth.cloud.tools.eu.MethodGetOTPand03Cert: void checkUserStatus(java.lang.String)>'}, UnitContainer{unit=$r5 = "passphrase", method='<com.tencent.open.utils.HttpUtils$b: void <init>()>'}, UnitContainer{unit=$r6 = "p", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r4 = "f", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r6 = "12", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r3 = "https://apitest.ihealthlabs.eu/authenticationids/restloginservice.php", method='<com.ihealth.cloud.tools.eu.MethodGetOTPand03Cert: int makeUserOnline(java.lang.String)>'}, UnitContainer{unit=$r4 = "J", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r6 = "0", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r4 = "p", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r3 = "https://api.ihealthlabs.eu/authenticationids/restloginservice.php", method='<com.ihealth.cloud.tools.eu.MethodGetOTPand03Cert: int makeUserOnline(java.lang.String)>'}, UnitContainer{unit=$r6 = "C", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r2 = "cnquTGXv", method='<com.ihealth.cloud.tools.eu.SSLCustomSocketFactory: javax.net.ssl.SSLSocketFactory getOTPSocketFactory(android.content.Context)>'}, UnitContainer{unit=$r6 = "E", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}, UnitContainer{unit=$r4 = "E", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r4 = "U", method='<com.ihealth.mydevice.bp.controller.DeviceDetailsBPM1Controller$BPM1SetConfig: java.lang.Integer doInBackground(java.lang.Void[])>'}, UnitContainer{unit=$r6 = "c", method='<com.ihealth.device.guide.bp.controller.BPM1SetUserController$BindDeviceWithUser: java.lang.Integer doInBackground(java.lang.Integer[])>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://qzs.qq.com/open/mobile/invite/sdk_invite.html?", "http://test.ihealthlabs.com:8000/applog/availabilitystatisticsinfoupload.htm", "http://", "http://qzs.qq.com/open/mobile/request/sdk_request.html?", "http://", "http://test.ihealthlabs.com:8000/applog/appdailylogupload.htm", "http://qzs.qq.com/open/mobile/sendstory/sdk_sendstory_v1.3.html?", "http://qzs.qq.com", "http://www.andykhan.com/jexcelapi/index.html", "http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", "http://", "http://openmobile.qq.com/oauth2.0/m_authorize?", "http://hub.samsungapps.com/product/appCheck.as?", "http://www.andykhan.com/jexcelapi/index.html"]
[UnitContainer{unit=$fakeLocal_127[1] = "http://qzs.qq.com/open/mobile/invite/sdk_invite.html?", method='<com.tencent.open.SocialApiIml: void invite(android.app.Activity,android.os.Bundle,com.tencent.tauth.IUiListener)>'}, UnitContainer{unit=$fakeLocal_83[0] = "http://test.ihealthlabs.com:8000/applog/availabilitystatisticsinfoupload.htm", method='<com.ihealth.crash.CommCloudLogcatV5: boolean usabilityUpload(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("auth://", "http://"), method='<com.tencent.open.utils.i: org.json.JSONObject c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_101[1] = "http://qzs.qq.com/open/mobile/request/sdk_request.html?", method='<com.tencent.open.SocialApiIml: void a(android.app.Activity,java.lang.String,android.os.Bundle,com.tencent.tauth.IUiListener)>'}, UnitContainer{unit=$r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("auth://", "http://"), method='<com.tencent.open.utils.i: android.os.Bundle b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_142[0] = "http://test.ihealthlabs.com:8000/applog/appdailylogupload.htm", method='<com.ihealth.crash.CommCloudLogcatV5: boolean logUpload(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_147[1] = "http://qzs.qq.com/open/mobile/sendstory/sdk_sendstory_v1.3.html?", method='<com.tencent.open.SocialApiIml: void story(android.app.Activity,android.os.Bundle,com.tencent.tauth.IUiListener)>'}, UnitContainer{unit=$fakeLocal_345[1] = "http://qzs.qq.com", method='<com.tencent.open.SocialApiIml: void writeEncryToken(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_232[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<e.c.a.af: void <init>(e.c.a.bd,e.t,e.x)>'}, UnitContainer{unit=$r2 = "http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", method='<com.ihealth.communication.cloud.a.c: com.ihealth.communication.cloud.a.c$a a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://"), method='<com.flurry.sdk.ly: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_270[1] = "http://openmobile.qq.com/oauth2.0/m_authorize?", method='<com.tencent.connect.auth.AuthAgent: int a(boolean,com.tencent.tauth.IUiListener)>'}, UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}, UnitContainer{unit=$fakeLocal_211[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<e.c.a.af: void <init>(e.c.a.bd,e.t,e.x)>'}]
=======================================
Analyzing APK: io.healthy.dip.e2e.apk
*** Base package: io.healthy.dip.e2e
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <bm0: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <om: void <init>(nr0,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <em0: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <qn0: void a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <cu0: void <init>(java.util.HashMap,java.lang.String,java.lang.String,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <qn0: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <dm0: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <em0: java.lang.String d()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <s71: void <init>(int,int,long,java.lang.String)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "MD5", "SHA-1", "SHA-1", "SHA1", "SHA-1"]
[UnitContainer{unit=$fakeLocal_23[0] = "SHA-1", method='<mq0: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_56[0] = "SHA1", method='<bm0: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_19[0] = "MD5", method='<em0: byte[] a(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_26[1] = "SHA-1", method='<dn: void <init>(vq0)>'}, UnitContainer{unit=$fakeLocal_40[1] = "SHA-1", method='<mq0: java.lang.String a(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<pb1: pb1 w()>'}]
=======================================
Analyzing APK: jiuan.androidBg.start.apk
*** Base package: jiuan.androidBg.start
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.igluco.utils.i: int h()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.tencent.bugly.proguard.s: byte[] a(java.lang.String,byte[],com.tencent.bugly.proguard.v,java.util.Map)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.e.g: boolean p()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.igluco.service.notification.NotificationService: void b(com.ihealth.igluco.db.ReminderDataClass)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.ey: long y()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.flurry.sdk.hb: java.lang.String r()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.a.a.a: boolean a(com.google.android.gms.a.a.a$a,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.itextpdf.text.pdf.BaseFont: java.lang.String createSubsetPrefix()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.ins.be: byte[] a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.igluco.utils.i: int i()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.e.g: boolean o()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.c.b$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.c.b$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.customers.EU.g$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.customers.EU.g$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.communication.cloud.a.p
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.communication.cloud.a.p
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.newapi.NetManager$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.newapi.NetManager$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.c.d$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.c.d$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.igluco.net.tools.d$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.igluco.net.tools.d$2
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "SHA1", "MD5", "MD5", "MD5", "SHA1", "SHA-1", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA1", "MD5", "SHA-1", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.bg: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.tencent.bugly.crashreport.common.info.AppInfo: java.lang.String a(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.itextpdf.text.ImgJBIG2: void <init>(int,int,byte[],byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: byte[] createDocumentId()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.e.aj: java.lang.String b(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.google.firebase.iid.v: java.lang.String a(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfPKCS7: boolean verifyTimestampImprint()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.igluco.net.tools.b: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.igluco.net.newapi.NetManager: java.lang.String MD5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.itextpdf.text.pdf.PdfSmartCopy$ByteStore: void <init>(com.itextpdf.text.pdf.PRStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.e.g: java.lang.String i(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.flurry.sdk.jn: byte[] f(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.cloud.a: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA1", method='<com.ihealth.igluco.utils.i: void l()>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.itextpdf.text.pdf.PdfEncryption: void <init>()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.itextpdf.text.pdf.PdfPKCS7: byte[] getEncodedPKCS7(byte[],java.util.Calendar,com.itextpdf.text.pdf.TSAClient,byte[])>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.ey: long b(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.f.x: java.lang.String o(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.utils.l: byte[] a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.google.android.gms.internal.z: long a(com.google.android.gms.internal.fm)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}]
=======================================
=======================================
***Violated Rule 14: Used Predictable KeyStore Password ***Constants: ["ckpwwWMb", "mg", "u"]
[UnitContainer{unit=$r4 = "ckpwwWMb", method='<com.ihealth.igluco.net.c.d: javax.net.ssl.SSLSocketFactory a()>'}, UnitContainer{unit=$r7 = "mg", method='<com.ihealth.igluco.net.b: int a(java.lang.String,java.lang.String,java.util.ArrayList)>'}, UnitContainer{unit=$r7 = "u", method='<com.ihealth.igluco.net.b: int a(java.lang.String,java.lang.String,java.util.ArrayList)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", "http://www.andykhan.com/jexcelapi/index.html", "http://test.ihealthlabs.com:8000/apicenter/ServiceHostListByCountry_get.htm", "http://test.ihealthlabs.com:8000/apicenter/ServiceHostListByCountry_get.htm", "http://testnop.ihealthlabs.com/cate.htm", "http://test.ihealthlabs.com:8000/applog/appdailylogupload.htm", "http://hub.samsungapps.com/product/appCheck.as?"]
[UnitContainer{unit=$r1 = "http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", method='<com.ihealth.communication.cloud.a.g: com.ihealth.communication.cloud.a.h a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://www.andykhan.com/jexcelapi/index.html", method='<e.c.a.af: void <init>(e.c.a.bd,e.t,e.x)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://test.ihealthlabs.com:8000/apicenter/ServiceHostListByCountry_get.htm", method='<com.ihealth.igluco.net.d: int a()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://test.ihealthlabs.com:8000/apicenter/ServiceHostListByCountry_get.htm", method='<com.ihealth.igluco.net.d: int a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "http://testnop.ihealthlabs.com/cate.htm", method='<com.ihealth.igluco.ui.settings.shop.ShopActivity: java.lang.String b()>'}, UnitContainer{unit=$r0.<com.ihealth.igluco.net.e: java.lang.String e> = "http://test.ihealthlabs.com:8000/applog/appdailylogupload.htm", method='<com.ihealth.igluco.net.e: boolean a(java.lang.String,java.lang.String)>'}, UnitContainer{unit=virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http://hub.samsungapps.com/product/appCheck.as?"), method='<com.samsung.android.sdk.healthdata.HealthDataStore: boolean c()>'}]
=======================================
Analyzing APK: md.reset.reSET.apk
*** Base package: md.reset.reSET
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotification: void <init>(com.facebook.react.bridge.ReactApplicationContext)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNReceivedMessageHandler: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5", "sha1", "SHA-1", "SHA-1", "md5", "MD5", "SHA-1", "SHA1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_45[0] = "SHA1", method='<com.google.firebase.iid.Metadata: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_221[0] = "MD5", method='<com.tonyodev.fetch2core.FetchCoreUtils: java.lang.String getFileMd5String(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA-1", method='<com.google.firebase.iid.GmsRpc: java.lang.String getHashedFirebaseAppName()>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_202[0] = "MD5", method='<com.tonyodev.fetch2core.FetchCoreUtils: java.lang.String getMd5String(byte[],int,int)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: md.reset.reSETO.apk
*** Base package: md.reset.reSETO
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.microsoft.appcenter.http.HttpClientRetryer: void <init>(com.microsoft.appcenter.http.HttpClient,android.os.Handler)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNPushNotification: void <init>(com.facebook.react.bridge.ReactApplicationContext)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.dieam.reactnativepushnotification.modules.RNReceivedMessageHandler: void handleRemotePushNotification(com.facebook.react.bridge.ReactApplicationContext,android.os.Bundle)>
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA1", "MD5", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "SHA1", "MD5", "MD5", "sha1", "SHA-1", "SHA-1", "md5", "MD5", "SHA-1", "SHA1", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_39[0] = "SHA1", method='<com.google.android.gms.iid.InstanceID: java.lang.String zzd(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_45[0] = "SHA1", method='<com.google.firebase.iid.Metadata: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_31[1] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_391[0] = "MD5", method='<com.facebook.soloader.SoLoader$1: java.lang.String getLibHash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_221[0] = "MD5", method='<com.tonyodev.fetch2core.FetchCoreUtils: java.lang.String getFileMd5String(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA-1", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeSHA1HashBase64(byte[])>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_62[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(java.io.InputStream)>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sha1", "SHA-1"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_42[0] = "SHA-1", method='<com.google.firebase.iid.GmsRpc: java.lang.String getHashedFirebaseAppName()>'}, UnitContainer{unit=interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("md5", "MD5"), method='<com.rnfs.RNFSManager: void hash(java.lang.String,java.lang.String,com.facebook.react.bridge.Promise)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_58[1] = "MD5", method='<com.facebook.common.util.SecureHashUtil: java.lang.String makeMD5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_202[0] = "MD5", method='<com.tonyodev.fetch2core.FetchCoreUtils: java.lang.String getMd5String(byte[],int,int)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://%s/onchange", "http://%s/%s", "http://%s/status", "http://%s/open-stack-frame", "http://%s/launch-js-devtools", "http://%s/symbolicate"]
[UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/onchange", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOnChangeEndpointUrl()>'}, UnitContainer{unit=$r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/%s", $r3), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createResourceURL(java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/status", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createPackagerStatusURL(java.lang.String)>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/open-stack-frame", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createOpenStackFrameURL(java.lang.String)>'}, UnitContainer{unit=$r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r1, "http://%s/launch-js-devtools", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createLaunchJSDevtoolsCommandUrl()>'}, UnitContainer{unit=$r1 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r0, "http://%s/symbolicate", $r2), method='<com.facebook.react.devsupport.DevServerHelper: java.lang.String createSymbolicateURL(java.lang.String)>'}]
=======================================
Analyzing APK: me.clarius.clarius.apk
*** Base package: me.clarius.clarius
Analyzing APK: microlife.a6p2.bluetooth.app.apk
*** Base package: microlife.a6p2.bluetooth.app
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <c.a.a.a.c.e.rd: long c()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.c.t: void <init>(d.a.a.a.n.c.n.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.ia: long t()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of d.a.a.a.n.e.h
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA1", "SHA-1", "MD5", "SHA-1"]
[UnitContainer{unit=$fakeLocal_18[1] = "SHA-1", method='<d.a.a.a.n.b.i: java.lang.String a(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_33[0] = "SHA1", method='<com.google.firebase.iid.k: java.lang.String a(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<d.a.a.a.n.e.h: boolean a(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_1[1] = "SHA-1", method='<d.a.a.a.n.b.i: java.lang.String c(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<com.google.android.gms.measurement.internal.ia: java.security.MessageDigest y()>'}, UnitContainer{unit=$fakeLocal_5[0] = "SHA-1", method='<com.google.android.gms.common.b0: java.lang.String a(java.lang.String,com.google.android.gms.common.t,boolean,boolean)>'}]
=======================================
Analyzing APK: nl.focuscura.beeldbelapp.apk
*** Base package: nl.focuscura.beeldbelapp
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <g0.c.a.a.a.m.o.f.g: void b()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.j.c.p.b.q: b.j.c.p.b.q b()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <x.a.q1.a: void <init>(int,int,long,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.j.a.f.b.g: void <init>(b.j.a.f.j.j.m,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.e.a.m.v.h.g: void a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.j.c.p.b.s: void <init>(android.content.Context)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.Bg1Control: boolean m()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.nexus.NexusSocket: long calculateReconnectTimerInSeconds(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.android.sdk.api.HeaderInterceptor: io.intercom.android.sdk.api.HeaderInterceptor create(android.content.Context,io.intercom.android.sdk.identity.AppIdentity)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.Bg1Control: boolean l()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.ins.IdentifyIns: byte[] a()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.j.a.f.l.a.p9: long t0()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.base.statistical.okhttp3.OkHttpClient: com.ihealth.communication.base.statistical.okhttp3.WebSocket newWebSocket(com.ihealth.communication.base.statistical.okhttp3.Request,com.ihealth.communication.base.statistical.okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.j.c.r.m: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(g0.b.a.a.o.c.m.a,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.j.c.e.b: long e()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <b.j.a.f.j.b.a: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.amazonaws.retry.PredefinedRetryPolicies$SDKDefaultBackoffStrategy: void <init>(int,int,com.amazonaws.retry.PredefinedRetryPolicies$1)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <io.intercom.okhttp3.OkHttpClient: io.intercom.okhttp3.WebSocket newWebSocket(io.intercom.okhttp3.Request,io.intercom.okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.ihealth.communication.control.a$17: void a()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of g0.b.a.a.o.e.d
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.communication.utils.OkHttpClientManager$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.communication.utils.OkHttpClientManager$2
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of com.ihealth.communication.cloud.a.h$1
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should throw java.security.cert.CertificateException in check(Client|Server)Trusted method of com.ihealth.communication.cloud.a.h$1
=======================================
=======================================
***Violated Rule 6: Uses untrusted HostNameVerifier
***Cause: Fixed [1] used in com.ihealth.communication.utils.OkHttpClientManager$1
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA-1", "MD5", "SHA1", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "MD5", "SHA-1", "SHA-1", "MD5", "SHA-1", "SHA1", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5", "MD5"]
[UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.base.statistical.okio.ByteString: com.ihealth.communication.base.statistical.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudHS6: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.base.statistical.litepal.util.cipher.CipherUtil: java.lang.String md5Encrypt(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.base.statistical.okio.Buffer: com.ihealth.communication.base.statistical.okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.ByteString: com.ihealth.communication.base.statistical.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<g0.b.a.a.o.b.i: java.lang.String z(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: void <init>(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.Buffer: com.ihealth.communication.base.statistical.okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_6[1] = "SHA-1", method='<com.crashlytics.android.core.CLSUUID: void <init>(g0.b.a.a.o.b.s)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudCenter: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_4[0] = "SHA1", method='<b.j.a.f.f.r.a: byte[] a(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.HashingSource: com.ihealth.communication.base.statistical.okio.HashingSource sha1(com.ihealth.communication.base.statistical.okio.Source)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.cloud.CommCloudSDK: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_10[0] = "SHA1", method='<b.j.c.m.p.b: java.lang.String a()>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<b.j.a.f.l.a.p9: java.security.MessageDigest x0()>'}, UnitContainer{unit=$fakeLocal_2[0] = "MD5", method='<io.intercom.okhttp3.Cache: java.lang.String key(io.intercom.okhttp3.HttpUrl)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.manager.iHealthDevicesUpgradeManager: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.control.UpgradeControl: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_3[0] = "SHA-1", method='<b.j.a.f.f.x: java.lang.Object call()>'}, UnitContainer{unit=$fakeLocal_1[0] = "SHA-1", method='<g0.c.b.g: g0.c.b.g C()>'}, UnitContainer{unit=$fakeLocal_4[0] = "MD5", method='<com.amazonaws.services.s3.internal.MD5DigestCalculatingInputStream: void reset()>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.manager.d: java.lang.String a(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "SHA-1", method='<com.ihealth.communication.base.statistical.okio.HashingSink: com.ihealth.communication.base.statistical.okio.HashingSink sha1(com.ihealth.communication.base.statistical.okio.Sink)>'}, UnitContainer{unit=$fakeLocal_22[0] = "SHA-1", method='<b.j.c.k.c1: android.os.Bundle b(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>'}, UnitContainer{unit=$fakeLocal_59[0] = "MD5", method='<com.amazonaws.services.s3.AmazonS3Client: com.amazonaws.services.s3.model.S3Object getObject(com.amazonaws.services.s3.model.GetObjectRequest)>'}, UnitContainer{unit=$fakeLocal_11[1] = "SHA-1", method='<g0.b.a.a.o.b.i: java.lang.String e(java.lang.String[])>'}, UnitContainer{unit=$fakeLocal_27[0] = "SHA1", method='<g0.b.a.a.o.e.d: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.utils.MD5: byte[] md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<com.ihealth.communication.base.statistical.okio.HashingSource: com.ihealth.communication.base.statistical.okio.HashingSource md5(com.ihealth.communication.base.statistical.okio.Source)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.control.Bg1Control: java.lang.String h(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_-1[0] = "MD5", method='<com.ihealth.communication.utils.AppUtils: java.lang.String getOurPackageName(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_1[0] = "MD5", method='<b.j.a.f.j.j.d: java.lang.String i0(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_3[0] = "MD5", method='<com.amazonaws.util.Md5Utils: java.lang.String md5AsBase64(java.io.File)>'}, UnitContainer{unit=$fakeLocal_-1[1] = "MD5", method='<com.ihealth.communication.base.statistical.okio.HashingSink: com.ihealth.communication.base.statistical.okio.HashingSink md5(com.ihealth.communication.base.statistical.okio.Sink)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: [3, class "Landroid/os/Build;", 2, 0, 1]
[UnitContainer{unit=$b6 = 3, method='<com.amazonaws.util.Base64: byte[] decode(java.lang.String)>'}, UnitContainer{unit=$r4 = class "Landroid/os/Build;", method='<b.k.a: java.lang.String c(android.content.Context)>'}, UnitContainer{unit=$b6 = 2, method='<com.amazonaws.util.Base64: byte[] decode(java.lang.String)>'}, UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$b6 = 1, method='<com.amazonaws.util.Base64: byte[] decode(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 10: Found constant IV in code ***Constants: [0, 0, "accessKey", 3, "sessionToken", 0, 0, 0, "com.amazonaws.android.auth", 0, 0, 0, "secretKey", 0, "identityId", 0, 0, 0, 0, 0, 1, "expirationDate", 0, 2, 0, 0]
[UnitContainer{unit=$r0[5] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[11] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_<com.amazonaws.auth.CognitoCachingCredentialsProvider: java.lang.String AK_KEY> = "accessKey", method='<com.amazonaws.auth.CognitoCachingCredentialsProvider: void <clinit>()>'}, UnitContainer{unit=$b6 = 3, method='<com.amazonaws.util.Base64: byte[] decode(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_<com.amazonaws.auth.CognitoCachingCredentialsProvider: java.lang.String ST_KEY> = "sessionToken", method='<com.amazonaws.auth.CognitoCachingCredentialsProvider: void <clinit>()>'}, UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r0[1] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[15] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_<com.amazonaws.auth.CognitoCachingCredentialsProvider: java.lang.String AWS_KEY_VALUE_STORE_NAMESPACE_IDENTIFIER> = "com.amazonaws.android.auth", method='<com.amazonaws.auth.CognitoCachingCredentialsProvider: void <clinit>()>'}, UnitContainer{unit=$r0[6] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[10] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[9] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_<com.amazonaws.auth.CognitoCachingCredentialsProvider: java.lang.String SK_KEY> = "secretKey", method='<com.amazonaws.auth.CognitoCachingCredentialsProvider: void <clinit>()>'}, UnitContainer{unit=$r0[14] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$fakeLocal_<com.amazonaws.auth.CognitoCachingCredentialsProvider: java.lang.String ID_KEY> = "identityId", method='<com.amazonaws.auth.CognitoCachingCredentialsProvider: void <clinit>()>'}, UnitContainer{unit=$r0[2] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[0] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[7] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[13] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[3] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$b6 = 1, method='<com.amazonaws.util.Base64: byte[] decode(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_<com.amazonaws.auth.CognitoCachingCredentialsProvider: java.lang.String EXP_KEY> = "expirationDate", method='<com.amazonaws.auth.CognitoCachingCredentialsProvider: void <clinit>()>'}, UnitContainer{unit=$r0[12] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$b6 = 2, method='<com.amazonaws.util.Base64: byte[] decode(java.lang.String)>'}, UnitContainer{unit=$r0[8] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}, UnitContainer{unit=$r0[4] = 0, method='<com.ihealth.communication.base.statistical.litepal.util.cipher.AESCrypt: void <clinit>()>'}]
=======================================
=======================================
***Violated Rule 9: Found constant salts in code ***Constants: [class "Landroid/os/Build;", 0]
[UnitContainer{unit=$r4 = class "Landroid/os/Build;", method='<b.k.a: java.lang.String c(android.content.Context)>'}, UnitContainer{unit=$r4[$i0] = 0, method='<com.ihealth.communication.ins.HS6InsSet: byte[] a(byte[],java.lang.String,java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [@parameter2: int, 4096, $i0, 10000, 10000]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", "http://www.google-analytics.com"]
[UnitContainer{unit=$r2 = "http://test.ihealthlabs.com:8000/upgrade/checkverson2013.htm?", method='<com.ihealth.communication.cloud.a.c: com.ihealth.communication.cloud.a.c$a a(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>'}, UnitContainer{unit=$r0 = staticinvoke <b.j.a.f.j.j.v0: b.j.a.f.j.j.v0 c(java.lang.String,java.lang.String,java.lang.String)>("analytics.insecure_host", "http://www.google-analytics.com", "http://www.google-analytics.com"), method='<b.j.a.f.j.j.u0: void <clinit>()>'}]
=======================================
Analyzing APK: smartbag.a11health.com.smartbag_android.apk
*** Base package: smartbag.a11health.com.smartbag_android
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,pl.edu.icm.jlargearrays.FloatLargeArray)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.Benchmark: double[][] benchmarkJavaArraysDoubleRandom(long[],int[],int,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,double[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.util.FastMath: double random()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_1D(long,double[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>(org.apache.commons.math3.random.RandomGenerator)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,pl.edu.icm.jlargearrays.FloatLargeArray)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_1D(long,float[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_1D(long,pl.edu.icm.jlargearrays.FloatLargeArray)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,double[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzkr: long zzg()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.Benchmark: double[][] benchmarkJLargeArraysDoubleRandom(long[],int[],int,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,double[][])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.internal.measurement.zzag: long zze()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.Benchmark: double[][] benchmarkJavaArraysByteRandom(long[],int[],int,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,float[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,float[][][])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.bumptech.glide.load.resource.gif.GifFrameLoader: com.bumptech.glide.load.Key getFrameSignature()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.RandomAdaptor: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,float[][])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,pl.edu.icm.jlargearrays.DoubleLargeArray)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_3D(long,long,long,double[][][])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_1D(long,pl.edu.icm.jlargearrays.DoubleLargeArray)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,pl.edu.icm.jlargearrays.DoubleLargeArray)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.LargeArrayUtils: pl.edu.icm.jlargearrays.LargeArray generateRandom(pl.edu.icm.jlargearrays.LargeArrayType,long)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <pl.edu.icm.jlargearrays.Benchmark: double[][] benchmarkJLargeArraysByteRandom(long[],int[],int,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jtransforms.utils.IOUtils: void fillMatrix_2D(long,long,float[])>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA1", "SHA-1", "SHA-1", "SHA1", "MD5"]
[UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_39[0] = "SHA-1", method='<com.google.firebase.iid.zzt: java.lang.String zza()>'}, UnitContainer{unit=$fakeLocal_284[0] = "SHA-1", method='<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>'}, UnitContainer{unit=$fakeLocal_179[0] = "SHA1", method='<com.google.firebase.installations.local.IidStore: java.lang.String getIdFromPublicKey(java.security.PublicKey)>'}, UnitContainer{unit=$fakeLocal_593[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzkr: java.security.MessageDigest zzi()>'}]
=======================================
Analyzing APK: today.onedrop.android.apk
*** Base package: today.onedrop.android
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.ParsePushBroadcastReceiver: androidx.core.app.NotificationCompat$Builder getNotification(android.content.Context,android.content.Intent)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <androidx.transition.Explode: void calculateOut(android.view.View,android.graphics.Rect,int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.answers.RandomBackoff: void <init>(io.fabric.sdk.android.services.concurrency.internal.Backoff,double)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.ParseRequest: bolts.Task executeAsync(com.parse.ParseHttpClient,com.parse.http.ParseHttpRequest,com.parse.ProgressCallback,bolts.Task)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <okhttp3.OkHttpClient: okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.raw.Mod: int[] random(int[])>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_10: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.asn1.ua.DSTU4145PointEncoder: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECCurve,org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlin.random.KotlinRandom: void <init>(kotlin.random.Random)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nONBField: int elementOfOrder(int,int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.measurement.internal.zzfy: long zzmj()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.facebook.internal.Utility: java.lang.String generateRandomString(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.crashlytics.android.core.CrashTest: int stackOverflow()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.jsoup.helper.DataUtil: java.lang.String mimeBoundary()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2nPolynomialElement: org.spongycastle.pqc.math.linearalgebra.GF2nElement solveQuadraticEquation()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_75: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.MixpanelFCMMessagingService: void showPushNotification(android.content.Context,android.content.Intent,com.mixpanel.android.mpmetrics.MixpanelPushNotification)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: java.lang.String generateKey()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <kotlinx.coroutines.scheduling.CoroutineScheduler: void <init>(int,int,long,java.lang.String)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <today.onedrop.android.common.GenericObject: java.lang.String randomStringWithLength(int)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <today.onedrop.android.log.food.search.FatSecretRestClient: java.lang.String nonce()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECCurve$AbstractF2m: org.spongycastle.math.ec.ECFieldElement solveQuadraticEquation(org.spongycastle.math.ec.ECFieldElement)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.parse.LocalIdManager: void <init>(java.io.File)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.java_websocket.drafts.Draft_76: void <init>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.android.gms.ads.identifier.AdvertisingIdClient: boolean zza(com.google.android.gms.ads.identifier.AdvertisingIdClient$Info,boolean,float,long,java.lang.String,java.lang.Throwable)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.google.firebase.perf.internal.zzt: boolean zza(boolean,float)>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.pqc.math.linearalgebra.GF2Polynomial: void <clinit>()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <org.spongycastle.math.ec.ECFieldElement$Fp: org.spongycastle.math.ec.ECFieldElement sqrt()>
=======================================
=======================================
***Violated Rule 13: Untrused PRNG (java.util.Random) Found in <com.mixpanel.android.mpmetrics.SessionMetadata: void initSession()>
=======================================
=======================================
***Violated Rule 4: Uses untrusted TrustManager ***Should at least get One accepted Issuer from Other Sources in getAcceptedIssuers method of io.fabric.sdk.android.services.network.PinningTrustManager
=======================================
=======================================
***Violated Rule 2: Found broken hash functions ***Constants: ["MD5", "MD5", "MD5", "SHA-1", "SHA-1", "SHA-1", "MD5", "MD5", "MD5", "SHA-1", "SHA1", "SHA1", "SHA-1", "MD5", "SHA1", "SHA-1", "SHA-1", "SHA-1", "SHA1", "SHA1", "SHA-1", "SHA1", "MD5", "MD5", "SHA-1", "SHA1", "SHA-1", "MD5", "SHA1", "MD5", "MD5", "SHA-1", "MD5"]
[UnitContainer{unit=$fakeLocal_50[1] = "MD5", method='<okio.HashingSink: okio.HashingSink md5(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_30[0] = "MD5", method='<org.spongycastle.openpgp.operator.jcajce.JcaKeyFingerprintCalculator: byte[] calculateFingerprint(org.spongycastle.bcpg.PublicKeyPacket)>'}, UnitContainer{unit=$fakeLocal_60[0] = "MD5", method='<com.mixpanel.android.java_websocket.drafts.Draft_76: byte[] createChallenge(java.lang.String,java.lang.String,byte[])>'}, UnitContainer{unit=$fakeLocal_1689[0] = "SHA-1", method='<okio.Buffer: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA-1", method='<com.google.android.gms.common.zzm: java.lang.String zzc(java.lang.String,com.google.android.gms.common.zze,boolean,boolean)>'}, UnitContainer{unit=$fakeLocal_276[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_54[0] = "MD5", method='<today.onedrop.android.network.CryptoUtils: byte[] md5Hash(byte[])>'}, UnitContainer{unit=$fakeLocal_1684[0] = "MD5", method='<okio.Buffer: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_281[0] = "MD5", method='<com.facebook.appevents.AppEvent: java.lang.String md5Checksum(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_55[1] = "SHA-1", method='<okio.HashingSink: okio.HashingSink sha1(okio.Sink)>'}, UnitContainer{unit=$fakeLocal_55[0] = "SHA1", method='<org.spongycastle.openpgp.operator.jcajce.JcaKeyFingerprintCalculator: byte[] calculateFingerprint(org.spongycastle.bcpg.PublicKeyPacket)>'}, UnitContainer{unit=$fakeLocal_116[0] = "SHA1", method='<io.fabric.sdk.android.services.network.PinningTrustManager: boolean isValidPin(java.security.cert.X509Certificate)>'}, UnitContainer{unit=$fakeLocal_284[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.io.InputStream)>'}, UnitContainer{unit=$fakeLocal_440[0] = "MD5", method='<com.google.android.gms.measurement.internal.zzfy: java.security.MessageDigest getMessageDigest()>'}, UnitContainer{unit=$fakeLocal_40[0] = "SHA1", method='<org.spongycastle.cert.jcajce.JcaX509ExtensionUtils: void <init>()>'}, UnitContainer{unit=$fakeLocal_767[0] = "SHA-1", method='<com.facebook.FacebookSdk: java.lang.String getApplicationSignature(android.content.Context)>'}, UnitContainer{unit=$fakeLocal_110[0] = "SHA-1", method='<com.google.firebase.perf.internal.RemoteConfigManager: java.lang.String zzh(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_52[1] = "SHA-1", method='<okio.HashingSource: okio.HashingSource sha1(okio.Source)>'}, UnitContainer{unit=$fakeLocal_46[0] = "SHA1", method='<com.mixpanel.android.util.ImageStore: void <init>(android.content.Context,java.lang.String,com.mixpanel.android.util.RemoteService)>'}, UnitContainer{unit=$fakeLocal_44[0] = "SHA1", method='<com.google.firebase.iid.zzan: java.lang.String zza(java.security.KeyPair)>'}, UnitContainer{unit=$fakeLocal_276[1] = "SHA-1", method='<io.fabric.sdk.android.services.common.CommonUtils: java.lang.String sha1(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_183[0] = "SHA1", method='<com.mixpanel.android.java_websocket.drafts.Draft_10: java.lang.String generateFinalKey(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_272[0] = "MD5", method='<com.facebook.internal.Utility: java.lang.String md5hash(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_47[1] = "MD5", method='<okio.HashingSource: okio.HashingSource md5(okio.Source)>'}, UnitContainer{unit=$fakeLocal_56[0] = "SHA-1", method='<com.google.firebase.perf.internal.zzv: long zzg(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_20[0] = "SHA1", method='<org.spongycastle.openpgp.operator.jcajce.SHA1PGPDigestCalculator: void <init>()>'}, UnitContainer{unit=$fakeLocal_141[0] = "SHA-1", method='<okio.ByteString: okio.ByteString sha1()>'}, UnitContainer{unit=$fakeLocal_155[0] = "MD5", method='<com.pubnub.api.vendor.Crypto: byte[] md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_6[0] = "SHA1", method='<com.google.android.gms.common.util.AndroidUtilsLight: byte[] getPackageCertificateHashBytes(android.content.Context,java.lang.String)>'}, UnitContainer{unit=$fakeLocal_136[0] = "MD5", method='<okio.ByteString: okio.ByteString md5()>'}, UnitContainer{unit=$fakeLocal_28[0] = "MD5", method='<com.parse.ParseDigestUtils: java.lang.String md5(java.lang.String)>'}, UnitContainer{unit=$fakeLocal_280[0] = "SHA-1", method='<com.facebook.internal.Utility: java.lang.String sha1hash(byte[])>'}, UnitContainer{unit=$fakeLocal_380[0] = "MD5", method='<io.branch.indexing.ContentDiscoverer$HashHelper: void <init>(io.branch.indexing.ContentDiscoverer)>'}]
=======================================
=======================================
***Violated Rule 3: Used constant keys in code ***Constants: ["method=recipes.search", "method=recipe.get", "max_results=50", "3d4ed80d2ab0423c9151c64c98d9f3df&", "max_results=50", "method=recipes.search"]
[UnitContainer{unit=$r4[0] = "method=recipes.search", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipesAtPageNumber(java.lang.String,int)>'}, UnitContainer{unit=$r2[0] = "method=recipe.get", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipe(long)>'}, UnitContainer{unit=$r3[1] = "max_results=50", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipes(java.lang.String)>'}, UnitContainer{unit=$r2 = "3d4ed80d2ab0423c9151c64c98d9f3df&", method='<today.onedrop.android.log.food.search.FatSecretRestClient: java.lang.String sign(java.lang.String,java.lang.String,java.lang.String[])>'}, UnitContainer{unit=$r4[1] = "max_results=50", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipesAtPageNumber(java.lang.String,int)>'}, UnitContainer{unit=$r3[0] = "method=recipes.search", method='<today.onedrop.android.log.food.search.FatSecretRestClient: com.google.gson.JsonObject getRecipes(java.lang.String)>'}]
=======================================
=======================================
***Violated Rule 8: Used < 1000 iteration for PBE ***Constants: [1]
[UnitContainer{unit=$fakeLocal_254[2] = 1, method='<org.spongycastle.openssl.jcajce.PEMUtilities: javax.crypto.SecretKey getKey(org.spongycastle.jcajce.util.JcaJceHelper,char[],java.lang.String,int,byte[],boolean)>'}]
=======================================
=======================================
***Violated Rule 8a: Used < 1000 iteration for PBE ***Constants: [$i0, $i1 & 32, $r0.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.ASN1Integer iterations>, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), (org.spongycastle.asn1.pkcs.Pfx) $r1, (org.spongycastle.asn1.ASN1Encodable) $r2, new org.spongycastle.asn1.ASN1StreamParser, $r0.<org.spongycastle.asn1.pkcs.PBKDF2Params: org.spongycastle.asn1.ASN1Integer iterationCount>, $r3, i3 << 0, $r3, $r9, specialinvoke $r9.<org.spongycastle.asn1.DERExternalParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $r2, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), @this: org.spongycastle.asn1.pkcs.PBKDF2Params, $r14, @parameter0: byte[], @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>, $i0, (org.spongycastle.jcajce.PKCS12Key) $r2, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.SafeBag: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $i1, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.ContentInfo contentInfo>, virtualinvoke $r14.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r1), $r4.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi: java.security.SecureRandom random>, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, r1, @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier, (org.spongycastle.asn1.pkcs.PKCS12PBEParams) $r1, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: int itCount>, $r0.<org.spongycastle.asn1.pkcs.ContentInfo: org.spongycastle.asn1.ASN1Encodable content>, (org.spongycastle.jcajce.PKCS12KeyWithParameters) $r5, @this: org.spongycastle.asn1.x509.DigestInfo, $r1, @parameter1: char[], $r0.<org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher: int scheme>, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.jcajce.util.JcaJceHelper helper>, (org.spongycastle.asn1.ASN1OctetString) $r6, $i0, $r0.<org.spongycastle.asn1.ASN1Sequence: java.util.Vector seq>, null, 1, $i2, $r3, $r6, specialinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: void <init>(boolean,int,org.spongycastle.asn1.ASN1StreamParser)>(1, $i2, $r3), virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable getParameters()>(), $r2, @parameter0: java.lang.Object, virtualinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $i0 & 1023, $r2, @this: org.spongycastle.asn1.pkcs.KeyDerivationFunc, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>(), (org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo) $r1, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: int saltLength>, @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, i0, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), $i0, $r12, $r3, @this: org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder, $r16, virtualinvoke $r2.<java.math.BigInteger: int intValue()>(), $r2, lengthof $r6, @parameter2: int, (org.spongycastle.asn1.ASN1Sequence) $r6, $i0, staticinvoke <org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)>($r2), @this: org.spongycastle.asn1.ASN1InputStream, @parameter0: byte[], -1, @parameter0: byte[], null, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $i10 + $i9, $i0, (javax.crypto.SecretKey) $r4, $r2, $i0, r1, $i0, $i1, null, $r1, $i0, $r1, $r2, @this: org.spongycastle.asn1.pkcs.Pfx, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedData: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>($b0, $r3, $r2), (org.spongycastle.asn1.ASN1Set) $r0, staticinvoke <org.spongycastle.jce.provider.BouncyCastleProvider: org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter getAsymmetricKeyInfoConverter(org.spongycastle.asn1.ASN1ObjectIdentifier)>($r2), $i0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $i1, i0, $i0, $r0.<org.spongycastle.asn1.pkcs.PBES2Parameters: org.spongycastle.asn1.pkcs.KeyDerivationFunc func>, r1, @parameter4: int, @this: org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilderProvider$1, $r0.<org.spongycastle.asn1.x509.DigestInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, r1, $i0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r2), @this: org.spongycastle.asn1.pkcs.MacData, virtualinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), virtualinvoke $r2.<java.io.InputStream: int read()>(), staticinvoke <org.spongycastle.util.encoders.Hex: byte[] encode(byte[],int,int)>($r0, 0, $i0), virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int readLength()>(), (org.spongycastle.asn1.ASN1Sequence) $r2, @this: org.spongycastle.asn1.pkcs.SafeBag, virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0), @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $b4 & 255, r0.<java.io.DataInputStream: java.io.InputStream in>, r1, @parameter2: int, $r3, null, r53, new java.io.BufferedInputStream, $r0.<org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder: int iterationCount>, (java.security.PrivateKey) $r15, @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams, @parameter1: java.security.Key, virtualinvoke r0.<java.util.Random: int next(int)>(32), @parameter0: int, @parameter1: java.security.Key, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), new org.spongycastle.asn1.BERApplicationSpecificParser, virtualinvoke $r1.<javax.crypto.spec.PBEKeySpec: int getIterationCount()>(), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.spongycastle.asn1.pkcs.AuthenticatedSafe) $r1, r1, new org.spongycastle.asn1.pkcs.Pfx, (org.spongycastle.asn1.pkcs.PBKDF2Params) $r1, $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: int itCount>, specialinvoke r0.<java.io.BufferedInputStream: byte[] getBufIfOpen()>(), virtualinvoke $r7.<org.spongycastle.asn1.BERSetParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), r1, i0, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBES2Parameters: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), (org.spongycastle.asn1.pkcs.PBKDF2Params) $r3, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, $r1, $i1, $r0, $i0, $r2, specialinvoke $r2.<org.spongycastle.asn1.IndefiniteLengthInputStream: void <init>(java.io.InputStream,int)>($r0, $i0), $r3, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.Pfx: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @this: org.spongycastle.asn1.x509.AlgorithmIdentifier, @parameter0: java.lang.Object, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), $r1, null, $r3, $r8, specialinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $r37, $r4, $i0, r1, $i1, null, r1, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams: org.spongycastle.asn1.pkcs.PBKDF2Params params>, $r0.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: org.spongycastle.asn1.pkcs.ContentInfo[] info>, $r2, (org.spongycastle.asn1.ASN1OctetString) $r15, new org.spongycastle.asn1.BERSetParser, (org.spongycastle.jce.interfaces.PKCS12BagAttributeCarrier) $r32, new org.spongycastle.asn1.BEROctetStringParser, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams: org.spongycastle.asn1.pkcs.PBEParameter params>, @this: org.spongycastle.asn1.pkcs.MacData, r1, (org.spongycastle.jcajce.PBKDF1Key) $r1, staticinvoke <org.spongycastle.util.Arrays: byte[] clone(byte[])>($r1), $i0, new org.spongycastle.asn1.DERExternalParser, new org.spongycastle.asn1.pkcs.PBES2Parameters, r1, $r0, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Set bagAttributes>, null, $r0.<org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder: org.spongycastle.jcajce.util.JcaJceHelper helper>, @this: org.spongycastle.asn1.pkcs.MacData, @this: org.spongycastle.asn1.x509.DigestInfo, @parameter0: int, new org.spongycastle.asn1.pkcs.SafeBag, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, (org.spongycastle.asn1.ASN1Set) $r2, $i0, $r0.<org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilder: int iterationCount>, $r1[$i2], $r0.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1Encodable parameters>, r0.<java.io.DataInputStream: java.io.InputStream in>, $r0.<org.spongycastle.jcajce.PBKDF1KeyWithParameters: int iterationCount>, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), null, @parameter1: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.asn1.x509.DigestInfo: byte[] digest>, @this: org.spongycastle.asn1.pkcs.PBES2Parameters, i2 << 8, new org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, (org.spongycastle.asn1.ASN1Encodable) $r0, $r7, @this: org.spongycastle.jcajce.PBKDF1KeyWithParameters, $r0.<org.spongycastle.asn1.ASN1InputStream: int limit>, null, null, staticinvoke <org.spongycastle.asn1.ASN1OctetString: org.spongycastle.asn1.ASN1OctetString getInstance(org.spongycastle.asn1.ASN1TaggedObject,boolean)>($r3, 0), $r2, virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>(), (org.spongycastle.jcajce.PBKDF1KeyWithParameters) $r11, @parameter0: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, lengthof $r13, $i1, virtualinvoke $r2.<org.spongycastle.asn1.ASN1Integer: java.math.BigInteger getValue()>(), (org.spongycastle.asn1.pkcs.PBES2Parameters) $r1, (org.spongycastle.asn1.ASN1Encodable) $r0, $r29[$i0], @this: org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams, (javax.crypto.SecretKey) $r1, new org.spongycastle.asn1.x509.AlgorithmIdentifier, $i0, @parameter4: int, $i8 + $i7, virtualinvoke $r4.<java.io.InputStream: int read()>(), new org.spongycastle.asn1.pkcs.PBKDF2Params, $r2, $i0, $r3, specialinvoke $r3.<org.spongycastle.asn1.ASN1StreamParser: void <init>(java.io.InputStream,int)>($r2, $i0), $r3, virtualinvoke $r2.<org.spongycastle.asn1.x509.AlgorithmIdentifier: org.spongycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>(), @parameter0: int, @parameter0: java.lang.Object, r0.<java.io.DataInputStream: java.io.InputStream in>, virtualinvoke $r2.<org.spongycastle.asn1.ASN1OctetString: byte[] getOctets()>(), $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.PBKDF2Params: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $i0, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive buildObject(int,int,int)>($i1, $i2, $i0), new org.spongycastle.asn1.pkcs.AuthenticatedSafe, $r3, @this: org.spongycastle.jcajce.PKCS12KeyWithParameters, @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi, virtualinvoke $r1.<java.io.InputStream: int read()>(), @this: org.spongycastle.asn1.pkcs.SafeBag, @this: org.spongycastle.asn1.pkcs.AuthenticatedSafe, (javax.crypto.interfaces.PBEKey) $r1, $i0, @this: org.spongycastle.jcajce.provider.symmetric.util.BaseBlockCipher, new org.spongycastle.asn1.IndefiniteLengthInputStream, r0.<java.io.DataInputStream: java.io.InputStream in>, $i0, $i0, (org.spongycastle.asn1.pkcs.EncryptedData) $r1, staticinvoke <org.spongycastle.asn1.ASN1InputStream: int readTagNumber(java.io.InputStream,int)>($r0, $i1), @parameter1: char[], virtualinvoke $r7.<org.spongycastle.asn1.pkcs.PKCS12PBEParams: java.math.BigInteger getIterations()>(), virtualinvoke $r6.<org.spongycastle.asn1.BERTaggedObjectParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r0.<org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey: javax.crypto.spec.PBEKeySpec pbeKeySpec>, @parameter0: java.lang.Object, $r0, $i0, $s5, new org.spongycastle.asn1.pkcs.EncryptedData, @this: org.spongycastle.pkcs.jcajce.JcePKCSPBEOutputEncryptorBuilder, $i0, interfaceinvoke $r9.<org.spongycastle.asn1.ASN1Encodable: org.spongycastle.asn1.ASN1Primitive toASN1Primitive()>(), @this: org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry, $r0.<org.spongycastle.asn1.pkcs.PBEParameter: org.spongycastle.asn1.ASN1Integer iterations>, @this: org.spongycastle.asn1.pkcs.PKCS12PBEParams, interfaceinvoke $r12.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r13), (org.spongycastle.asn1.ASN1Sequence) $r0, specialinvoke $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: javax.crypto.Cipher createCipher(int,char[],org.spongycastle.asn1.x509.AlgorithmIdentifier)>(4, $r3, $r1), (org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey) $r2, $i12 + $i11, (org.spongycastle.asn1.ASN1Sequence) $r36, $i0, r1, new org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r0, $r0.<org.spongycastle.asn1.pkcs.MacData: byte[] salt>, (org.spongycastle.asn1.ASN1Sequence) $r36, @this: org.spongycastle.jcajce.provider.symmetric.PBEPBKDF2$AlgParams, $r0.<org.spongycastle.asn1.ASN1OctetString: byte[] string>, @this: org.spongycastle.asn1.ASN1Set, new org.spongycastle.jcajce.PKCS12Key, @parameter2: int, $r0.<org.spongycastle.jcajce.provider.symmetric.PBEPKCS12$AlgParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams params>, virtualinvoke $r13.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r2, "", 2), (org.spongycastle.asn1.ASN1Sequence) $r6, @this: org.spongycastle.asn1.ASN1Sequence, $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector set>, virtualinvoke $r0.<org.spongycastle.asn1.ASN1InputStream: int read()>(), $r1, @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, $i1, $r11, $r1, @this: org.spongycastle.asn1.pkcs.PBEParameter, $i1, null, $r3, staticinvoke <org.spongycastle.asn1.pkcs.PKCS12PBEParams: org.spongycastle.asn1.pkcs.PKCS12PBEParams getInstance(java.lang.Object)>($r6), new org.spongycastle.asn1.ASN1InputStream, $i1, (org.spongycastle.asn1.ASN1Set) $r15, @parameter4: byte[], @this: org.spongycastle.asn1.pkcs.ContentInfo, virtualinvoke $r8.<org.spongycastle.asn1.BERSequenceParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r2, $i0, @parameter0: java.math.BigInteger, @parameter0: java.lang.Object, $i0, (javax.crypto.interfaces.PBEKey) $r21, $r0.<org.spongycastle.asn1.pkcs.Pfx: org.spongycastle.asn1.pkcs.MacData macData>, (org.spongycastle.asn1.ASN1Primitive) $r15, $r0.<org.spongycastle.asn1.pkcs.MacData: org.spongycastle.asn1.x509.DigestInfo digInfo>, $r0.<org.spongycastle.pkcs.jcajce.JcePKCS12MacCalculatorBuilderProvider$1: org.spongycastle.asn1.x509.AlgorithmIdentifier val$algorithmIdentifier>, @parameter2: org.spongycastle.asn1.pkcs.PKCS12PBEParams, $r1, @parameter0: char[], $i0, @parameter0: java.lang.Object, $r3, @this: org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi, $i0, $r4, $i1, $r1, $i0 + 1024, (org.spongycastle.asn1.ASN1Encodable) $r2, @parameter1: java.security.Key, interfaceinvoke $r3.<org.spongycastle.jcajce.provider.util.AsymmetricKeyInfoConverter: java.security.PrivateKey generatePrivate(org.spongycastle.asn1.pkcs.PrivateKeyInfo)>($r0), @this: org.spongycastle.asn1.ASN1OctetString, $r1, $r0, $r2, specialinvoke $r2.<org.spongycastle.asn1.pkcs.AuthenticatedSafe: void <init>(org.spongycastle.asn1.ASN1Sequence)>($r0), @parameter0: org.spongycastle.asn1.x509.AlgorithmIdentifier, $r0.<org.spongycastle.asn1.ASN1Set: java.util.Vector set>, $r1, @parameter0: java.security.Key, $r2, $r0.<org.spongycastle.jcajce.PKCS12KeyWithParameters: int iterationCount>, lengthof $r2, null, $r0, $r12, @parameter0: java.lang.Object, i1 << 16, i0 << 24, $i2, $r3, $r4, specialinvoke $r4.<org.spongycastle.asn1.BERApplicationSpecificParser: void <init>(int,org.spongycastle.asn1.ASN1StreamParser)>($i2, $r3), $r0.<org.spongycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi: org.spongycastle.asn1.x509.AlgorithmIdentifier macAlgorithm>, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, virtualinvoke $r4.<org.spongycastle.asn1.ASN1ObjectIdentifier: java.lang.String getId()>(), @parameter1: java.security.Key, $i0, specialinvoke r0.<java.math.BigInteger: int getInt(int)>(0), @parameter0: java.lang.Object, @parameter2: org.spongycastle.asn1.x509.AlgorithmIdentifier, staticinvoke <org.spongycastle.asn1.ASN1Sequence: org.spongycastle.asn1.ASN1Sequence getInstance(java.lang.Object)>($r1), @this: org.spongycastle.asn1.pkcs.Pfx, $i0, null, @parameter0: java.lang.Object, @this: org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo, @this: org.spongycastle.jcajce.provider.symmetric.util.BCPBEKey, $i13, $r0.<org.spongycastle.asn1.pkcs.KeyDerivationFunc: org.spongycastle.asn1.x509.AlgorithmIdentifier algId>, @parameter1: java.security.Key, $i0, r1, $i0, r52, @this: org.spongycastle.asn1.ASN1Set, virtualinvoke $r3.<java.io.InputStream: int read()>(), $r0.<org.spongycastle.pkcs.jcajce.JcePKCSPBEOutputEncryptorBuilder: int iterationCount>, $r0.<org.spongycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.spongycastle.asn1.ASN1OctetString data>, virtualinvoke $r1.<javax.crypto.MacSpi: int engineGetMacLength()>(), staticinvoke <org.spongycastle.asn1.ASN1Set: org.spongycastle.asn1.ASN1Set getInstance(java.lang.Object)>($r2), $r12, $i0, $r5, $r0.<org.spongycastle.asn1.pkcs.SafeBag: org.spongycastle.asn1.ASN1Encodable bagValue>, $r0.<org.spongycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$StoreEntry: int type>, r1, new org.spongycastle.asn1.BERSequenceParser, $r12, new java.io.DataInputStream, r0.<javax.crypto.Mac: javax.crypto.MacSpi spi>, interfaceinvoke $r11.<org.spongycastle.jcajce.util.JcaJceHelper: javax.crypto.Cipher createCipher(java.lang.String)>($r12), new org.spongycastle.asn1.BERTaggedObjectParser, virtualinvoke $r2.<org.spongycastle.asn1.ASN1InputStream: org.spongycastle.asn1.ASN1Primitive readObject()>(), $i1, (javax.crypto.interfaces.PBEKey) $r6, new org.spongycastle.asn1.ASN1InputStream, @parameter1: java.security.Key, $r2, @parameter0: java.lang.Object, virtualinvoke $r9.<org.spongycastle.asn1.DERExternalParser: org.spongycastle.asn1.ASN1Primitive getLoadedObject()>(), $r3, $r7, specialinvoke $r7.<org.spongycastle.asn1.BERSetParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), (org.spongycastle.asn1.pkcs.SafeBag) $r1, $r1, $r2, specialinvoke $r2.<org.spongycastle.asn1.ASN1InputStream: void <init>(byte[])>($r1), $r1, $r0.<org.spongycastle.asn1.pkcs.MacData: java.math.BigInteger iterationCount>, $r3, $r10, specialinvoke $r10.<org.spongycastle.asn1.BEROctetStringParser: void <init>(org.spongycastle.asn1.ASN1StreamParser)>($r3), $i0, @this: org.spongycastle.openssl.jcajce.JceOpenSSLPKCS8EncryptorBuilder]
=======================================
=======================================
***Violated Rule 11: Found predictable seeds in code ***Constants: ["www.bouncycastle.org"]
[UnitContainer{unit=$r8 = "www.bouncycastle.org", method='<org.spongycastle.crypto.examples.DESExample: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean)>'}]
=======================================
=======================================
***Violated Rule 7: Used HTTP Protocol ***Constants: ["http://maps.googleapis.com/maps/api/geocode/json?latlng=%1$f,%2$f&sensor=true&language=%3$s", "http://localhost/", "http://localhost/", "http://localhost/", "http://192.168.101.1", "http://localhost/"]
[UnitContainer{unit=$r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "http://maps.googleapis.com/maps/api/geocode/json?latlng=%1$f,%2$f&sensor=true&language=%3$s", $r3), method='<pl.charmas.android.reactivelocation.observables.geocode.FallbackReverseGeocodeObservable: java.util.List alternativeReverseGeocodeQuery()>'}, UnitContainer{unit=$fakeLocal_65[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object,okhttp3.Headers)>'}, UnitContainer{unit=$fakeLocal_93[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response error(int,okhttp3.ResponseBody)>'}, UnitContainer{unit=$fakeLocal_34[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(java.lang.Object)>'}, UnitContainer{unit=$fakeLocal_136[0] = "http://192.168.101.1", method='<today.onedrop.android.injection.NetworkModule: today.onedrop.android.device.scale.BlipScaleClient provideBlipScaleClient(okhttp3.logging.HttpLoggingInterceptor)>'}, UnitContainer{unit=$fakeLocal_50[0] = "http://localhost/", method='<retrofit2.Response: retrofit2.Response success(int,java.lang.Object)>'}]
=======================================
